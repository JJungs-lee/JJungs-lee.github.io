var store = [{
        "title": "RUST : 0. Overview",
        "excerpt":"I will post a summary of RUST   Plz follow the below link. Thx :D   link     Getting Started   Programming a Guessing Game   3. Common Programming Concepts   4. Understanding Ownership   5. Using Structs to Structure Related Data   6. Enums and Pattern Matching   7. Managing Growing Projects with Packages, Crates, and Modules   8. Common Collections   9. Error Handling   10. Generic Types, Traits, and Lifetimes   Writing Automated Tests   An I/O Project: Building a Command Line Program   Functional Language Features: Iterators and Closures   More about Cargo and Crates.io   Smart Pointers   Fearless Concurrency   Object Oriented Programming Features of Rust   Patterns and Matching   Advanced Features   Final Project: Building a Multithreaded Web Server   Appendix    [Reference]   eng ver : https://doc.rust-lang.org/book/title-page.html   kor ver : https://rinthel.github.io/rust-lang-book-ko  ","categories": ["RUST Language"],
        "tags": ["Summery","Overview"],
        "url": "https://jjungs-lee.github.io//rust%20language/0.Overview/",
        "teaser":null},{
        "title": "RUST : 3. Common Programming Concepts",
        "excerpt":"Variables and Mutability  Default variables are immutable.  If you want mutable variable, can make them mutable by adding mut in front of the variable name.  fn main() {     let mut x = 5;     println!(\"The value of x is: {}\", x);     x = 6;     println!(\"The value of x is: {}\", x); }  First, you aren‚Äôt allowed to use mut with constants. Constants aren‚Äôt just immutable by default‚Äîthey‚Äôre always immutable.  You declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated.  const MAX_POINTS: u32 = 100_000;  Note: Rust‚Äôs naming convention for constants is to use all uppercase with underscores between words, and underscores can be inserted in numeric literals to improve readability   Data Types  Keep in mind that Rust is a statically typed language, which means that it must know the types of all variables at compile time.   Table 3-1: Integer Types in Rust                  Length       Signed       Unsigned                       8-bit       i8       u8                 16-bit       i16       u16                 32-bit       i32       u32                 64-bit       i64       u64                 arch       isize       usize           Table 3-2:Integer Literals in Rust                  Number literals       Example                       Decimal       98_222                 Hex       0xff                 Octal       0o77                 Binary       0b1111_0000                 Byte (u8 only)       b‚ÄôA‚Äô           // Floating-Point(default type is f64) let x = 2.0; // f64 let y: f32 = 3.0; // f32  // Numeric Operations let sum = 5 + 10; let difference = 95.5 - 4.3; let product = 4 * 30; let quotient = 56.7 / 32.2; let remainder = 43 % 5;  // Boolean let t = true; let f: bool = false; // with explicit type annotation  // Character let c = 'z'; let z = '‚Ñ§'; let heart_eyed_cat = 'üòª';  // Tuple let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {}\", y);  // Access a tuple element directly by using a period(.) // followed by the index of the value we want to access let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2;  // array let a = [1, 2, 3, 4, 5]; let first = a[0]; let second = a[1];   Functions  fn keyword, which allows you to declare new functions.  Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere.  fn main() {     println!(\"Hello, world!\");      another_function(); }  fn another_function() {     println!(\"Another function.\"); }  Parameters  fn main() {     another_function(5, 6); }  fn another_function(x: i32, y: i32) {     println!(\"The value of x is: {}\", x);     println!(\"The value of y is: {}\", y); }   Function Bodies Contain Statements and Expressions  Statements are instructions that perform some action and do not return a value.   Expressions evaluate to a resulting value.  fn main() {     let y = 6;  // This is Statemnets      // Error - (let y = 6) statement does not return a value     let x = (let y = 6);  }  Note: This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment.  In those languages, you can write x = y = 6 and have both x and y have the value 6; that is not the case in Rust.   Expressions can be part of statements: the 6 in the statement let y = 6; is an expression that evaluates to the value 6.  Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression, for example:  fn main() {     let x = 5;      let y = { //like this         let x = 3;         x + 1     };      println!(\"The value of y is: {}\", y); }  This expression:  {     let x = 3;     x + 1 }  Note: the x + 1 line without a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far.  Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.   Functions with Return Values  We don‚Äôt name return values, but we do declare their type after an arrow (-&gt;) In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function.  You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly.  // perfectly valid function in Rust fn five() -&gt; i32 {     5  }  fn main() {     let x = five();      println!(\"The value of x is: {}\", x); }   fn main() {     let x = plus_one(5);      println!(\"The value of x is: {}\", x); }  fn plus_one(x: i32) -&gt; i32 {     x + 1     // If place a semicolon at the end of the line x + 1,     // changing it from an expression to a statement,      // we‚Äôll get an error.     // like this -&gt; error[E0308]: mismatched types }   Comments  A simple comment:      // So we‚Äôre doing something complicated here,      // long enough that we need     // multiple lines of comments to do it!     // Whew! Hopefully, this comment will     // explain what‚Äôs going on.     let lucky_number = 7; // I‚Äôm feeling lucky today.  Rust also has another kind of comment, documentation comments, which we‚Äôll discuss in the ‚ÄúPublishing a Crate to Crates.io‚Äù section of Chapter 14.   Control Flow  The most common constructs that let you control the flow of execution of Rust code are if expressions and loops.  if Expressions  fn main() {     let number = 3;      if number &lt; 5 {         rintln!(\"condition was true\");     } else {         println!(\"condition was false\");     } }   It‚Äôs also worth noting that the condition in this code must be a bool. Rust will not automatically try to convert non-Boolean types to a Boolean.  fn main() {     let number = 3;      if number {   //Change to \"if number != 0 {\"         println!(\"number was three\");     } }   You can have multiple conditions by combining if and else in an else if expression.  fn main() {     let number = 6;      if number % 4 == 0 {         println!(\"number is divisible by 4\");     } else if number % 3 == 0 {         println!(\"number is divisible by 3\");     } else if number % 2 == 0 {         println!(\"number is divisible by 2\");     } else {         println!(\"number is not divisible by 4, 3, or 2\");     } }   Because if is an expression, we can use it on the right side of a let statement, as in below.  fn main() {     let condition = true;     let number = if condition {         5     } else {         6     };      println!(\"The value of number is: {}\", number); }   loop Expressions  The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.   Most terminals support a keyboard shortcut, ctrl-c, to interrupt a program that is stuck in a continual loop. The symbol ^C represents where you pressed ctrl-c. You may or may not see the word again! printed after the ^C, depending on where the code was in the loop when it received the interrupt signal.  fn main() {     loop {         println!(\"again!\");     } }   // Returning Values from Loops fn main() {     let mut counter = 0;      let result = loop {         counter += 1;          if counter == 10 {           break counter * 2;         }       };      println!(\"The result is {}\", result); }  while Expressions  While the condition is true, the loop runs. When the condition ceases to be true, the program calls break, stopping the loop. This loop type could be implemented using a combination of loop, if, else, and break; you could try that now in a program, if you‚Äôd like.  fn main() {     let mut number = 3;      while number != 0 {         println!(\"{}!\", number);          number -= 1;     }      println!(\"LIFTOFF!!!\"); }   for Expressions  You could use the while construct to loop over the elements of a collection, such as an array.  fn main() {     let a = [10, 20, 30, 40, 50];     let mut index = 0;      while index &lt; 5 {         println!(\"the value is: {}\", a[index]);          index = index + 1;     } }  But this approach is error prone; we could cause the program to panic if the index length is incorrect. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop. As a more concise alternative, you can use a for loop and execute some code for each item in a collection.  fn main() {     let a = [10, 20, 30, 40, 50];      for element in a.iter() {         println!(\"the value is: {}\", element);     } }   Here‚Äôs what the countdown would look like using a for loop and another method we‚Äôve not yet talked about, rev, to reverse the range:  fn main() {     for number in (1..4).rev() {         println!(\"{}!\", number);     }       println!(\"LIFTOFF!!!\"); }  ","categories": ["RUST Language"],
        "tags": ["concepts","valriable"],
        "url": "https://jjungs-lee.github.io//rust%20language/3.Common-Programming-Concepts/",
        "teaser":null},{
        "title": "RUST : 4. Understanding Ownership",
        "excerpt":"Ownership is Rust‚Äôs most unique feature, and it enables Rust to make memory safety guarantees without needing a garbage collector.   What Is Ownership?  Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach:     memory is managed through a system of ownership with a set of rules that the compiler checks at compile time.    Ownership Rules     Each value in Rust has a variable that‚Äôs called its owner.   There can only be one owner at a time.   When the owner goes out of scope, the value will be dropped.   Variable Scope  The variable s refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it‚Äôs declared until the end of the current scope.  let s = \"hello\";  scope is the range within a program for which an item is valid.  {                    // s is not valid here, it‚Äôs not yet declared   let s = \"hello\";   // s is valid from this point forward   // do stuff with s }                    // this scope is now over, and s is no longer valid  Listing 4-1: A variable and the scope in which it is valid  There are two important points in time here:     When s comes into scope, it is valid.   It remains valid until it goes out of scope.   The String Type  we need a data type that is more complex than the ones we covered in the ‚ÄúData Types‚Äù section of Chapter 3. The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.   For example, what if we want to take user input and store it? For these situations, Rust has a second string type, String. This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a String from a string literal using the from function, like so:  let s = String::from(\"hello\");  The double colon (::) is an operator that allows us to namespace this particular from function under the String type rather than using some sort of name like string_from.   Why can String be mutated but literals cannot? The difference is how these two types deal with memory.   Memory and Allocation  With the String type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:     The memory must be requested from the operating system at runtime.   We need a way of returning this memory to the operating system when we‚Äôre done with our String.   That first part is done by us: when we call String::from, its implementation requests the memory it needs.   However, the second part is different. In languages with a garbage collector (GC), the GC keeps track and cleans up memory that isn‚Äôt being used anymore, and we don‚Äôt need to think about it. Without a GC, it‚Äôs our responsibility to identify when memory is no longer being used and call code to explicitly return it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we‚Äôll waste memory. If we do it too early, we‚Äôll have an invalid variable. If we do it twice, that‚Äôs a bug too. We need to pair exactly one allocate with exactly one free.  {     let s = String::from(\"hello\"); // s is valid from this point forward     // do stuff with s }                                  // this scope is now over, and s is no                                    // longer valid  There is a natural point at which we can return the memory our String needs to the operating system: when s goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called drop, and it‚Äôs where the author of String can put the code to return the memory. Rust calls drop automatically at the closing curly bracket.   Note: In C++, this pattern of deallocating resources at the end of an item‚Äôs lifetime is sometimes called Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar to you if you‚Äôve used RAII patterns.   Ways Variables and Data Interact: Move  let s1 = String::from(\"hello\"); let s2 = s1;  A String is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.     Figure 4-1: Representation in memory of a String holding the value ‚Äúhello‚Äù bound to s1   When we assign s1 to s2, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to.     Figure 4-2: Representation in memory of the variable s2 that has a copy of the pointer, length, and capacity of s1   The representation does not look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation s2 = s1 could be very expensive in terms of runtime performance if the data on the heap were large.     Figure 4-3: Another possibility for what s2 = s1 might do if Rust copied the heap data as well   Earlier, we said that when a variable goes out of scope, Rust automatically calls the drop function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. To ensure memory safety, there‚Äôs one more detail to what happens in this situation in Rust.   let s1 = String::from(\"hello\"); let s2 = s1;  println!(\"{}, world!\", s1);  You‚Äôll get an error like this because Rust prevents you from using the invalidated reference:  error[E0382]: use of moved value: `s1`  --&gt; src/main.rs:5:28   | 3 |     let s2 = s1;   |         -- value moved here 4 | 5 |     println!(\"{}, world!\", s1);   |                            ^^ value used here after move   |   = note: move occurs because `s1` has type `std::string::String`,   which does not implement the `Copy` trait  with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it‚Äôs known as a move. That solves our problem! With only s2 valid, when it goes out of scope, it alone will free the memory, and we‚Äôre done. Rust will never automatically create ‚Äúdeep‚Äù copies of your data.     Figure 4-4: Representation in memory after s1 has been invalidated   Ways Variables and Data Interact: Clone  If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone. This methods are a common feature in many programming languages, you‚Äôve probably seen them before. This works just fine and explicitly produces the behavior shown in Figure 4-3, where the heap data does get copied.  let s1 = String::from(\"hello\"); let s2 = s1.clone();  println!(\"s1 = {}, s2 = {}\", s1, s2);   Stack-Only Data: Copy  This code seems to contradict what we just learned: we don‚Äôt have a call to clone, but x is still valid and wasn‚Äôt moved into y.   The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there‚Äôs no reason we would want to prevent x from being valid after we create the variable y. In other words, there‚Äôs no difference between deep and shallow copying here, so calling clone wouldn‚Äôt do anything different from the usual shallow copying and we can leave it out.  let x = 5; let y = x;  println!(\"x = {}, y = {}\", x, y);  Rust has a special annotation called the Copy trait that we can place on types like integers that are stored on the stack (we‚Äôll talk more about traits in Chapter 10). So what types are Copy?     All the integer types, such as u32.   The Boolean type, bool, with values true and false.   All the floating point types, such as f64.   The character type, char.   Tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not.   Ownership and Functions  The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. If we tried to use s after the call to takes_ownership, Rust would throw a compile-time error. These static checks protect us from mistakes.  fn main() {     let s = String::from(\"hello\");  // s comes into scope      takes_ownership(s);             // s's value moves into the function...                                     // ... and so is no longer valid here      let x = 5;                      // x comes into scope      makes_copy(x);                  // x would move into the function,                                     // but i32 is Copy, so it‚Äôs okay to still                                     // use x afterward  } // Here, x goes out of scope, then s. But because s's value was moved, nothing   // special happens.  fn takes_ownership(some_string: String) { // some_string comes into scope     println!(\"{}\", some_string); } // Here, some_string goes out of scope and `drop` is called. The backing   // memory is freed.  fn makes_copy(some_integer: i32) { // some_integer comes into scope     println!(\"{}\", some_integer); } // Here, some_integer goes out of scope. Nothing special happens.  Listing 4-3: Functions with ownership and scope annotated   Return Values and Scope  Returning values can also transfer ownership. Listing 4-4 is an example with similar annotations to those in Listing 4-3.  fn main() {     let s1 = gives_ownership();         // gives_ownership moves its return                                         // value into s1      let s2 = String::from(\"hello\");     // s2 comes into scope      let s3 = takes_and_gives_back(s2);  // s2 is moved into                                         // takes_and_gives_back, which also                                         // moves its return value into s3 } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was   // moved, so nothing happens. s1 goes out of scope and is dropped.  fn gives_ownership() -&gt; String {             // gives_ownership will move its                                              // return value into the function                                              // that calls it      let some_string = String::from(\"hello\"); // some_string comes into scope      some_string                              // some_string is returned and                                              // moves out to the calling                                              // function }  // takes_and_gives_back will take a String and return one fn takes_and_gives_back(a_string: String) -&gt; String { // a_string comes into                                                       // scope      a_string  // a_string is returned and moves out to the calling function }  Listing 4-4: Transferring ownership of return values   The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless the data has been moved to be owned by another variable.   Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It‚Äôs quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.   It‚Äôs possible to return multiple values using a tuple, as shown in Listing 4-5.  fn main() {     let s1 = String::from(\"hello\");      let (s2, len) = calculate_length(s1);      println!(\"The length of '{}' is {}.\", s2, len); }  fn calculate_length(s: String) -&gt; (String, usize) {     let length = s.len(); // len() returns the length of a String.      (s, length) }  Listing 4-5: Returning ownership of parameters  But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called references.   References and Borrowing  Here is how you would define and use a calculate_length function that has a reference to an object as a parameter instead of taking ownership of the value:  fn main() {     let s1 = String::from(\"hello\");      let len = calculate_length(&amp;s1);      println!(\"The length of '{}' is {}.\", s1, len); }  fn calculate_length(s: &amp;String) -&gt; usize {     s.len() }  First, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass &amp;s1 into calculate_length and, in its definition, we take &amp;String rather than String.   These ampersands are references, and they allow you to refer to some value without taking ownership of it     Figure 4-5: A diagram of &amp;String s pointing at String s1  Note: The opposite of referencing by using &amp; is dereferencing, which is accomplished with the dereference operator, *. We‚Äôll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.   let s1 = String::from(\"hello\");  let len = calculate_length(&amp;s1);  The &amp;s1 syntax lets us create a reference that refers to the value of s1 but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.   Likewise, the signature of the function uses &amp; to indicate that the type of the parameter s is a reference. Let‚Äôs add some explanatory annotations:  fn calculate_length(s: &amp;String) -&gt; usize { // s is a reference to a String     s.len() } // Here, s goes out of scope. But because it does not have ownership of what   // it refers to, nothing happens.```  The scope in which the variable s is valid is the same as any function parameter‚Äôs scope, but we don‚Äôt drop what the reference points to when it goes out of scope because we don‚Äôt have ownership. When functions have references as parameters instead of the actual values, we won‚Äôt need to return the values in order to give back ownership, because we never had ownership.   We call having references as function parameters borrowing. As in real life, if a person owns something, you can borrow it from them. When you‚Äôre done, you have to give it back.   So what happens if we try to modify something we‚Äôre borrowing? Try the code. Spoiler alert: it doesn‚Äôt work!  fn main() {     let s = String::from(\"hello\");      change(&amp;s); }  fn change(some_string: &amp;String) {     some_string.push_str(\", world\"); }  error[E0596]: cannot borrow immutable borrowed content `*some_string` as mutable  --&gt; error.rs:8:5   | 7 | fn change(some_string: &amp;String) {   |                        ------- use `&amp;mut String` here to make mutable 8 |     some_string.push_str(\", world\");   |     ^^^^^^^^^^^ cannot borrow as mutable  Listing 4-6: Attempting to modify a borrowed value  Just as variables are immutable by default, so are references. We‚Äôre not allowed to modify something we have a reference to.   Mutable References  We can fix the error in the code from Listing 4-6 with just a small tweak  fn main() {     let mut s = String::from(\"hello\");      change(&amp;mut s); }  fn change(some_string: &amp;mut String) {     some_string.push_str(\", world\"); }  First, we had to change s to be mut. Then we had to create a mutable reference with &amp;mut s and accept a mutable reference with some_string: &amp;mut String.   But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:  let mut s = String::from(\"hello\");  let r1 = &amp;mut s; let r2 = &amp;mut s;  println!(\"{}, {}\", r1, r2);  error[E0499]: cannot borrow `s` as mutable more than once at a time  --&gt; src/main.rs:5:14   | 4 |     let r1 = &amp;mut s;   |              ------ first mutable borrow occurs here 5 |     let r2 = &amp;mut s;   |              ^^^^^^ second mutable borrow occurs here 6 | 7 |     println!(\"{}, {}\", r1, r2);   |                        -- first borrow later used here  This restriction allows for mutation but in a very controlled fashion. It‚Äôs something that new Rustaceans struggle with, because most languages let you mutate whenever you‚Äôd like.   The benefit of having this restriction is that Rust can prevent data races at compile time. A data race is similar to a race condition and happens when these three behaviors occur:     Two or more pointers access the same data at the same time.   At least one of the pointers is being used to write to the data.   There‚Äôs no mechanism being used to synchronize access to the data.   Data races cause undefined behavior and can be difficult to diagnose and fix when you‚Äôre trying to track them down at runtime; Rust prevents this problem from happening because it won‚Äôt even compile code with data races!   As always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not simultaneous ones:   let mut s = String::from(\"hello\");  {     let r1 = &amp;mut s; } // r1 goes out of scope here, so we can make a new reference with no problems.  let r2 = &amp;mut s;   A similar rule exists for combining mutable and immutable references. This code results in an error:  let mut s = String::from(\"hello\");  let r1 = &amp;s; // no problem let r2 = &amp;s; // no problem let r3 = &amp;mut s; // BIG PROBLEM  println!(\"{}, {}, and {}\", r1, r2, r3);  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable  --&gt; src/main.rs:6:14   | 4 |     let r1 = &amp;s; // no problem   |              -- immutable borrow occurs here 5 |     let r2 = &amp;s; // no problem 6 |     let r3 = &amp;mut s; // BIG PROBLEM   |              ^^^^^^ mutable borrow occurs here 7 | 8 |     println!(\"{}, {}, and {}\", r1, r2, r3);   |                                -- immutable borrow later used here  Whew! We also cannot have a mutable reference while we have an immutable one. Users of an immutable reference don‚Äôt expect the values to suddenly change out from under them! However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else‚Äôs reading of the data.   Note that a reference‚Äôs scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references occurs before the mutable reference is introduced:  let mut s = String::from(\"hello\");  let r1 = &amp;s; // no problem let r2 = &amp;s; // no problem println!(\"{} and {}\", r1, r2); // r1 and r2 are no longer used after this point  let r3 = &amp;mut s; // no problem println!(\"{}\", r3);  The scopes of the immutable references r1 and r2 end after the println! where they are last used, which is before the mutable reference r3 is created. These scopes don‚Äôt overlap, so this code is allowed.   Even though borrowing errors may be frustrating at times, remember that it‚Äôs the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don‚Äôt have to track down why your data isn‚Äôt what you thought it was.   Dangling References  In languages with pointers, it‚Äôs easy to erroneously create a dangling pointer, a pointer that references a location in memory that may have been given to someone else, by freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.   fn main() {     let reference_to_nothing = dangle(); }  fn dangle() -&gt; &amp;String {     let s = String::from(\"hello\");      &amp;s }  error[E0106]: missing lifetime specifier  --&gt; dangle.rs:5:16   | 5 | fn dangle() -&gt; &amp;String {   |                ^^^^^^^   |   = help: this function's return type contains a borrowed value, but there is no     value for it to be borrowed from   = help: consider giving it a 'static lifetime  error: aborting due to previous error  This error message refers to a feature we haven‚Äôt covered yet: lifetimes. We‚Äôll discuss lifetimes in detail in Chapter 10. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:     this function‚Äôs return type contains a borrowed value, but there is no value for it to be borrowed from.    Let‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our dangle code:  fn dangle() -&gt; &amp;String { // dangle returns a reference to a String      let s = String::from(\"hello\"); // s is a new String      &amp;s // we return a reference to the String, s } // Here, s goes out of scope, and is dropped. Its memory goes away.   // Danger!  Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String. That‚Äôs no good! Rust won‚Äôt let us do this.   The solution here is to return the String directly:  fn no_dangle() -&gt; String {     let s = String::from(\"hello\");      s }  This works without any problems. Ownership is moved out, and nothing is deallocated.   The Rules of References  Let‚Äôs recap what we‚Äôve discussed about references:     At any given time, you can have either one mutable reference or any number of immutable references.   References must always be valid.   The Slice Type  Another data type that does not have ownership is the slice. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.   Here‚Äôs a small programming problem: write a function that takes a string and returns the first word it finds in that string. If the function doesn‚Äôt find a space in the string, the whole string must be one word, so the entire string should be returned.   Let‚Äôs think about the signature of this function:  fn first_word(s: &amp;String) -&gt; ?   This function, first_word, has a &amp;String as a parameter. We don‚Äôt want ownership, so this is fine. But what should we return? We don‚Äôt really have a way to talk about part of a string. However, we could return the index of the end of the word. Let‚Äôs try that, as shown in Listing 4-7.  fn main() {     fn first_word(s: &amp;String) -&gt; usize {         let bytes = s.as_bytes();          for (i, &amp;item) in bytes.iter().enumerate() {             if item == b' ' {                 return i;             }         }          s.len()     } }  Listing 4-7: The first_word function that returns a byte index value into the String parameter   Because we need to go through the String element by element and check whether a value is a space, we‚Äôll convert our String to an array of bytes using the as_bytes method:  let bytes = s.as_bytes();  Next, we create an iterator over the array of bytes using the iter method:  for (i, &amp;item) in bytes.iter().enumerate() {  We‚Äôll discuss iterators in more detail in Chapter 13. For now, know that iter is a method that returns each element in a collection and that enumerate wraps the result of iter and returns each element as part of a tuple instead. The first element of the tuple returned from enumerate is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.   Because the enumerate method returns a tuple, we can use patterns to destructure that tuple, just like everywhere else in Rust. So in the for loop, we specify a pattern that has i for the index in the tuple and &amp;item for the single byte in the tuple. Because we get a reference to the element from .iter().enumerate(), we use &amp; in the pattern.   Inside the for loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using s.len():      if item == b' ' {         return i;     } } s.len()  We now have a way to find out the index of the end of the first word in the string, but there‚Äôs a problem. We‚Äôre returning a usize on its own, but it‚Äôs only a meaningful number in the context of the &amp;String. In other words, because it‚Äôs a separate value from the String, there‚Äôs no guarantee that it will still be valid in the future. Consider the program in Listing 4-8 that uses the first_word function from Listing 4-7.  fn main() {     let mut s = String::from(\"hello world\");      let word = first_word(&amp;s); // word will get the value 5      s.clear(); // this empties the String, making it equal to \"\"      // word still has the value 5 here, but there's no more string that     // we could meaningfully use the value 5 with. word is now totally invalid! }  Listing 4-8: Storing the result from calling the first_word function and then changing the String contents   This program compiles without any errors and would also do so if we used word after calling s.clear(). Because word isn‚Äôt connected to the state of s at all, word still contains the value 5. We could use that value 5 with the variable s to try to extract the first word out, but this would be a bug because the contents of s have changed since we saved 5 in word.   Having to worry about the index in word getting out of sync with the data in s is tedious and error prone! Managing these indices is even more brittle if we write a second_word function. Its signature would have to look like this:   fn second_word(s: &amp;String) -&gt; (usize, usize) {  Now we‚Äôre tracking a starting and an ending index, and we have even more values that were calculated from data in a particular state but aren‚Äôt tied to that state at all. We now have three unrelated variables floating around that need to be kept in sync.   Luckily, Rust has a solution to this problem: string slices.   String Slices  A string slice is a reference to part of a String, and it looks like this:  fn main() {     let s = String::from(\"hello world\");      let hello = &amp;s[0..5];     let world = &amp;s[6..11]; }  This is similar to taking a reference to the whole String but with the extra [0..5] bit. Rather than a reference to the entire String, it‚Äôs a reference to a portion of the String.   We can create slices using a range within brackets by specifying [starting_index..ending_index], where starting_index is the first position in the slice and ending_index is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to ending_index minus starting_index. So in the case of let world = &amp;s[6..11];, world would be a slice that contains a pointer to the 7th byte (counting from 1) of s with a length value of 5.   Figure 4-6: String slice referring to part of a String   With Rust‚Äôs .. range syntax, if you want to start at the first index (zero), you can drop the value before the two periods. In other words, these are equal:  let s = String::from(\"hello\");  let slice = &amp;s[0..2]; let slice = &amp;s[..2];  You can also drop both values to take a slice of the entire string. So these are equal:  let s = String::from(\"hello\");  let len = s.len();  let slice = &amp;s[0..len]; let slice = &amp;s[..];   Note: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the ‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù section of Chapter 8.   With all this information in mind, let‚Äôs rewrite first_word to return a slice. The type that signifies ‚Äústring slice‚Äù is written as &amp;str:  fn first_word(s: &amp;String) -&gt; &amp;str {     let bytes = s.as_bytes();      for (i, &amp;item) in bytes.iter().enumerate() {         if item == b' ' {             return &amp;s[0..i];         }     }      &amp;s[..] }  We get the index for the end of the word in the same way as we did in Listing 4-7, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.   Now when we call first_word, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.   Returning a slice would also work for a second_word function:  fn second_word(s: &amp;String) -&gt; &amp;str {  We now have a straightforward API that‚Äôs much harder to mess up, because the compiler will ensure the references into the String remain valid. Remember the bug in the program in Listing 4-8, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn‚Äôt show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of first_word will throw a compile-time error:  fn main() {     let mut s = String::from(\"hello world\");      let word = first_word(&amp;s);      s.clear(); // Error!      println!(\"the first word is: {}\", word); }  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable   --&gt; src/main.rs:18:5    | 16 |     let word = first_word(&amp;s);    |                           -- immutable borrow occurs here 17 | 18 |     s.clear(); // error!    |     ^^^^^^^^^ mutable borrow occurs here 19 | 20 |     println!(\"the first word is: {}\", word);    |                                       ---- immutable borrow later used here  Recall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because clear needs to truncate the String, it needs to get a mutable reference. Rust disallows this, and compilation fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!   String Literals Are Slices  The type of s here is &amp;str: it‚Äôs a slice pointing to that specific point of the binary. This is also why string literals are immutable; &amp;str is an immutable reference.  let s = \"Hello, world!\";   String Slices as Parameters  Knowing that you can take slices of literals and String values leads us to one more improvement on first_word, and that‚Äôs its signature:  fn first_word(s: &amp;String) -&gt; &amp;str {  A more experienced Rustacean would write the signature shown in Listing 4-9 instead because it allows us to use the same function on both &amp;String values and &amp;str values.   fn first_word(s: &amp;str) -&gt; &amp;str {  Listing 4-9: Improving the first_word function by using a string slice for the type of the s parameter   If we have a string slice, we can pass that directly. If we have a String, we can pass a slice of the entire String. Defining a function to take a string slice instead of a reference to a String makes our API more general and useful without losing any functionality:   fn main() {     let my_string = String::from(\"hello world\");      // first_word works on slices of `String`s     let word = first_word(&amp;my_string[..]);      let my_string_literal = \"hello world\";      // first_word works on slices of string literals     let word = first_word(&amp;my_string_literal[..]);      // Because string literals *are* string slices already,     // this works too, without the slice syntax!     let word = first_word(my_string_literal); }   Other Slices  String slices, as you might imagine, are specific to strings. But there‚Äôs a more general slice type, too. Consider this array:   let a = [1, 2, 3, 4, 5];  Just as we might want to refer to a part of a string, we might want to refer to part of an array. We‚Äôd do so like this:   let a = [1, 2, 3, 4, 5];  let slice = &amp;a[1..3];  This slice has the type &amp;[i32]. It works the same way as string slices do, by storing a reference to the first element and a length. You‚Äôll use this kind of slice for all sorts of other collections. We‚Äôll discuss these collections in detail when we talk about vectors in Chapter 8.   Summary  The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don‚Äôt have to write and debug extra code to get this control.   Ownership affects how lots of other parts of Rust work, so we‚Äôll talk about these concepts further throughout the rest of the book. Let‚Äôs move on to Chapter 5 and look at grouping pieces of data together in a struct.  ","categories": ["RUST Language"],
        "tags": ["Ownership","Unique feature","Memory safety"],
        "url": "https://jjungs-lee.github.io//rust%20language/4.Understanding-Ownership/",
        "teaser":null},{
        "title": "RUST : 5. Using structs to structure related data",
        "excerpt":"A struct, or structure, is a custom data type that lets you name and package together multiple related values that make up a meaningful group.   Defining and Instantiating Structs  Structs are similar to tuples, which were discussed in Chapter 3. Like tuples, the pieces of a struct can be different types. Unlike with tuples, you‚Äôll name each piece of data so it‚Äôs clear what the values mean. As a result of these names, structs are more flexible than tuples.   To define a struct, we enter the keyword struct and name the entire struct  struct User {     username: String,     email: String,     sign_in_count: u64,     active: bool, }  Listing 5-1: A User struct definition   To use a struct after we‚Äôve defined it, we create an instance of that struct by specifying concrete values for each of the fields.  We create an instance by stating the name of the struct and then add curly brackets containing key: value pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don‚Äôt have to specify the fields in the same order in which we declared them in the struct.  let user1 = User {     email: String::from(\"someone@example.com\"),     username: String::from(\"someusername123\"),     active: true,     sign_in_count: 1, };  Listing 5-2: Creating an instance of the User struct   To get a specific value from a struct, we can use dot(.) notation. If we wanted just this user‚Äôs email address, we could use user1.email wherever we wanted to use this value. If the instance is mutable, we can change a value by using the dot(.) notation and assigning into a particular field. Listing 5-3 shows how to change the value in the email field of a mutable User instance.  let mut user1 = User {     email: String::from(\"someone@example.com\"),     username: String::from(\"someusername123\"),     active: true,     sign_in_count: 1, };  user1.email = String::from(\"anotheremail@example.com\");  Listing 5-3: Changing the value in the email field of a User instance   Listing 5-4 shows a build_user function that returns a User instance with the given email and username. The active field gets the value of true, and the sign_in_count gets a value of 1.  // JHS) maybe this function similar constructor in C++ fn build_user(email: String, username: String) -&gt; User {     User {         email: email,         username: username,         active: true,         sign_in_count: 1,     } }  Listing 5-4: A build_user function that takes an email and username and returns a User instance   Using the Field Init Shorthand when Variables and Fields Have the Same Name  Because the parameter names and the struct field names are exactly the same in Listing 5-4, we can use the field init shorthand syntax to rewrite build_user so that it behaves exactly the same but doesn‚Äôt have the repetition of email and username, as shown in Listing 5-5.  fn build_user(email: String, username: String) -&gt; User {     User {         email,         username,         active: true,         sign_in_count: 1,     } }  Listing 5-5: A build_user function that uses field init shorthand because the email and username parameters have the same name as struct fields   Creating Instances From Other Instances With Struct Update Syntax  It‚Äôs often useful to create a new instance of a struct that uses most of an old instance‚Äôs values but changes some. You‚Äôll do this using struct update syntax. First, Listing 5-6 shows how we create a new User instance in user2 without the update syntax. We set new values for email and username but otherwise use the same values from user1 that we created in Listing 5-2.  let user2 = User {     email: String::from(\"another@example.com\"),     username: String::from(\"anotherusername567\"),     active: user1.active,     sign_in_count: user1.sign_in_count, };  Listing 5-6: Creating a new User instance using some of the values from user1  Using struct update syntax, we can achieve the same effect with less code, as shown in Listing 5-7. The syntax .. specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance. The code in Listing 5-7 also creates an instance in user2 that has a different value for email and username but has the same values for the active and sign_in_count fields from user1.  let user2 = User {     email: String::from(\"another@example.com\"),     username: String::from(\"anotherusername567\"),     ..user1 };  Listing 5-7: Using struct update syntax to set new email and username values for a User instance but use the rest of the values from the fields of the instance in the user1 variable   Using Tuple Structs without Named Fields to Create Different Types  You can also define structs that look similar to tuples, called tuple structs. Tuple structs have the added meaning the struct name provides but don‚Äôt have names associated with their fields; rather, they just have the types of the fields. Tuple structs are useful when you want to give the whole tuple a name and make the tuple be a different type from other tuples, and naming each field as in a regular struct would be verbose or redundant.   To define a tuple struct, start with the struct keyword and the struct name followed by the types in the tuple.  struct Color(i32, i32, i32); struct Point(i32, i32, i32);  let black = Color(0, 0, 0); let origin = Point(0, 0, 0);  Tuple struct instances behave like tuples: you can destructure them into their individual pieces, you can use a . followed by the index to access an individual value, and so on.   Unit-Like Structs Without Any Fields  You can also define structs that don‚Äôt have any fields! These are called unit-like structs because they behave similarly to (), the unit type. Unit-like structs can be useful in situations in which you need to implement a trait on some type but don‚Äôt have any data that you want to store in the type itself. We‚Äôll discuss traits in Chapter 10.   Ownership of Struct Data  In the User struct definition in Listing 5-1, we used the owned String type rather than the &amp;str string slice type. This is a deliberate choice because we want instances of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.   It‚Äôs possible for structs to store references to data owned by something else, but to do so requires the use of lifetimes, a Rust feature that we‚Äôll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is.  Let‚Äôs say you try to store a reference in a struct without specifying lifetimes, like this, which won‚Äôt work:   In Chapter 10, we‚Äôll discuss how to fix these errors so you can store references in structs, but for now, we‚Äôll fix errors like these using owned types like String instead of references like &amp;str.  // This code does not compile! struct User {     username: &amp;str,     email: &amp;str,     sign_in_count: u64,     active: bool, }  fn main() {     let user1 = User {         email: \"someone@example.com\",         username: \"someusername123\",         active: true,         sign_in_count: 1,     }; }  // The compiler will complain that it needs lifetime specifiers: error[E0106]: missing lifetime specifier --&gt;   | 2 |     username: &amp;str,   |               ^ expected lifetime parameter  error[E0106]: missing lifetime specifier --&gt;   | 3 |     email: &amp;str,   |            ^ expected lifetime parameter   An Example Program Using Structs  Let‚Äôs write a program that calculates the area of a rectangle. We‚Äôll start with single variables, and then refactor the program until we‚Äôre using structs instead.  fn main() {     let length1 = 50;     let width1 = 30;      println!(         \"The area of the rectangle is {} square pixels.\",         area(length1, width1)     ); }  fn area(length: u32, width: u32) -&gt; u32 {     length * width }  Listing 5-8: Calculating the area of a rectangle specified by separate width and height variables  The issue with this code is evident in the signature of area:   Even though Listing 5-8 works and figures out the area of the rectangle by calling the area function with each dimension, we can do better.  fn area(width: u32, height: u32) -&gt; u32 {  The area function is supposed to calculate the area of one rectangle, but the function we wrote has two parameters. The parameters are related, but that‚Äôs not expressed anywhere in our program. It would be more readable and more manageable to group width and height together. We‚Äôve already discussed one way we might do that in ‚ÄúThe Tuple Type‚Äù section of Chapter 3: by using tuples.   Refactoring with Tuples  Listing 5-9 shows another version of our program that uses tuples.  fn main() {     let rect1 = (30, 50);      println!(         \"The area of the rectangle is {} square pixels.\",         area(rect1)     ); }  fn area(dimensions: (u32, u32)) -&gt; u32 {     dimensions.0 * dimensions.1 }  Listing 5-9: Specifying the width and height of the rectangle with a tuple  In one way, this program is better. Tuples let us add a bit of structure, and we‚Äôre now passing just one argument. But in another way, this version is less clear: tuples don‚Äôt name their elements, so our calculation has become more confusing because we have to index into the parts of the tuple.   It doesn‚Äôt matter if we mix up width and height for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that width is the tuple index 0 and height is the tuple index 1. If someone else worked on this code, they would have to figure this out and keep it in mind as well. It would be easy to forget or mix up these values and cause errors, because we haven‚Äôt conveyed the meaning of our data in our code.   Refactoring with Structs: Adding More Meaning  We use structs to add meaning by labeling the data. We can transform the tuple we‚Äôre using into a data type with a name for the whole as well as names for the parts, as shown in Listing 5-10.  struct Rectangle {     width: u32,     height: u32, }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(         \"The area of the rectangle is {} square pixels.\",         area(&amp;rect1)     ); }  fn area(rectangle: &amp;Rectangle) -&gt; u32 {     rectangle.width * rectangle.height }  Listing 5-10: Defining a Rectangle struct  Here we‚Äôve defined a struct and named it Rectangle. Inside the curly brackets, we defined the fields as width and height, both of which have type u32. Then in main, we created a particular instance of Rectangle that has a width of 30 and a height of 50.   Our area function is now defined with one parameter, which we‚Äôve named rectangle, whose type is an immutable borrow of a struct Rectangle instance. As mentioned in Chapter 4, we want to borrow the struct rather than take ownership of it. This way, main retains its ownership and can continue using rect1, which is the reason we use the &amp; in the function signature and where we call the function.   The area function accesses the width and height fields of the Rectangle instance. Our function signature for area now says exactly what we mean: calculate the area of Rectangle, using its width and height fields. This conveys that the width and height are related to each other, and it gives descriptive names to the values rather than using the tuple index values of 0 and 1. This is a win for clarity.   Adding Useful Functionality with Derived Traits  It‚Äôd be nice to be able to print an instance of Rectangle while we‚Äôre debugging our program and see the values for all its fields. Listing 5-11 tries using the println! macro as we have used in previous chapters. This won‚Äôt work, however.  struct Rectangle {     length: u32,     width: u32, }  fn main() {     let rect1 = Rectangle { length: 50, width: 30 };      println!(\"rect1 is {}\", rect1);      // When we compile this code, we get an error with this core message:     // error[E0277]: `Rectangle` doesn't implement `std::fmt::Display` }  Listing 5-11: Attempting to print a Rectangle instance   The println! macro can do many kinds of formatting, and by default, the curly brackets tell println! to use formatting known as Display: output intended for direct end user consumption. The primitive types we‚Äôve seen so far implement Display by default, because there‚Äôs only one way you‚Äôd want to show a 1 or any other primitive type to a user. But with structs, the way println! should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown? Due to this ambiguity, Rust doesn‚Äôt try to guess what we want, and structs don‚Äôt have a provided implementation of Display.  = help: the trait `std::fmt::Display` is not implemented for `Rectangle` = note: in format strings you may be able to use `{:?}`          (or {:#?} for pretty-print) instead  Let‚Äôs try it! The println! macro call will now look like println!(\"rect1 is {:?}\", rect1);. Putting the specifier :? inside the curly brackets tells println! we want to use an output format called Debug. The Debug trait enables us to print our struct in a way that is useful for developers so we can see its value while we‚Äôre debugging our code.   Compile the code with this change. Drat! We still get an error:  error[E0277]: `Rectangle` doesn't implement `std::fmt::Debug`  But again, the compiler gives us a helpful note:  = help: the trait `std::fmt::Debug` is not implemented for `Rectangle` = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`  Rust does include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation #[derive(Debug)] just before the struct definition, as shown in Listing 5-12.  #[derive(Debug)] struct Rectangle {     width: u32,     height: u32, }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(\"rect1 is {:?}\", rect1); }  Listing 5-12: Adding the annotation to derive the Debug trait and printing the Rectangle instance using debug formatting  Now when we run the program, we won‚Äôt get any errors, and we‚Äôll see the following output:  rect1 is Rectangle { width: 30, height: 50 }   Nice! It‚Äôs not the prettiest output, but it shows the values of all the fields for this instance, which would definitely help during debugging. When we have larger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; in those cases, we can use {:#?}** instead of {:?} in the println! string. When we use the {:#?} style in the example, the output will look like this:  rect1 is Rectangle {     width: 30,     height: 50 }  Rust has provided a number of traits for us to use with the derive annotation that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We‚Äôll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10.   Our area function is very specific: it only computes the area of rectangles. It would be helpful to tie this behavior more closely to our Rectangle struct, because it won‚Äôt work with any other type. Let‚Äôs look at how we can continue to refactor this code by turning the area function into an area method defined on our Rectangle type.   Method Syntax  Methods are similar to functions: they‚Äôre declared with the fn keyword and their name, they can have parameters and a return value, and they contain some code that is run when they‚Äôre called from somewhere else. However, methods are different from functions in that they‚Äôre defined within the context of a struct (or an enum or a trait object, which we cover in Chapters 6 and 17, respectively), and their first parameter is always self, which represents the instance of the struct the method is being called on.   Defining Methods  Let‚Äôs change the area function that has a Rectangle instance as a parameter and instead make an area method defined on the Rectangle struct, as shown in Listing 5-13.  #[derive(Debug)] struct Rectangle {     width: u32,     height: u32, }  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     } }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(         \"The area of the rectangle is {} square pixels.\",         rect1.area()     ); }  Listing 5-13: Defining an area method on the Rectangle struct  To define the function within the context of Rectangle, we start an impl (implementation) block. Then we move the area function within the impl curly brackets and change the first (and in this case, only) parameter to be self in the signature and everywhere within the body. In main, where we called the area function and passed rect1 as an argument, we can instead use method syntax to call the area method on our Rectangle instance. The method syntax goes after an instance: we add a dot(.) followed by the method name, parentheses, and any arguments.   In the signature for area, we use &amp;self instead of rectangle: &amp;Rectangle because Rust knows the type of self is Rectangle due to this method‚Äôs being inside the impl Rectangle context. Note that we still need to use the &amp; before self, just as we did in &amp;Rectangle. Methods can take ownership of self, borrow self immutably as we‚Äôve done here, or borrow self mutably, just as they can any other parameter.   We‚Äôve chosen &amp;self here for the same reason we used &amp;Rectangle in the function version: we don‚Äôt want to take ownership, and we just want to read the data in the struct, not write to it. If we wanted to change the instance that we‚Äôve called the method on as part of what the method does, we‚Äôd use &amp;mut self as the first parameter. Having a method that takes ownership of the instance by using just self as the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.   The main benefit of using methods instead of functions, in addition to using method syntax and not having to repeat the type of self in every method‚Äôs signature, is for organization. We‚Äôve put all the things we can do with an instance of a type in one impl block rather than making future users of our code search for capabilities of Rectangle in various places in the library we provide.   Where‚Äôs the -&gt; Operator?   In C and C++, two different operators are used for calling methods: you use . if you‚Äôre calling a method on the object directly and -&gt; if you‚Äôre calling the method on a pointer to the object and need to dereference the pointer first. In other words, if object is a pointer, object-&gt;something() is similar to (*object).something().   Rust doesn‚Äôt have an equivalent to the -&gt; operator; instead, Rust has a feature called automatic referencing and dereferencing. Calling methods is one of the few places in Rust that has this behavior.   Here‚Äôs how it works: when you call a method with object.something(), Rust automatically adds in &amp;, &amp;mut, or * so object matches the signature of the method. In other words, the following are the same:   p1.distance(&amp;p2);  (&amp;p1).distance(&amp;p2);  The first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver‚Äîthe type of self. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (&amp;self), mutating (&amp;mut self), or consuming (self). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.   Methods with More Parameters  Let‚Äôs practice using methods by implementing a second method on the Rectangle struct. This time, we want an instance of Rectangle to take another instance of Rectangle and return true if the second Rectangle can fit completely within self; otherwise it should return false. That is, we want to be able to write the program shown in Listing 5-14, once we‚Äôve defined the can_hold method.  fn main() {     let rect1 = Rectangle { length: 50, width: 30 };     let rect2 = Rectangle { length: 40, width: 10 };     let rect3 = Rectangle { length: 45, width: 60 };      println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&amp;rect2));     println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&amp;rect3)); }  Listing 5-14: Using the as-yet-unwritten can_hold method  And the expected output would look like the following, because both dimensions of rect2 are smaller than the dimensions of rect1 but rect3 is wider than rect1:  Can rect1 hold rect2? true Can rect1 hold rect3? false  We know we want to define a method, so it will be within the impl Rectangle block. The method name will be can_hold, and it will take an immutable borrow of another Rectangle as a parameter. We can tell what the type of the parameter will be by looking at the code that calls the method: rect1.can_hold(&amp;rect2) passes in &amp;rect2, which is an immutable borrow to rect2, an instance of Rectangle. This makes sense because we only need to read rect2 (rather than write, which would mean we‚Äôd need a mutable borrow), and we want main to retain ownership of rect2 so we can use it again after calling the can_hold method. The return value of can_hold will be a Boolean, and the implementation will check whether the width and height of self are both greater than the width and height of the other Rectangle, respectively. Let‚Äôs add the new can_hold method to the impl block from Listing 5-13, shown in Listing 5-15.  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     }      fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &gt; other.width &amp;&amp; self.height &gt; other.height     } }  Listing 5-15: Implementing the can_hold method on Rectangle that takes another Rectangle instance as a parameter   Associated Functions  Another useful feature of impl blocks is that we‚Äôre allowed to define functions within impl blocks that don‚Äôt take self as a parameter. These are called associated functions because they‚Äôre associated with the struct. They‚Äôre still functions, not methods, because they don‚Äôt have an instance of the struct to work with. You‚Äôve already used the String::from associated function.   Associated functions are often used for constructors that will return a new instance of the struct.  impl Rectangle {     fn square(size: u32) -&gt; Rectangle {         Rectangle { length: size, width: size }     } }  To call this associated function, we use the :: syntax with the struct name; let sq = Rectangle::square(3); is an example. This function is namespaced by the struct: the :: syntax is used for both associated functions and namespaces created by modules. We‚Äôll discuss modules in Chapter 7.   Multiple impl Blocks  Each struct is allowed to have multiple impl blocks. For example, Listing 5-15 is equivalent to the code shown in Listing 5-16, which has each method in its own impl block.  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     } }  impl Rectangle {     fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &gt; other.width &amp;&amp; self.height &gt; other.height     } }  Listing 5-16: Rewriting Listing 5-15 using multiple impl blocks  There‚Äôs no reason to separate these methods into multiple impl blocks here, but this is valid syntax. We‚Äôll see a case in which multiple impl blocks are useful in Chapter 10, where we discuss generic types and traits.   Summary  Structs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. Methods let you specify the behavior that instances of your structs have, and associated functions let you namespace functionality that is particular to your struct without having an instance available.   But structs aren‚Äôt the only way you can create custom types: let‚Äôs turn to Rust‚Äôs enum feature to add another tool to your toolbox.  ","categories": ["RUST Language"],
        "tags": ["Structure","Struct"],
        "url": "https://jjungs-lee.github.io//rust%20language/5.Using-Structs-to-Structure-Related-Data/",
        "teaser":null},{
        "title": "RUST : 6. Enums and Pattern Matching",
        "excerpt":"Enums allow you to define a type by enumerating its possible variants.  Next, we‚Äôll explore a particularly useful enum, called Option, which expresses that a value can be either something or nothing.  Then we‚Äôll look at how pattern matching in the match expression makes it easy to run different code for different values of an enum.  Finally, we‚Äôll cover how the if let construct is another convenient and concise idiom available to you to handle enums in your code.   Rust‚Äôs enums are most similar to algebraic data types in functional languages, such as F#, OCaml, and Haskell.   Defining an Enum  Let‚Äôs look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case.  Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. we can enumerate all possible variants, which is where enumeration gets its name.   enum IpAddrKind {     V4,     V6, }  Enum Values  We can create instances of each of the two variants of IpAddrKind like this:  let four = IpAddrKind::V4; let six = IpAddrKind::V6;  Note that the variants of the enum are namespaced under its identifier, and we use a double colon to separate the two.  The reason this is useful is that now both values IpAddrKind::V4 and IpAddrKind::V6 are of the same type: IpAddrKind. We can then, for instance, define a function that takes any IpAddrKind:  fn route(ip_kind: IpAddrKind) { }  And we can call this function with either variant:  route(IpAddrKind::V4); route(IpAddrKind::V6);  Using enums has even more advantages. Thinking more about our IP address type, at the moment we don‚Äôt have a way to store the actual IP address data; we only know what kind it is. Given that you just learned about structs in Chapter 5, you might tackle this problem as shown in Listing 6-1.  enum IpAddrKind {     V4,     V6, }  struct IpAddr {     kind: IpAddrKind,     address: String, }  let home = IpAddr {     kind: IpAddrKind::V4,     address: String::from(\"127.0.0.1\"), };  let loopback = IpAddr {     kind: IpAddrKind::V6,     address: String::from(\"::1\"), };  Listing 6-1: Storing the data and IpAddrKind variant of an IP address using a struct  Here, we‚Äôve defined a struct IpAddr that has two fields: a kind field that is of type IpAddrKind (the enum we defined previously) and an address field of type String. We have two instances of this struct. The first, home, has the value IpAddrKind::V4 as its kind with associated address data of 127.0.0.1. The second instance, loopback, has the other variant of IpAddrKind as its kind value, V6, and has address ::1 associated with it. We‚Äôve used a struct to bundle the kind and address values together, so now the variant is associated with the value.   We can represent the same concept in a more concise way using just an enum, rather than an enum inside a struct, by putting data directly into each enum variant. This new definition of the IpAddr enum says that both V4 and V6 variants will have associated String values:  enum IpAddr {     V4(String),     V6(String), }  let home = IpAddr::V4(String::from(\"127.0.0.1\"));  let loopback = IpAddr::V6(String::from(\"::1\"));  We attach data to each variant of the enum directly, so there is no need for an extra struct.   There‚Äôs another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four type IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store V4 addresses as four u8 values but still express V6 addresses as one String value, we wouldn‚Äôt be able to with a struct. Enums handle this case with ease:  enum IpAddr {     V4(u8, u8, u8, u8),     V6(String), }  let home = IpAddr::V4(127, 0, 0, 1);  let loopback = IpAddr::V6(String::from(\"::1\"));  We‚Äôve shown several different ways to define data structures to store version four and version six IP addresses. However, as it turns out, wanting to store IP addresses and encode which kind they are is so common that the standard library has a definition we can use! It has the exact enum and variants that we‚Äôve defined and used, but it embeds the address data inside the variants in the form of two different structs, which are defined differently for each variant:  struct Ipv4Addr {     // --snip-- }  struct Ipv6Addr {     // --snip-- }  enum IpAddr {     V4(Ipv4Addr),     V6(Ipv6Addr), }  This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example.You can even include another enum!   Note that even though the standard library contains a definition for IpAddr, we can still create and use our own definition without conflict because we haven‚Äôt brought the standard library‚Äôs definition into our scope. We‚Äôll talk more about bringing types into scope in Chapter 7.   Let‚Äôs look at another example of an enum in Listing 6-2: this one has a wide variety of types embedded in its variants.  enum Message {     Quit,     Move { x: i32, y: i32 },     Write(String),     ChangeColor(i32, i32, i32), }  Listing 6-2: A Message enum whose variants each store different amounts and types of values  This enum has four variants with different types:      Quit has no data associated with it at all.   Move includes an anonymous struct inside it.   Write includes a single String.   ChangeColor includes three i32 values.   Defining an enum with variants such as the ones in Listing 6-2 is similar to defining different kinds of struct definitions, except the enum doesn‚Äôt use the struct keyword and all the variants are grouped together under the Message type. The following structs could hold the same data that the preceding enum variants hold:  struct QuitMessage; // unit struct struct MoveMessage {     x: i32,     y: i32, } struct WriteMessage(String); // tuple struct struct ChangeColorMessage(i32, i32, i32); // tuple struct  But if we used the different structs, which each have their own type, we couldn‚Äôt as easily define a function to take any of these kinds of messages as we could with the Message enum defined in Listing 6-2, which is a single type.   There is one more similarity between enums and structs: just as we‚Äôre able to define methods on structs using impl, we‚Äôre also able to define methods on enums.  Here‚Äôs a method named call that we could define on our Message enum:  impl Message {     fn call(&amp;self) {         // method body would be defined here     } }  let m = Message::Write(String::from(\"hello\")); m.call();  The body of the method would use self to get the value that we called the method on. In this example, we‚Äôve created a variable m that has the value Message::Write(String::from(\"hello\")), and that is what self will be in the body of the call method when m.call() runs.   The Option Enum and Its Advantages Over Null Values  This section explores a case study of Option, which is another enum defined by the standard library.  The Option type is used in many places because it encodes the very common scenario in which a value could be something or it could be nothing.  Expressing this concept in terms of the type system means the compiler can check whether you‚Äôve handled all the cases you should be handling;  this functionality can prevent bugs that are extremely common in other programming languages.   Programming language design is often thought of in terms of which features you include, but the features you exclude are important too.  Rust doesn‚Äôt have the null feature that many other languages have.  Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.   In his 2009 presentation ‚ÄúNull References: The Billion Dollar Mistake,‚Äù Tony Hoare, the inventor of null, has this to say:   I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn‚Äôt resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.   The problem with null values is that if you try to use a null value as a not-null value, you‚Äôll get an error of some kind. Because this null or not-null property is pervasive, it‚Äôs extremely easy to make this kind of error.   However, the concept that null is trying to express is still a useful one: a null is a value that is currently invalid or absent for some reason.   The problem isn‚Äôt really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is Option&lt;T&gt;, and it is defined by the standard library as follows:  enum Option&lt;T&gt; {     Some(T),     None, }  The Option enum is so useful that it‚Äôs even included in the prelude; you don‚Äôt need to bring it into scope explicitly.  In addition, so are its variants: you can use `Some` and `None` directly without the `Option::` prefix. The `Option` enum is still just a regular enum, and `Some(T)` and `None` are still variants of type `Option`.   The &lt;T&gt; syntax is a feature of Rust we haven‚Äôt talked about yet. It‚Äôs a generic type parameter, and we‚Äôll cover generics in more detail in Chapter 10.  For now, all you need to know is that &lt;T&gt; means the Some variant of the Option enum can hold one piece of data of any type.  Here are some examples of using Option values to hold number types and string types:  let some_number = Some(5); let some_string = Some(\"a string\");  let absent_number: Option&lt;i32&gt; = None;  If we use None rather than Some, we need to tell Rust what type of Option&lt;T&gt; we have, because the compiler can‚Äôt infer the type that the Some variant will hold by looking only at a None value.   When we have a Some value, we know that a value is present and the value is held within the Some. When we have a None value, in some sense, it means the same thing as null: we don‚Äôt have a valid value. So why is having Option&lt;T&gt; any better than having null?   In short, because Option&lt;T&gt; and T (where T can be any type) are different types, the compiler won‚Äôt let us use an Option&lt;T&gt; value as if it were definitely a valid value. For example, this code won‚Äôt compile because it‚Äôs trying to add an i8 to an Option&lt;i8&gt;:  let x: i8 = 5; let y: Option&lt;i8&gt; = Some(5);  let sum = x + y;  If we run this code, we get an error message like this:  error[E0277]: the trait bound `i8: std::ops::Add&lt;std::option::Option&lt;i8&gt;&gt;` is not satisfied  --&gt;   | 5 |     let sum = x + y;   |                 ^ no implementation for `i8 + std::option::Option&lt;i8&gt;`   |  Intense! In effect, this error message means that Rust doesn‚Äôt understand how to add an i8 and an Option&lt;i8&gt;, because they‚Äôre different types. When we have a value of a type like i8 in Rust, the compiler will ensure that we always have a valid value. We can proceed confidently without having to check for null before using that value. Only when we have an Option&lt;i8&gt; (or whatever type of value we‚Äôre working with) do we have to worry about possibly not having a value, and the compiler will make sure we handle that case before using the value.   In other words, you have to convert an Option&lt;T&gt; to a T before you can perform T operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn‚Äôt null when it actually is.   Not having to worry about incorrectly assuming a not-null value helps you to be more confident in your code. In order to have a value that can possibly be null, you must explicitly opt in by making the type of that value Option&lt;T&gt;. Then, when you use that value, you are required to explicitly handle the case when the value is null. Everywhere that a value has a type that isn‚Äôt an Option&lt;T&gt;, you can safely assume that the value isn‚Äôt null. This was a deliberate design decision for Rust to limit null‚Äôs pervasiveness and increase the safety of Rust code.   So, how do you get the T value out of a Some variant when you have a value of type Option&lt;T&gt; so you can use that value? The Option&lt;T&gt; enum has a large number of methods that are useful in a variety of situations; you can check them out in its documentation. Becoming familiar with the methods on Option will be extremely useful in your journey with Rust.   In general, in order to use an Option&lt;T&gt; value, you want to have code that will handle each variant. You want some code that will run only when you have a Some(T) value, and this code is allowed to use the inner T. You want some other code to run if you have a None value, and that code doesn‚Äôt have a T value available. The match expression is a control flow construct that does just this when used with enums: it will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value.   The match Control Flow Operator  Rust has an extremely powerful control flow operator called match that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; Chapter 18 covers all the different kinds of patterns and what they do. The power of match comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.   Think of a match expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a match, and at the first pattern the value ‚Äúfits,‚Äù the value falls into the associated code block to be used during execution.   Because we just mentioned coins, let‚Äôs use them as an example using match! We can write a function that can take an unknown United States coin and, in a similar way as the counting machine, determine which coin it is and return its value in cents, as shown here in Listing 6-3.  enum Coin {     Penny,     Nickel,     Dime,     Quarter, }  fn value_in_cents(coin: Coin) -&gt; u8 {     // JHS) similar to 'case' in C/C++     match coin {         Coin::Penny =&gt; 1,         Coin::Nickel =&gt; 5,         Coin::Dime =&gt; 10,         Coin::Quarter =&gt; 25,     }  Listing 6-3: An enum and a match expression that has the variants of the enum as its patterns   Let‚Äôs break down the match in the value_in_cents function. First, we list the match keyword followed by an expression, which in this case is the value coin. This seems very similar to an expression used with if, but there‚Äôs a big difference: with if, the expression needs to return a Boolean value, but here, it can be any type. The type of coin in this example is the Coin enum that we defined on line 1.   Next are the match arms. An arm has two parts: a pattern and some code. The first arm here has a pattern that is the value Coin::Penny and then the =&gt; operator that separates the pattern and the code to run. The code in this case is just the value 1. Each arm is separated from the next with a comma(,).   When the match expression executes, it compares the resulting value against the pattern of each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If that pattern doesn‚Äôt match the value, execution continues to the next arm, much as in a coin-sorting machine. We can have as many arms as we need: in Listing 6-3, our match has four arms.   The code associated with each arm is an expression, and the resulting value of the expression in the matching arm is the value that gets returned for the entire match expression.   Curly brackets typically aren‚Äôt used if the match arm code is short, as it is in Listing 6-3 where each arm just returns a value. If you want to run multiple lines of code in a match arm, you can use curly brackets. For example, the following code would print ‚ÄúLucky penny!‚Äù every time the method was called with a Coin::Penny but would still return the last value of the block, 1:   Patterns that Bind to Values  Another useful feature of match arms is that they can bind to the parts of the values that match the pattern. This is how we can extract values out of enum variants.   As an example, let‚Äôs change one of our enum variants to hold data inside it. From 1999 through 2008, the United States minted quarters with different designs for each of the 50 states on one side. No other coins got state designs, so only quarters have this extra value. We can add this information to our enum by changing the Quarter variant to include a UsState value stored inside it, which we‚Äôve done here in Listing 6-4.  #[derive(Debug)] // so we can inspect the state in a minute enum UsState {     Alabama,     Alaska,     // --snip-- }  enum Coin {     Penny,     Nickel,     Dime,     Quarter(UsState), }  Listing 6-4: A Coin enum in which the Quarter variant also holds a UsState value  Let‚Äôs imagine that a friend of ours is trying to collect all 50 state quarters. While we sort our loose change by coin type, we‚Äôll also call out the name of the state associated with each quarter so if it‚Äôs one our friend doesn‚Äôt have, they can add it to their collection.   In the match expression for this code, we add a variable called state to the pattern that matches values of the variant Coin::Quarter. When a Coin::Quarter matches, the state variable will bind to the value of that quarter‚Äôs state. Then we can use state in the code for that arm, like so:  fn value_in_cents(coin: Coin) -&gt; u8 {     match coin {         Coin::Penny =&gt; 1,         Coin::Nickel =&gt; 5,         Coin::Dime =&gt; 10,         Coin::Quarter(state) =&gt; {             println!(\"State quarter from {:?}!\", state);             25         },     } }  If we were to call value_in_cents(Coin::Quarter(UsState::Alaska)), coin would be Coin::Quarter(UsState::Alaska). When we compare that value with each of the match arms, none of them match until we reach Coin::Quarter(state). At that point, the binding for state will be the value UsState::Alaska. We can then use that binding in the println! expression, thus getting the inner state value out of the Coin enum variant for Quarter.   Matching with Option&lt;T&gt;  In the previous section, we wanted to get the inner T value out of the Some case when using Option&lt;T&gt;; we can also handle Option&lt;T&gt; using match as we did with the Coin enum! Instead of comparing coins, we‚Äôll compare the variants of Option&lt;T&gt;, but the way that the match expression works remains the same.   Let‚Äôs say we want to write a function that takes an Option&lt;i32&gt; and, if there‚Äôs a value inside, adds 1 to that value. If there isn‚Äôt a value inside, the function should return the None value and not attempt to perform any operations.   This function is very easy to write, thanks to match, and will look like Listing 6-5.  fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {     match x {         None =&gt; None,         Some(i) =&gt; Some(i + 1),     } }  let five = Some(5); let six = plus_one(five); let none = plus_one(None);  Listing 6-5: A function that uses a match expression on an Option   Let‚Äôs examine the first execution of plus_one in more detail. When we call plus_one(five), the variable x in the body of plus_one will have the value Some(5). We then compare that against each match arm.  None =&gt; None,  The Some(5) value doesn‚Äôt match the pattern None, so we continue to the next arm.  Some(i) =&gt; Some(i + 1),  Does Some(5) match Some(i)? Why yes it does! We have the same variant. The i binds to the value contained in Some, so i takes the value 5. The code in the match arm is then executed, so we add 1 to the value of i and create a new Some value with our total 6 inside.   Now let‚Äôs consider the second call of plus_one in Listing 6-5, where x is None. We enter the match and compare to the first arm.  None =&gt; None,  It matches! There‚Äôs no value to add to, so the program stops and returns the None value on the right side of =&gt;. Because the first arm matched, no other arms are compared.   Combining match and enums is useful in many situations. You‚Äôll see this pattern a lot in Rust code: match against an enum, bind a variable to the data inside, and then execute code based on it. It‚Äôs a bit tricky at first, but once you get used to it, you‚Äôll wish you had it in all languages. It‚Äôs consistently a user favorite.   Matches Are Exhaustive  There‚Äôs one other aspect of match we need to discuss. Consider this version of our plus_one function that has a bug and won‚Äôt compile:  fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {     match x {         Some(i) =&gt; Some(i + 1),     } }  We didn‚Äôt handle the None case, so this code will cause a bug. Luckily, it‚Äôs a bug Rust knows how to catch. If we try to compile this code, we‚Äôll get this error:  error[E0004]: non-exhaustive patterns: `None` not covered  --&gt;   | 6 |         match x {   |               ^ pattern `None` not covered  Rust knows that we didn‚Äôt cover every possible case and even knows which pattern we forgot! Matches in Rust are exhaustive: we must exhaust every last possibility in order for the code to be valid. Especially in the case of Option&lt;T&gt;, when Rust prevents us from forgetting to explicitly handle the None case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier.   The _ Placeholder  Rust also has a pattern we can use when we don‚Äôt want to list all possible values.  For example, a u8 can have valid values of 0 through 255. If we only care about the values 1, 3, 5, and 7, we don‚Äôt want to have to list out 0, 2, 4, 6, 8, 9 all the way up to 255. Fortunately, we don‚Äôt have to: we can use the special pattern _ instead:  let some_u8_value = 0u8; match some_u8_value {     1 =&gt; println!(\"one\"),     3 =&gt; println!(\"three\"),     5 =&gt; println!(\"five\"),     7 =&gt; println!(\"seven\"),     _ =&gt; (), }  The _ pattern will match any value. By putting it after our other arms, the _ will match all the possible cases that aren‚Äôt specified before it. The () is just the unit value, so nothing will happen in the _ case. As a result, we can say that we want to do nothing for all the possible values that we don‚Äôt list before the _ placeholder.   However, the match expression can be a bit wordy in a situation in which we care about only one of the cases. For this situation, Rust provides if let.   Concise Control Flow with if let  The if let syntax lets you combine if and let into a less verbose way to handle values that match one pattern while ignoring the rest.  Consider the program in Listing 6-6 that matches on an Option&lt;u8&gt; value but only wants to execute code if the value is 3.  let some_u8_value = Some(0u8); match some_u8_value {     Some(3) =&gt; println!(\"three\"),     _ =&gt; (), }  Listing 6-6: A match that only cares about executing code when the value is Some(3)  We want to do something with the Some(3) match but do nothing with any other Some&lt;u8&gt; value or the None value.  To satisfy the match expression, we have to add _ =&gt; () after processing just one variant, which is a lot of boilerplate code to add.   Instead, we could write this in a shorter way using if let. The following code behaves the same as the match in Listing 6-6:  if let Some(3) = some_u8_value {     println!(\"three\"); }  The syntax if let takes a pattern and an expression separated by an equal(=) sign. It works the same way as a match, where the expression is given to the match and the pattern is its first arm.   Using if let means less typing, less indentation, and less boilerplate code. However, you lose the exhaustive checking that match enforces. Choosing between match and if let depends on what you‚Äôre doing in your particular situation and whether gaining conciseness is an appropriate trade-off for losing exhaustive checking.   In other words, you can think of if let as syntax sugar for a match that runs code when the value matches one pattern and then ignores all other values.   We can include an else with an if let. The block of code that goes with the else is the same as the block of code that would go with the _ case in the match expression that is equivalent to the if let and else. Recall the Coin enum definition in Listing 6-4, where the Quarter variant also held a UsState value. If we wanted to count all non-quarter coins we see while also announcing the state of the quarters, we could do that with a match expression like this:  let mut count = 0; match coin {     Coin::Quarter(state) =&gt; println!(\"State quarter from {:?}!\", state),     _ =&gt; count += 1, }  Or we could use an if let and else expression like this:  let mut count = 0; if let Coin::Quarter(state) = coin {     println!(\"State quarter from {:?}!\", state); } else {     count += 1; }  If you have a situation in which your program has logic that is too verbose to express using a match, remember that if let is in your Rust toolbox as well.   Summary  We‚Äôve now covered how to use enums to create custom types that can be one of a set of enumerated values. We‚Äôve shown how the standard library‚Äôs Option&lt;T&gt; type helps you use the type system to prevent errors. When enum values have data inside them, you can use match or if let to extract and use those values, depending on how many cases you need to handle.   Your Rust programs can now express concepts in your domain using structs and enums. Creating custom types to use in your API ensures type safety: the compiler will make certain your functions get only values of the type each function expects.   In order to provide a well-organized API to your users that is straightforward to use and only exposes exactly what your users will need, let‚Äôs now turn to Rust‚Äôs modules.  ","categories": ["RUST Language"],
        "tags": ["Enum","Enumerations","Pattern","Matching","Pattern Matching"],
        "url": "https://jjungs-lee.github.io//rust%20language/6.Enums-and-Pattern-Matching/",
        "teaser":null},{
        "title": "RUST : 7. Managing Growing Projects with Packages, Crates, and Modules",
        "excerpt":"As you write large programs, organizing your code will be important because keeping track of your entire program in your head will become impossible. By grouping related functionality and separating code with distinct features, you‚Äôll clarify where to find code that implements a particular feature and where to go to change how a feature works.   Packages and Crates  The first parts of the module system we‚Äôll cover are packages and crates. A crate is a binary or library. The crate root is a source file that the Rust compiler starts from and makes up the root module of your crate (we‚Äôll explain modules in depth in the ‚ÄúDefining Modules to Control Scope and Privacy‚Äù) section. A package is one or more crates that provide a set of functionality. A package contains a Cargo.toml file that describes how to build those crates.   Several rules determine what a package can contain. A package must contain zero or one library crates, and no more. It can contain as many binary crates as you‚Äôd like, but it must contain at least one crate (either library or binary).   Let‚Äôs walk through what happens when we create a package. First, we enter the command cargo new:  $ cargo new my-project      Created binary (application) `my-project` package $ ls my-project Cargo.toml src $ ls my-project/src main.rs   When we entered the command, Cargo created a Cargo.toml file, giving us a package. Looking at the contents of Cargo.toml, there‚Äôs no mention of src/main.rs because Cargo follows a convention that src/main.rs is the crate root of a binary crate with the same name as the package. Likewise, Cargo knows that if the package directory contains src/lib.rs, the package contains a library crate with the same name as the package, and src/lib.rs is its crate root. Cargo passes the crate root files to rustc to build the library or binary.   Here, we have a package that only contains src/main.rs, meaning it only contains a binary crate named my-project. If a package contains src/main.rs and src/lib.rs, it has two crates: a library and a binary, both with the same name as the package. A package can have multiple binary crates by placing files in the src/bin directory: each file will be a separate binary crate.   A crate will group related functionality together in a scope so the functionality is easy to share between multiple projects. For example, the rand crate we used in Chapter 2 provides functionality that generates random numbers. We can use that functionality in our own projects by bringing the rand crate into our project‚Äôs scope. All the functionality provided by the rand crate is accessible through the crate‚Äôs name, rand.   Keeping a crate‚Äôs functionality in its own scope clarifies whether particular functionality is defined in our crate or the rand crate and prevents potential conflicts. For example, the rand crate provides a trait named Rng. We can also define a struct named Rng in our own crate. Because a crate‚Äôs functionality is namespaced in its own scope, when we add rand as a dependency, the compiler isn‚Äôt confused about what the name Rng refers to. In our crate, it refers to the struct Rng that we defined. We would access the Rng trait from the rand crate as rand::Rng.   Defining Modules to Control Scope and Privacy  In this section, we‚Äôll talk about modules and other parts of the module system, namely paths that allow you to name items; the use keyword that brings a path into scope; and the pub keyword to make items public. We‚Äôll also discuss the as keyword, external packages, and the glob operator. For now, let‚Äôs focus on modules!   Modules let us organize code within a crate into groups for readability and easy reuse. Modules also control the privacy of items, which is whether an item can be used by outside code (public) or is an internal implementation detail and not available for outside use (private).   As an example, let‚Äôs write a library crate that provides the functionality of a restaurant. We‚Äôll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code, rather than actually implement a restaurant in code.   In the restaurant industry, some parts of a restaurant are referred to as front of house and others as back of house. Front of house is where customers are; this is where hosts seat customers, servers take orders and payment, and bartenders make drinks. Back of house is where the chefs and cooks work in the kitchen, dishwashers clean up, and managers do administrative work.   To structure our crate in the same way that a real restaurant works, we can organize the functions into nested modules. Create a new library named restaurant by running cargo new --lib restaurant; then put the code in Listing 7-1 into src/lib.rs to define some modules and function signatures.  // Filename: src/lib.rs mod front_of_house {     mod hosting {         fn add_to_waitlist() {}         fn seat_at_table() {}     }      mod serving {         fn take_order() {}         fn serve_order() {}         fn take_payment() {}     } }  Listing 7-1: A front_of_house module containing other modules that then contain functions   We define a module by starting with the mod keyword and then specify the name of the module (in this case, front_of_house) and place curly brackets around the body of the module. Inside modules, we can have other modules, as in this case with the modules hosting and serving. Modules can also hold definitions for other items, such as structs, enums, constants, traits, or‚Äîas in Listing 7-1‚Äîfunctions.   By using modules, we can group related definitions together and name why they‚Äôre related. Programmers using this code would have an easier time finding the definitions they wanted to use because they could navigate the code based on the groups rather than having to read through all the definitions. Programmers adding new functionality to this code would know where to place the code to keep the program organized.   Earlier, we mentioned that src/main.rs and src/lib.rs are called crate roots. The reason for their name is that the contents of either of these two files form a module named crate at the root of the crate‚Äôs module structure, known as the module tree.   Listing 7-2 shows the module tree for the structure in Listing 7-1.  crate  ‚îî‚îÄ‚îÄ front_of_house      ‚îú‚îÄ‚îÄ hosting      ‚îÇ   ‚îú‚îÄ‚îÄ add_to_waitlist      ‚îÇ   ‚îî‚îÄ‚îÄ seat_at_table      ‚îî‚îÄ‚îÄ serving          ‚îú‚îÄ‚îÄ take_order          ‚îú‚îÄ‚îÄ serve_order          ‚îî‚îÄ‚îÄ take_payment  Listing 7-2: The module tree for the code in Listing 7-1  This tree shows how some of the modules nest inside one another (for example, hosting nests inside front_of_house). The tree also shows that some modules are siblings to each other, meaning they‚Äôre defined in the same module (hosting and serving are defined within front_of_house). To continue the family metaphor, if module A is contained inside module B, we say that module A is the child of module B and that module B is the parent of module A. Notice that the entire module tree is rooted under the implicit module named crate.   The module tree might remind you of the filesystem‚Äôs directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.   Paths for Referring to an Item in the Module Tree  To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. If we want to call a function, we need to know its path.   A path can take two forms:     An absolute path starts from a crate root by using a crate name or a literal crate.   A relative path starts from the current module and uses self, super, or an identifier in the current module.   Both absolute and relative paths are followed by one or more identifiers separated by double colons (::).   Let‚Äôs return to the example in Listing 7-1. How do we call the add_to_waitlist function? This is the same as asking, what‚Äôs the path of the add_to_waitlist function? In Listing 7-3, we simplified our code a bit by removing some of the modules and functions. We‚Äôll show two ways to call the add_to_waitlist function from a new function eat_at_restaurant defined in the crate root. The eat_at_restaurant function is part of our library crate‚Äôs public API, so we mark it with the pub keyword. In the ‚ÄùExposing Paths with the pub Keyword‚Äù section, we‚Äôll go into more detail about pub. Note that this example won‚Äôt compile just yet; we‚Äôll explain why in a bit.   mod front_of_house {     mod hosting {         fn add_to_waitlist() {}     } }  pub fn eat_at_restaurant() {     // Absolute path     crate::front_of_house::hosting::add_to_waitlist();      // Relative path     front_of_house::hosting::add_to_waitlist(); }  Listing 7-3: Calling the add_to_waitlist function using absolute and relative paths   The first time we call the add_to_waitlist function in eat_at_restaurant, we use an absolute path. The add_to_waitlist function is defined in the same crate as eat_at_restaurant, which means we can use the crate keyword to start an absolute path.   After crate, we include each of the successive modules until we make our way to add_to_waitlist. You can imagine a filesystem with the same structure, and we‚Äôd specify the path /front_of_house/hosting/add_to_waitlist to run the add_to_waitlist program; using the crate name to start from the crate root is like using / to start from the filesystem root in your shell.   The second time we call add_to_waitlist in eat_at_restaurant, we use a relative path. The path starts with front_of_house, the name of the module defined at the same level of the module tree as eat_at_restaurant. Here the filesystem equivalent would be using the path front_of_house/hosting/add_to_waitlist. Starting with a name means that the path is relative.   Choosing whether to use a relative or absolute path is a decision you‚Äôll make based on your project.  The decision should depend on whether you‚Äôre more likely to move item definition code separately from or together with the code that uses the item.  For example, if we move the front_of_house module and the eat_at_restaurant function into a module named customer_experience, we‚Äôd need to update the absolute path to add_to_waitlist, but the relative path would still be valid. However, if we moved the eat_at_restaurant function separately into a module named dining, the absolute path to the add_to_waitlist call would stay the same, but the relative path would need to be updated. Our preference is to specify absolute paths because it‚Äôs more likely to move code definitions and item calls independently of each other.   Let‚Äôs try to compile Listing 7-3 and find out why it won‚Äôt compile yet! The error we get is shown in Listing 7-4.  $ cargo build    Compiling restaurant v0.1.0 (file:///projects/restaurant) error[E0603]: module `hosting` is private  --&gt; src/lib.rs:9:28   | 9 |     crate::front_of_house::hosting::add_to_waitlist();   |                            ^^^^^^^  error[E0603]: module `hosting` is private   --&gt; src/lib.rs:12:21    | 12 |     front_of_house::hosting::add_to_waitlist();    |                     ^^^^^^^  Listing 7-4: Compiler errors from building the code in Listing 7-3   The error messages say that module hosting is private. In other words, we have the correct paths for the hosting module and the add_to_waitlist function, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to the private sections.   Modules aren‚Äôt useful only for organizing your code. They also define Rust‚Äôs privacy boundary: the line that encapsulates the implementation details external code isn‚Äôt allowed to know about, call, or rely on. So, if you want to make an item like a function or struct private, you put it in a module.   The way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can‚Äôt use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they‚Äôre defined. To continue with the restaurant metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.   Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules code to outer ancestor modules by using the pub keyword to make an item public.   Exposing Paths with the pub Keyword  Let‚Äôs return to the error in Listing 7-4 that told us the hosting module is private.  We want the eat_at_restaurant function in the parent module to have access to the add_to_waitlist function in the child module, so we mark the hosting module with the pub keyword, as shown in Listing 7-5.   mod front_of_house {     pub mod hosting {         fn add_to_waitlist() {}     } }  pub fn eat_at_restaurant() {     // Absolute path     crate::front_of_house::hosting::add_to_waitlist();      // Relative path     front_of_house::hosting::add_to_waitlist(); }  Listing 7-5: Declaring the hosting module as pub to use it from eat_at_restaurant  Unfortunately, the code in Listing 7-5 still results in an error, as shown in Listing 7-6.  $ cargo build    Compiling restaurant v0.1.0 (file:///projects/restaurant) error[E0603]: function `add_to_waitlist` is private  --&gt; src/lib.rs:9:37   | 9 |     crate::front_of_house::hosting::add_to_waitlist();   |                                     ^^^^^^^^^^^^^^^  error[E0603]: function `add_to_waitlist` is private   --&gt; src/lib.rs:12:30    | 12 |     front_of_house::hosting::add_to_waitlist();    |                              ^^^^^^^^^^^^^^^  What happened? Adding the pub keyword in front of mod hosting makes the module public.  With this change, if we can access front_of_house, we can access hosting. But the contents of hosting are still private;  making the module public doesn‚Äôt make its contents public. The pub keyword on a module only lets code in its ancestor modules refer to it.   The errors in Listing 7-6 say that the add_to_waitlist function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.   Let‚Äôs also make the add_to_waitlist function public by adding the pub keyword before its definition, as in Listing 7-7.  mod front_of_house {     pub mod hosting {         pub fn add_to_waitlist() {}     } }  pub fn eat_at_restaurant() {     // Absolute path     crate::front_of_house::hosting::add_to_waitlist();      // Relative path     front_of_house::hosting::add_to_waitlist(); }  Listing 7-7: Adding the pub keyword to mod hosting and fn add_to_waitlist lets us call the function from eat_at_restaurant  Now the code will compile! Let‚Äôs look at the absolute and the relative path and double-check why adding the pub keyword lets us use these paths in add_to_waitlist with respect to the privacy rules.   In the absolute path, we start with crate, the root of our crate‚Äôs module tree. Then the front_of_house module is defined in the crate root.  The front_of_house module isn‚Äôt public, but because the eat_at_restaurant function is defined in the same module as front_of_house (that is, eat_at_restaurant and front_of_house are siblings ‚Äì&gt; think about directory), we can refer to front_of_house from eat_at_restaurant. Next is the hosting module marked with pub. We can access the parent module of hosting, so we can access hosting. Finally, the add_to_waitlist function is marked with pub and we can access its parent module, so this function call works!   In the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from front_of_house. The front_of_house module is defined within the same module as eat_at_restaurant, so the relative path starting from the module in which eat_at_restaurant is defined works. Then, because hosting and add_to_waitlist are marked with pub, the rest of the path works, and this function call is valid!   Starting Relative Paths with super  We can also construct relative paths that begin in the parent module by using super at the start of the path.  This is like starting a filesystem path with the .. syntax. Why would we want to do this?   Consider the code in Listing 7-8 that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer.  The function fix_incorrect_order calls the function serve_order by specifying the path to serve_order starting with super:  fn serve_order() {}  mod back_of_house {     fn fix_incorrect_order() {         cook_order();         super::serve_order();     }      fn cook_order() {} }  Listing 7-8: Calling a function using a relative path starting with super  The fix_incorrect_order function is in the back_of_house module, so we can use super to go to the parent module of back_of_house, which in this case is crate, the root. From there, we look for serve_order and find it. Success!  We think the back_of_house module and the serve_order function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate‚Äôs module tree. Therefore, we used super so we‚Äôll have fewer places to update code in the future if this code gets moved to a different module.   Making Structs and Enums Public  We can also use pub to designate structs and enums as public, but there are a few extra details.  If we use pub before a struct definition, we make the struct public, but the struct‚Äôs fields will still be private.  We can make each field public or not on a case-by-case basis.  In Listing 7-9, we‚Äôve defined a public back_of_house::Breakfast struct with a public toast field but a private seasonal_fruit field.  This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what‚Äôs in season and in stock. The available fruit changes quickly, so customers can‚Äôt choose the fruit or even see which fruit they‚Äôll get.  mod back_of_house {     pub struct Breakfast {         pub toast: String,         seasonal_fruit: String,     }      impl Breakfast {         pub fn summer(toast: &amp;str) -&gt; Breakfast {             Breakfast {                 toast: String::from(toast),                 seasonal_fruit: String::from(\"peaches\"),             }         }     } }  pub fn eat_at_restaurant() {     // Order a breakfast in the summer with Rye toast     let mut meal = back_of_house::Breakfast::summer(\"Rye\");     // Change our mind about what bread we'd like     meal.toast = String::from(\"Wheat\");     println!(\"I'd like {} toast please\", meal.toast);      // The next line won't compile if we uncomment it; we're not allowed     // to see or modify the seasonal fruit that comes with the meal     // meal.seasonal_fruit = String::from(\"blueberries\"); }  Listing 7-9: A struct with some public fields and some private fields  Because the toast field in the back_of_house::Breakfast struct is public, in eat_at_restaurant we can write and read to the toast field using dot notation.  Notice that we can‚Äôt use the seasonal_fruit field in eat_at_restaurant because seasonal_fruit is private.  Try uncommenting the line modifying the seasonal_fruit field value to see what error you get!   Also, note that because back_of_house::Breakfast has a private field, the struct needs to provide a public associated function that constructs an instance of Breakfast (we‚Äôve named it summer here). If Breakfast didn‚Äôt have such a function, we couldn‚Äôt create an instance of Breakfast in eat_at_restaurant because we couldn‚Äôt set the value of the private seasonal_fruit field in eat_at_restaurant.   In contrast, if we make an enum public, all of its variants are then public. We only need the pub before the enum keyword, as shown in Listing 7-10.  mod back_of_house {     pub enum Appetizer {         Soup,         Salad,     } }  pub fn eat_at_restaurant() {     let order1 = back_of_house::Appetizer::Soup;     let order2 = back_of_house::Appetizer::Salad; }  Listing 7-10: Designating an enum as public makes all its variants public  Because we made the Appetizer enum public, we can use the Soup and Salad variants in eat_at_restaurant.  Enums aren‚Äôt very useful unless their variants are public; it would be annoying to have to annotate all enum variants with pub in every case, so the default for enum variants is to be public.  Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with pub.   There‚Äôs one more situation involving pub that we haven‚Äôt covered, and that is our last module system feature: the use keyword.  We‚Äôll cover use by itself first, and then we‚Äôll show how to combine pub and use.   Bringing Paths into Scope with the use Keyword  It might seem like the paths we‚Äôve written to call functions so far are inconveniently long and repetitive.  For example, in Listing 7-7, whether we chose the absolute or relative path to the add_to_waitlist function, every time we wanted to call add_to_waitlist we had to specify front_of_house and hosting too.  Fortunately, there‚Äôs a way to simplify this process. We can bring a path into a scope once and then call the items in that path as if they‚Äôre local items with the use keyword.   In Listing 7-11, we bring the crate::front_of_house::hosting module into the scope of the eat_at_restaurant function so we only have to specify hosting::add_to_waitlist to call the add_to_waitlist function in eat_at_restaurant.   mod front_of_house {     pub mod hosting {         pub fn add_to_waitlist() {}     } }  use crate::front_of_house::hosting;  pub fn eat_at_restaurant() {     hosting::add_to_waitlist();     hosting::add_to_waitlist();     hosting::add_to_waitlist(); }  Listing 7-11: Bringing a module into scope with use   Adding use and a path in a scope is similar to creating a symbolic link in the filesystem. By adding use crate::front_of_house::hosting in the crate root, hosting is now a valid name in that scope, just as though the hosting module had been defined in the crate root. Paths brought into scope with use also check privacy, like any other paths.   You can also bring an item into scope with use and a relative path. Listing 7-12 shows how to specify a relative path to get the same behavior as in Listing 7-11.  mod front_of_house {     pub mod hosting {         pub fn add_to_waitlist() {}     } }  use front_of_house::hosting;  pub fn eat_at_restaurant() {     hosting::add_to_waitlist();     hosting::add_to_waitlist();     hosting::add_to_waitlist(); }  Listing 7-12: Bringing a module into scope with use and a relative path   Creating Idiomatic use Paths  In Listing 7-11, you might have wondered why we specified use crate::front_of_house::hosting and then called hosting::add_to_waitlist in eat_at_restaurant rather than specifying the use path all the way out to the add_to_waitlist function to achieve the same result, as in Listing 7-13.  mod front_of_house {     pub mod hosting {         pub fn add_to_waitlist() {}     } }  use crate::front_of_house::hosting::add_to_waitlist;  pub fn eat_at_restaurant() {     add_to_waitlist();     add_to_waitlist();     add_to_waitlist(); }  Listing 7-13: Bringing the add_to_waitlist function into scope with use, which is unidiomatic  Although both Listing 7-11 and 7-13 accomplish the same task, Listing 7-11 is the idiomatic way to bring a function into scope with use.  Bringing the function‚Äôs parent module into scope with use so we have to specify the parent module when calling the function makes it clear that the function isn‚Äôt locally defined while still minimizing repetition of the full path. The code in Listing 7-13 is unclear as to where add_to_waitlist is defined.   On the other hand, when bringing in structs, enums, and other items with use, it‚Äôs idiomatic to specify the full path.  Listing 7-14 shows the idiomatic way to bring the standard library‚Äôs HashMap struct into the scope of a binary crate.  use std::collections::HashMap;  fn main() {     let mut map = HashMap::new();     map.insert(1, 2); }  Listing 7-14: Bringing HashMap into scope in an idiomatic way   There‚Äôs no strong reason behind this idiom: it‚Äôs just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.   The exception to this idiom is if we‚Äôre bringing two items with the same name into scope with use statements, because Rust doesn‚Äôt allow that.  Listing 7-15 shows how to bring two Result types into scope that have the same name but different parent modules and how to refer to them.  use std::fmt; use std::io;  fn function1() -&gt; fmt::Result {     // --snip-- }  fn function2() -&gt; io::Result&lt;()&gt; {     // --snip-- }  Listing 7-15: Bringing two types with the same name into the same scope requires using their parent modules.  As you can see, using the parent modules distinguishes the two Result types.  If instead we specified use std::fmt::Result and use std::io::Result, we‚Äôd have two Result types in the same scope and Rust wouldn‚Äôt know which one we meant when we used Result.   Providing New Names with the as Keyword  When we bring a name into scope with the use keyword, the name available in the new scope is private.  To enable the code that calls our code to refer to that name as if it had been defined in that code‚Äôs scope, we can combine pub and use. This technique is called re-exporting because we‚Äôre bringing an item into scope but also making that item available for others to bring into their scope.   Listing 7-17 shows the code in Listing 7-11 with use in the root module changed to pub use.  mod front_of_house {     pub mod hosting {         pub fn add_to_waitlist() {}     } }  pub use crate::front_of_house::hosting;  pub fn eat_at_restaurant() {     hosting::add_to_waitlist();     hosting::add_to_waitlist();     hosting::add_to_waitlist(); }  Listing 7-17: Making a name available for any code to use from a new scope with pub use  By using pub use, external code can now call the add_to_waitlist function using hosting::add_to_waitlist.  If we hadn‚Äôt specified pub use, the eat_at_restaurant function could call hosting::add_to_waitlist in its scope, but external code couldn‚Äôt take advantage of this new path.   Re-exporting is useful when the internal structure of your code is different from how programmers calling your code would think about the domain. For example, in this restaurant metaphor, the people running the restaurant think about ‚Äúfront of house‚Äù and ‚Äúback of house.‚Äù  But customers visiting a restaurant probably won‚Äôt think about the parts of the restaurant in those terms.  With pub use, we can write our code with one structure but expose a different structure. Doing so makes our library well organized for programmers working on the library and programmers calling the library.   Using External Packages  In Chapter 2, we programmed a guessing game project that used an external package called rand to get random numbers. To use rand in our project, we added this line to Cargo.toml:  //Filename: Cargo.toml [dependencies] rand = \"0.5.5\"  Adding rand as a dependency in Cargo.toml tells Cargo to download the rand package and any dependencies from crates.io and make rand available to our project.   Then, to bring rand definitions into the scope of our package, we added a use line starting with the name of the package, rand, and listed the items we wanted to bring into scope. Recall that in the ‚ÄúGenerating a Random Number‚Äù section in Chapter 2, we brought the Rng trait into scope and called the rand::thread_rng function:  use rand::Rng; fn main() {     let secret_number = rand::thread_rng().gen_range(1, 101); }  Members of the Rust community have made many packages available at crates.io, and pulling any of them into your package involves these same steps: listing them in your package‚Äôs Cargo.toml file and using use to bring items into scope.   Note that the standard library (std) is also a crate that‚Äôs external to our package.  Because the standard library is shipped with the Rust language, we don‚Äôt need to change Cargo.toml to include std.  But we do need to refer to it with use to bring items from there into our package‚Äôs scope. For example, with HashMap we would use this line:  use std::collections::HashMap;  This is an absolute path starting with std, the name of the standard library crate.   Using Nested Paths to Clean Up Large use Lists  If we‚Äôre using multiple items defined in the same package or same module, listing each item on its own line can take up a lot of vertical space in our files. For example, these two use statements we had in the Guessing Game in Listing 2-4 bring items from std into scope:  use std::io; use std::cmp::Ordering; // ---snip---  Instead, we can use nested paths to bring the same items into scope in one line.  We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing 7-18.  use std::{cmp::Ordering, io}; // ---snip---  Listing 7-18: Specifying a nested path to bring multiple items with the same prefix into scope   In bigger programs, bringing many items into scope from the same package or module using nested paths can reduce the number of separate use statements needed by a lot!   We can use a nested path at any level in a path, which is useful when combining two use statements that share a subpath.  For example, Listing 7-19 shows two use statements: one that brings std::io into scope and one that brings std::io::Write into scope.  use std::io; use std::io::Write;  Listing 7-19: Two use statements where one is a subpath of the other  The common part of these two paths is std::io, and that‚Äôs the complete first path.  To merge these two paths into one use statement, we can use self in the nested path, as shown in Listing 7-20.  use std::io::{self, Write};  Listing 7-20: Combining the paths in Listing 7-19 into one use statement  This line brings std::io and std::io::Write into scope.   The Glob Operator  If we want to bring all public items defined in a path into scope, we can specify that path followed by *, the glob operator:  use std::collections::*;  This use statement brings all public items defined in std::collections into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.   The glob operator is often used when testing to bring everything under test into the tests module; we‚Äôll talk about that in the ‚ÄúHow to Write Tests‚Äù section in Chapter 11. The glob operator is also sometimes used as part of the prelude pattern: see the standard library documentation for more information on that pattern.   Separating Modules into Different Files  So far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.   For example, let‚Äôs start from the code in Listing 7-17 and move the front_of_house module to its own file src/front_of_house.rs by changing the crate root file so it contains the code shown in Listing 7-21. In this case, the crate root file is src/lib.rs, but this procedure also works with binary crates whose crate root file is src/main.rs.   // Filename: src/lib.rs mod front_of_house;  pub use crate::front_of_house::hosting;  pub fn eat_at_restaurant() {     hosting::add_to_waitlist();     hosting::add_to_waitlist();     hosting::add_to_waitlist(); }  Listing 7-21: Declaring the front_of_house module whose body will be in src/front_of_house.rs   And src/front_of_house.rs gets the definitions from the body of the front_of_house module, as shown in Listing 7-22.  // Filename: src/front_of_house.rs pub mod hosting {     pub fn add_to_waitlist() {} }  Listing 7-22: Definitions inside the front_of_house module in src/front_of_house.rs  Using a semicolon after mod front_of_house rather than using a block tells Rust to load the contents of the module from another file with the same name as the module. To continue with our example and extract the hosting module to its own file as well, we change src/front_of_house.rs to contain only the declaration of the hosting module:  // Filename: src/front_of_house.rs pub mod hosting;  Then we create a src/front_of_house directory and a file src/front_of_house/hosting.rs to contain the definitions made in the hosting module:  // Filename: src/front_of_house/hosting.rs pub fn add_to_waitlist() {}  The module tree remains the same, and the function calls in eat_at_restaurant will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.   Note that the pub use crate::front_of_house::hosting statement in src/lib.rs also hasn‚Äôt changed, nor does use have any impact on what files are compiled as part of the crate. The mod keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.   Summary  Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a use statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the pub keyword.  ","categories": ["RUST Language"],
        "tags": ["Mod","Module","Private","Public","Package","Crates","Paths"],
        "url": "https://jjungs-lee.github.io//rust%20language/7.Managing-Growing-Projects-with-Packages,-Crates,-and-Modules/",
        "teaser":null},{
        "title": "RUST : 8. Common Collections",
        "excerpt":"Rust‚Äôs standard library includes a number of very useful data structures called collections. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you‚Äôll develop over time. In this chapter, we‚Äôll discuss three collections that are used very often in Rust programs:      A vector allows you to store a variable number of values next to each other.   A string is a collection of characters. We‚Äôve mentioned the String type previously, but in this chapter we‚Äôll talk about it in depth.   A hash map allows you to associate a value with a particular key. It‚Äôs a particular implementation of the more general data structure called a map.   To learn about the other kinds of collections provided by the standard library, see the documentation.   Storing Lists of Values with Vectors  The first collection type we‚Äôll look at is Vec&lt;T&gt;, also known as a vector. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.   Creating a New Vector  To create a new, empty vector, we can call the Vec::new function, as shown in Listing 8-1.  let v: Vec&lt;i32&gt; = Vec::new();  Listing 8-1: Creating a new, empty vector to hold values of type i32  Note that we added a type annotation here. Because we aren‚Äôt inserting any values into this vector, Rust doesn‚Äôt know what kind of elements we intend to store.  Vectors are implemented using generics; we‚Äôll cover how to use generics with your own types in Chapter 10. For now, know that the Vec&lt;T&gt; type provided by the standard library can hold any type, and when a specific vector holds a specific type, the type is specified within angle brackets(&lt;&gt;).  In Listing 8-1, we‚Äôve told Rust that the Vec&lt;T&gt; in v will hold elements of the i32 type.   In more realistic code, Rust can often infer the type of value you want to store once you insert values, so you rarely need to do this type annotation.  It‚Äôs more common to create a Vec&lt;T&gt; that has initial values, and Rust provides the vec! macro for convenience. The macro will create a new vector that holds the values you give it. Listing 8-2 creates a new Vec that holds the values 1, 2, and 3.   let v = vec![1, 2, 3];  Listing 8-2: Creating a new vector containing values  Because we‚Äôve given initial i32 values, Rust can infer that the type of v is Vec, and the type annotation isn‚Äôt necessary.   Updating a Vector  To create a vector and then add elements to it, we can use the push method, as shown in Listing 8-3.  let mut v = Vec::new();  v.push(5); v.push(6); v.push(7); v.push(8);  Listing 8-3: Using the push method to add values to a vector  As with any variable, if we want to be able to change its value, we need to make it mutable using the mut keyword, as discussed in Chapter 3.  The numbers we place inside are all of type i32, and Rust infers this from the data, so we don‚Äôt need the Vec&lt;i32&gt; annotation.   Dropping a Vector Drops Its Elements  Like any other struct, a vector is freed when it goes out of scope, as annotated in Listing 8-4.  {     let v = vec![1, 2, 3, 4];      // do stuff with v  } // &lt;- v goes out of scope and is freed here  Listing 8-4: Showing where the vector and its elements are dropped  When the vector gets dropped, all of its contents are also dropped, meaning those integers it holds will be cleaned up.  This may seem like a straightforward point but can get a bit more complicated when you start to introduce references to the elements of the vector.   Reading Elements of Vectors  There are two ways to reference a value stored in a vector.  In the examples, we‚Äôve annotated the types of the values that are returned from these functions for extra clarity.   Listing 8-5 shows both methods of accessing a value in a vector, either with indexing syntax or the get method.  let v = vec![1, 2, 3, 4, 5];  let third: &amp;i32 = &amp;v[2]; println!(\"The third element is {}\", third);  match v.get(2) {     Some(third) =&gt; println!(\"The third element is {}\", third),     None =&gt; println!(\"There is no third element.\"), }  Listing 8-5: Using indexing syntax or the get method to access an item in a vector  Note two details here.  First, we use the index value of 2 to get the third element: vectors are indexed by number, starting at zero.  Second, the two ways to get the third element are by using &amp; and [], which gives us a reference, or by using the get method with the index passed as an argument, which gives us an Option&lt;&amp;T&gt;.   Rust has two ways to reference an element so you can choose how the program behaves when you try to use an index value that the vector doesn‚Äôt have an element for.  As an example, let‚Äôs see what a program will do if it has a vector that holds five elements and then tries to access an element at index 100, as shown in Listing 8-6.  let v = vec![1, 2, 3, 4, 5];  let does_not_exist = &amp;v[100]; let does_not_exist = v.get(100);  Listing 8-6: Attempting to access the element at index 100 in a vector containing five elements  When we run this code, the first [] method will cause the program to panic because it references a nonexistent element.  This method is best used when you want your program to crash if there‚Äôs an attempt to access an element past the end of the vector.   When the get method is passed an index that is outside the vector, it returns None without panicking. You would use this method if accessing an element beyond the range of the vector happens occasionally under normal circumstances.  Your code will then have logic to handle having either Some(&amp;element) or None, as discussed in Chapter 6.   When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid.  Recall the rule that states you can‚Äôt have mutable and immutable references in the same scope.  That rule applies in Listing 8-7, where we hold an immutable reference to the first element in a vector and try to add an element to the end, which won‚Äôt work.  let mut v = vec![1, 2, 3, 4, 5];  let first = &amp;v[0];  v.push(6);  Listing 8-7: Attempting to add an element to a vector while holding a reference to an item  Compiling this code will result in this error:  error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable  --&gt; src/main.rs:6:5   | 4 |     let first = &amp;v[0];   |                  - immutable borrow occurs here 5 | 6 |     v.push(6);   |     ^^^^^^^^^ mutable borrow occurs here 7 | 8 |     println!(\"The first element is: {}\", first);   |                                          ----- immutable borrow later used here  The code in Listing 8-7 might look like it should work: why should a reference to the first element care about what changes at the end of the vector?  This error is due to the way vectors work: adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, if there isn‚Äôt enough room to put all the elements next to each other where the vector currently is.  In that case, the reference to the first element would be pointing to deallocated memory.  The borrowing rules prevent programs from ending up in that situation.   Note: For more on the implementation details of the Vec type, see ‚ÄúThe Rustonomicon‚Äù at https://doc.rust-lang.org/stable/nomicon/vec.html.   Iterating over the Values in a Vector  If we want to access each element in a vector in turn, we can iterate through all of the elements rather than use indices to access one at a time.  Listing 8-8 shows how to use a for loop to get immutable references to each element in a vector of i32 values and print them.  let v = vec![100, 32, 57]; for i in &amp;v {     println!(\"{}\", i); }  Listing 8-8: Printing each element in a vector by iterating over the elements using a for loop  We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements.  The for loop in Listing 8-9 will add 50 to each element.  let mut v = vec![100, 32, 57]; for i in &amp;mut v {     *i += 50; }  Listing 8-9: Iterating over mutable references to elements in a vector   To change the value that the mutable reference refers to, we have to use the dereference operator (*) to get to the value in i before we can use the += operator.  We‚Äôll talk more about the dereference operator in the ‚ÄúFollowing the Pointer to the Value with the Dereference Operator‚Äù section of Chapter 15.   Using an Enum to Store Multiple Types  At the beginning of this chapter, we said that vectors can only store values that are the same type.  This can be inconvenient; there are definitely use cases for needing to store a list of items of different types.  Fortunately, the variants of an enum are defined under the same enum type, so when we need to store elements of a different type in a vector, we can define and use an enum!  enum SpreadsheetCell {     Int(i32),     Float(f64),     Text(String), }  let row = vec![     SpreadsheetCell::Int(3),     SpreadsheetCell::Text(String::from(\"blue\")),     SpreadsheetCell::Float(10.12), ];  Listing 8-10: Defining an enum to store values of different types in one vector  Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element.  A secondary advantage is that we can be explicit about what types are allowed in this vector.  If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a match expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter 6.   When you‚Äôre writing a program, if you don‚Äôt know the exhaustive set of types the program will get at runtime to store in a vector, the enum technique won‚Äôt work. Instead, you can use a trait object, which we‚Äôll cover in Chapter 17.   Now that we‚Äôve discussed some of the most common ways to use vectors, be sure to review the API documentation for all the many useful methods defined on Vec by the standard library.   Storing UTF-8 Encoded Text with Strings  We talked about strings in Chapter 4, but we‚Äôll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons:  Rust‚Äôs propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-8. These factors combine in a way that can seem difficult when you‚Äôre coming from other programming languages.   It‚Äôs useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text.  In this section, we‚Äôll talk about the operations on String that every collection type has, such as creating, updating, and reading.  We‚Äôll also discuss the ways in which String is different from the other collections, namely how indexing into a String is complicated by the differences between how people and computers interpret String data.   What Is a String?  We‚Äôll first define what we mean by the term string. Rust has only one string type in the core language, which is the string slice str that is usually seen in its borrowed form &amp;str. In Chapter 4, we talked about string slices, which are references to some UTF-8 encoded string data stored elsewhere. String literals, for example, are stored in the program‚Äôs binary and are therefore string slices.   The String type, which is provided by Rust‚Äôs standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type.  When Rustaceans refer to ‚Äústrings‚Äù in Rust, they usually mean the String and the string slice &amp;str types, not just one of those types.  Although this section is largely about String, both types are used heavily in Rust‚Äôs standard library, and both String and string slices are UTF-8 encoded.   Rust‚Äôs standard library also includes a number of other string types, such as OsString, OsStr, CString, and CStr.  Library crates can provide even more options for storing string data. See how those names all end in String or Str?  They refer to owned and borrowed variants, just like the String and str types you‚Äôve seen previously.  These string types can store text in different encodings or be represented in memory in a different way, for example.  We won‚Äôt discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.   Creating a New String  Many of the same operations available with Vec are available with String as well, starting with the new function to create a string, shown in Listing 8-11.  let mut s = String::new();  Listing 8-11: Creating a new, empty String  This line creates a new empty string called s, which we can then load data into.  Often, we‚Äôll have some initial data that we want to start the string with.  For that, we use the to_string method, which is available on any type that implements the Display trait, as string literals do.  Listing 8-12 shows two examples.  let data = \"initial contents\";  let s = data.to_string();  // the method also works on a literal directly: let s = \"initial contents\".to_string();  Listing 8-12: Using the to_string method to create a String from a string litera  This code creates a string containing initial contents.   We can also use the function String::from to create a String from a string literal.  The code in Listing 8-13 is equivalent to the code from Listing 8-12 that uses to_string.  let s = String::from(\"initial contents\");  Listing 8-13: Using the String::from function to create a String from a string literal  Because strings are used for so many things, we can use many different generic APIs for strings, providing us with a lot of options.  Some of them can seem redundant, but they all have their place!  In this case, String::from and to_string do the same thing, so which you choose is a matter of style.   Remember that strings are UTF-8 encoded, so we can include any properly encoded data in them, as shown in Listing 8-14.  // All of these are valid String values. let hello = String::from(\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\"); let hello = String::from(\"Dobr√Ω den\"); let hello = String::from(\"Hello\"); let hello = String::from(\"◊©÷∏◊Å◊ú◊ï÷π◊ù\"); let hello = String::from(\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\"); let hello = String::from(\"„Åì„Çì„Å´„Å°„ÅØ\"); let hello = String::from(\"ÏïàÎÖïÌïòÏÑ∏Ïöî\"); let hello = String::from(\"‰Ω†Â•Ω\"); let hello = String::from(\"Ol√°\"); let hello = String::from(\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"); let hello = String::from(\"Hola\");  Listing 8-14: Storing greetings in different languages in strings   Updating a String  A String can grow in size and its contents can change, just like the contents of a Vec&lt;T&gt;, if you push more data into it.  In addition, you can conveniently use the + operator or the format! macro to concatenate String values.   Appending to a String with push_str and push  We can grow a String by using the push_str method to append a string slice, as shown in Listing 8-15.  let mut s = String::from(\"foo\"); s.push_str(\"bar\");  Listing 8-15: Appending a string slice to a String using the push_str method  After these two lines, s will contain foobar. The push_str method takes a string slice because we don‚Äôt necessarily want to take ownership of the parameter.  For example, the code in Listing 8-16 shows that it would be unfortunate if we weren‚Äôt able to use s2 after appending its contents to s1.  let mut s1 = String::from(\"foo\"); let s2 = \"bar\"; s1.push_str(s2); println!(\"s2 is {}\", s2);  Listing 8-16: Using a string slice after appending its contents to a String  If the push_str method took ownership of s2, we wouldn‚Äôt be able to print its value on the last line.  However, this code works as we‚Äôd expect!   The push method takes a single character as a parameter and adds it to the String. Listing 8-17 shows code that adds the letter l to a String using the push method.  // As a result of this code, s will contain `lol`. let mut s = String::from(\"lo\"); s.push('l');  Listing 8-17: Adding one character to a String value using push   Concatenation with the + Operator or the format! Macro  Often, you‚Äôll want to combine two existing strings. One way is to use the + operator, as shown in Listing 8-18.  let s1 = String::from(\"Hello, \"); let s2 = String::from(\"world!\"); let s3 = s1 + &amp;s2; // note s1 has been moved here and can no longer be used  Listing 8-18: Using the + operator to combine two String values into a new String value   The string s3 will contain Hello, world! as a result of this code.  The reason s1 is no longer valid after the addition and the reason we used a reference to s2 has to do with the signature of the method that gets called when we use the + operator.  The + operator uses the add method, whose signature looks something like this:  fn add(self, s: &amp;str) -&gt; String {  This isn‚Äôt the exact signature that‚Äôs in the standard library: in the standard library, add is defined using generics.  Here, we‚Äôre looking at the signature of add with concrete types substituted for the generic ones, which is what happens when we call this method with String values.  We‚Äôll discuss generics in Chapter 10. This signature gives us the clues we need to understand the tricky bits of the + operator.   First, s2 has an &amp;, meaning that we‚Äôre adding a reference of the second string to the first string because of the s parameter in the add function: we can only add a &amp;str to a String; we can‚Äôt add two String values together.  But wait‚Äîthe type of &amp;s2 is &amp;String, not &amp;str, as specified in the second parameter to add. So why does Listing 8-18 compile?   The reason we‚Äôre able to use &amp;s2 in the call to add is that the compiler can coerce the &amp;String argument into a &amp;str.  When we call the add method, Rust uses a deref coercion, which here turns &amp;s2 into &amp;s2[..].  We‚Äôll discuss deref coercion in more depth in Chapter 15.  Because add does not take ownership of the s parameter, s2 will still be a valid String after this operation.   Second, we can see in the signature that add takes ownership of self, because self does not have an &amp;.  This means s1 in Listing 8-18 will be moved into the add call and no longer be valid after that.  So although let s3 = s1 + &amp;s2; looks like it will copy both strings and create a new one, this statement actually takes ownership of s1, appends a copy of the contents of s2, and then returns ownership of the result.  In other words, it looks like it‚Äôs making a lot of copies but isn‚Äôt; the implementation is more efficient than copying.   If we need to concatenate multiple strings, the behavior of the + operator gets unwieldy:  let s1 = String::from(\"tic\"); let s2 = String::from(\"tac\"); let s3 = String::from(\"toe\");  let s = s1 + \"-\" + &amp;s2 + \"-\" + &amp;s3;  At this point, s will be tic-tac-toe. With all of the + and characters, it‚Äôs difficult to see what‚Äôs going on.  For more complicated string combining, we can use the format! macro:  let s1 = String::from(\"tic\"); let s2 = String::from(\"tac\"); let s3 = String::from(\"toe\");  let s = format!(\"{}-{}-{}\", s1, s2, s3);  This code also sets s to tic-tac-toe. The format! macro works in the same way as println!, but instead of printing the output to the screen, it returns a String with the contents.  The version of the code using format! is much easier to read and doesn‚Äôt take ownership of any of its parameters.   Indexing into Strings   This section differ other programming languages   In many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation.  However, if you try to access parts of a String using indexing syntax in Rust, you‚Äôll get an error. Consider the invalid code in Listing 8-19.  let s1 = String::from(\"hello\"); let h = s1[0];  Listing 8-19: Attempting to use indexing syntax with a String   This code will result in the following error:  error[E0277]: the trait bound `std::string::String: std::ops::Index&lt;{integer}&gt;` is not satisfied  --&gt;   | 3 |     let h = s1[0];   |             ^^^^^ the type `std::string::String` cannot be indexed by `{integer}`   |   = help: the trait `std::ops::Index&lt;{integer}&gt;` is not implemented for `std::string::String`  The error and the note tell the story: Rust strings don‚Äôt support indexing. But why not?  To answer that question, we need to discuss how Rust stores strings in memory.   Internal Representation  A String is a wrapper over a Vec&lt;u8&gt;. Let‚Äôs look at some of our properly encoded UTF-8 example strings from Listing 8-14. First, this one:  let len = String::from(\"Hola\").len();  In this case, len will be 4, which means the vector storing the string ‚ÄúHola‚Äù is 4 bytes long.  Each of these letters takes 1 byte when encoded in UTF-8. But what about the following line? (Note that this string begins with the capital Cyrillic letter Ze, not the Arabic number 3.)  let len = String::from(\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\").len();  Asked how long the string is, you might say 12.  However, Rust‚Äôs answer is 24: that‚Äôs the number of bytes it takes to encode ‚Äú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚Äù in UTF-8, because each Unicode scalar value in that string takes 2 bytes of storage. Therefore, an index into the string‚Äôs bytes will not always correlate to a valid Unicode scalar value. To demonstrate, consider this invalid Rust code:   let hello = \"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"; let answer = &amp;hello[0];  What should the value of answer be? Should it be –ó, the first letter? When encoded in UTF-8, the first byte of –ó is 208 and the second is 151, so answer should in fact be 208, but 208 is not a valid character on its own.  Returning 208 is likely not what a user would want if they asked for the first letter of this string; however, that‚Äôs the only data that Rust has at byte index 0.  Users generally don‚Äôt want the byte value returned, even if the string contains only Latin letters: if &amp;‚Äùhello‚Äù[0] were valid code that returned the byte value, it would return 104, not h. To avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn‚Äôt compile this code at all and prevents misunderstandings early in the development process.   Bytes and Scalar Values and Grapheme Clusters! Oh My!  Another point about UTF-8 is that there are actually three relevant ways to look at strings from Rust‚Äôs perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call letters).   If we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it is stored as a vector of u8 values that looks like this:  [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]  That‚Äôs 18 bytes and is how computers ultimately store this data.  If we look at them as Unicode scalar values, which are what Rust‚Äôs char type is, those bytes look like this:  ['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']  There are six char values here, but the fourth and sixth are not letters: they‚Äôre diacritics that don‚Äôt make sense on their own.  Finally, if we look at them as grapheme clusters, we‚Äôd get what a person would call the four letters that make up the Hindi word:  [\"‡§®\", \"‡§Æ\", \"‡§∏‡•ç\", \"‡§§‡•á\"]  Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.   A final reason Rust doesn‚Äôt allow us to index into a String to get a character is that indexing operations are expected to always take constant time (O(1)). But it isn‚Äôt possible to guarantee that performance with a String, because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were.   Slicing Strings  Indexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice.  Therefore, Rust asks you to be more specific if you really need to use indices to create string slices.  To be more specific in your indexing and indicate that you want a string slice, rather than indexing using [] with a single number, you can use [] with a range to create a string slice containing particular bytes:  let hello = \"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\";  let s = &amp;hello[0..4];  Here, s will be a &amp;str that contains the first 4 bytes of the string.  Earlier, we mentioned that each of these characters was 2 bytes, which means s will be ‚Äú–ó–¥‚Äù.   What would happen if we used &amp;hello[0..1]? The answer: Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:  thread 'main' panicked at 'byte index 1 is not a char boundary;  it is inside '–ó' (bytes 0..2) of `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ`', src/libcore/str/mod.rs:2188:4 You should use ranges to create string slices with caution,  because doing so can crash your program.  You should use ranges to create string slices with caution, because doing so can crash your program.   Methods for Iterating Over Strings  Fortunately, you can access elements in a string in other ways.   If you need to perform operations on individual Unicode scalar values, the best way to do so is to use the chars method.  Calling chars on ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù separates out and returns six values of type char, and you can iterate over the result to access each element:  for c in \"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\".chars() {     println!(\"{}\", c); } // This code will print the following: ‡§® ‡§Æ ‡§∏ ‡•ç ‡§§ ‡•á  The bytes method returns each raw byte, which might be appropriate for your domain:  for b in \"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\".bytes() {     println!(\"{}\", b); }  This code will print the 18 bytes that make up this String:  224 164 // --snip-- 165 135  But be sure to remember that valid Unicode scalar values may be made up of more than 1 byte.   Getting grapheme clusters from strings is complex, so this functionality is not provided by the standard library. Crates are available on crates.io if this is the functionality you need.   Strings Are Not So Simple  To summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of String data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.   Storing Keys with Associated Values in Hash Maps  The last of our common collections is the hash map. The type HashMap&lt;K, V&gt; stores a mapping of keys of type K to values of type V.  It does this via a hashing function, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as hash, map, object, hash table, dictionary, or associative array, just to name a few.   Hash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type. For example, in a game, you could keep track of each team‚Äôs score in a hash map in which each key is a team‚Äôs name and the values are each team‚Äôs score. Given a team name, you can retrieve its score.   Creating a New Hash Map  You can create an empty hash map with new and add elements with insert. In Listing 8-20, we‚Äôre keeping track of the scores of two teams whose names are Blue and Yellow. The Blue team starts with 10 points, and the Yellow team starts with 50.  use std::collections::HashMap;  let mut scores = HashMap::new();  scores.insert(String::from(\"Blue\"), 10); scores.insert(String::from(\"Yellow\"), 50);  Listing 8-20: Creating a new hash map and inserting some keys and values  Note that we need to first use the HashMap from the collections portion of the standard library.  Of our three common collections, this one is the least often used, so it‚Äôs not included in the features brought into scope automatically in the prelude.  Hash maps also have less support from the standard library; there‚Äôs no built-in macro to construct them, for example.   Just like vectors, hash maps store their data on the heap. This HashMap has keys of type String and values of type i32. Like vectors, hash maps are homogeneous: all of the keys must have the same type, and all of the values must have the same type.   Another way of constructing a hash map is by using the collect method on a vector of tuples, where each tuple consists of a key and its value.  The collect method gathers data into a number of collection types, including HashMap.  For example, if we had the team names and initial scores in two separate vectors, we could use the zip method to create a vector of tuples where ‚ÄúBlue‚Äù is paired with 10, and so forth. Then we could use the collect method to turn that vector of tuples into a hash map, as shown in Listing 8-21.  use std::collections::HashMap;  let teams  = vec![String::from(\"Blue\"), String::from(\"Yellow\")]; let initial_scores = vec![10, 50];  let scores: HashMap&lt;_, _&gt; = teams.iter().zip(initial_scores.iter()).collect();  Listing 8-21: Creating a hash map from a list of teams and a list of scores   The type annotation HashMap&lt;_, _&gt; is needed here because it‚Äôs possible to collect into many different data structures and Rust doesn‚Äôt know which you want unless you specify. For the parameters for the key and value types, however, we use underscores, and Rust can infer the types that the hash map contains based on the types of the data in the vectors.   Hash Maps and Ownership  For types that implement the Copy trait, like i32, the values are copied into the hash map.  For owned values like String, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.   use std::collections::HashMap;  let field_name = String::from(\"Favorite color\"); let field_value = String::from(\"Blue\");  let mut map = HashMap::new(); map.insert(field_name, field_value); // field_name and field_value are invalid at this point, try using them and // see what compiler error you get!  Listing 8-22: Showing that keys and values are owned by the hash map once they‚Äôre inserted   We aren‚Äôt able to use the variables field_name and field_value after they‚Äôve been moved into the hash map with the call to insert.   If we insert references to values into the hash map, the values won‚Äôt be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We‚Äôll talk more about these issues in the ‚ÄúValidating References with Lifetimes‚Äù section in Chapter 10.   Accessing Values in a Hash Map  We can get a value out of the hash map by providing its key to the get method, as shown in Listing 8-23.   use std::collections::HashMap;  let mut scores = HashMap::new();  scores.insert(String::from(\"Blue\"), 10); scores.insert(String::from(\"Yellow\"), 50);  let team_name = String::from(\"Blue\"); let score = scores.get(&amp;team_name);  Listing 8-23: Accessing the score for the Blue team stored in the hash map   Here, score will have the value that‚Äôs associated with the Blue team, and the result will be Some(&amp;10).  The result is wrapped in Some because get returns an Option&lt;&amp;V&gt;; if there‚Äôs no value for that key in the hash map, get will return None.  The program will need to handle the Option in one of the ways that we covered in Chapter 6.   We can iterate over each key/value pair in a hash map in a similar manner as we do with vectors, using a for loop:  use std::collections::HashMap;  let mut scores = HashMap::new();  scores.insert(String::from(\"Blue\"), 10); scores.insert(String::from(\"Yellow\"), 50);  for (key, value) in &amp;scores {     println!(\"{}: {}\", key, value); } // This code will print each pair in an arbitrary order: Yellow: 50 Blue: 10   Updating a Hash Map  Although the number of keys and values is growable, each key can only have one value associated with it at a time.  When you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned.  You could replace the old value with the new value, completely disregarding the old value.  You could keep the old value and ignore the new value, only adding the new value if the key doesn‚Äôt already have a value.  Or you could combine the old value and the new value. Let‚Äôs look at how to do each of these!   Overwriting a Value  If we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced.  Even though the code in Listing 8-24 calls insert twice, the hash map will only contain one key/value pair because we‚Äôre inserting the value for the Blue team‚Äôs key both times.   use std::collections::HashMap;  let mut scores = HashMap::new();  scores.insert(String::from(\"Blue\"), 10); scores.insert(String::from(\"Blue\"), 25);  println!(\"{:?}\", scores);  Listing 8-24: Replacing a value stored with a particular key  This code will print {\"Blue\": 25}. The original value of 10 has been overwritten.   Only Inserting a Value If the Key Has No Value  It‚Äôs common to check whether a particular key has a value and, if it doesn‚Äôt, insert a value for it.  Hash maps have a special API for this called entry that takes the key you want to check as a parameter.  The return value of the entry method is an enum called Entry that represents a value that might or might not exist.  Let‚Äôs say we want to check whether the key for the Yellow team has a value associated with it.  If it doesn‚Äôt, we want to insert the value 50, and the same for the Blue team. Using the entry API, the code looks like Listing 8-25.   use std::collections::HashMap;  let mut scores = HashMap::new(); scores.insert(String::from(\"Blue\"), 10);  scores.entry(String::from(\"Yellow\")).or_insert(50); scores.entry(String::from(\"Blue\")).or_insert(50);  println!(\"{:?}\", scores);  Listing 8-25: Using the entry method to only insert if the key does not already have a value   The or_insert method on Entry is defined to return a mutable reference to the value for the corresponding Entry key if that key exists, and if not, inserts the parameter as the new value for this key and returns a mutable reference to the new value.  This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.   Running the code in Listing 8-25 will print {\"Yellow\": 50, \"Blue\": 10}. The first call to entry will insert the key for the Yellow team with the value 50 because the Yellow team doesn‚Äôt have a value already. The second call to entry will not change the hash map because the Blue team already has the value 10.   Updating a Value Based on the Old Value  Another common use case for hash maps is to look up a key‚Äôs value and then update it based on the old value.  For instance, Listing 8-26 shows code that counts how many times each word appears in some text.  We use a hash map with the words as keys and increment the value to keep track of how many times we‚Äôve seen that word.  If it‚Äôs the first time we‚Äôve seen a word, we‚Äôll first insert the value 0.  use std::collections::HashMap;  let text = \"hello world wonderful world\";  let mut map = HashMap::new();  for word in text.split_whitespace() {     let count = map.entry(word).or_insert(0);     *count += 1; }  println!(\"{:?}\", map);  Listing 8-26: Counting occurrences of words using a hash map that stores words and counts  This code will print {\"world\": 2, \"hello\": 1, \"wonderful\": 1}. The or_insert method actually returns a mutable reference (&amp;mut V) to the value for this key.  Here we store that mutable reference in the count variable, so in order to assign to that value, we must first dereference count using the asterisk (*).  The mutable reference goes out of scope at the end of the for loop, so all of these changes are safe and allowed by the borrowing rules.   Hashing Functions  By default, HashMap uses a ‚Äúcryptographically strong‚Äù1 hashing function that can provide resistance to Denial of Service (DoS) attacks.  This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it.  If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher.  A hasher is a type that implements the BuildHasher trait. We‚Äôll talk about traits and how to implement them in Chapter 10.  You don‚Äôt necessarily have to implement your own hasher from scratch; crates.io has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.   Summary  Vectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:      Given a list of integers, use a vector and return the mean (the average value), median (when sorted, the value in the middle position), and mode (the value that occurs most often; a hash map will be helpful here) of the list.   Convert strings to pig latin. The first consonant of each word is moved to the end of the word and ‚Äúay‚Äù is added, so ‚Äúfirst‚Äù becomes ‚Äúirst-fay.‚Äù Words that start with a vowel have ‚Äúhay‚Äù added to the end instead (‚Äúapple‚Äù becomes ‚Äúapple-hay‚Äù). Keep in mind the details about UTF-8 encoding!   Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company. For example, ‚ÄúAdd Sally to Engineering‚Äù or ‚ÄúAdd Amir to Sales.‚Äù Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically.   The standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!                   https://www.131002.net/siphash/siphash.pdf¬†&#8617;           ","categories": ["RUST Language"],
        "tags": ["Library","Collection","Vector","String","Hash map"],
        "url": "https://jjungs-lee.github.io//rust%20language/8.Common-Collections/",
        "teaser":null},{
        "title": "RUST : 9. Error Handling",
        "excerpt":"Rust‚Äôs commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you‚Äôll discover errors and handle them appropriately before you‚Äôve deployed your code to production!   Rust groups errors into two major categories: recoverable and unrecoverable errors. For a recoverable error, such as a file not found error, it‚Äôs reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.   Most languages don‚Äôt distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. Rust doesn‚Äôt have exceptions.  Instead, it has the type Result&lt;T, E&gt; for recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error.  This chapter covers calling panic! first and then talks about returning Result&lt;T, E&gt; values. Additionally, we‚Äôll explore considerations when deciding whether to try to recover from an error or to stop execution.   Unrecoverable Errors with panic!  Sometimes, bad things happen in your code, and there‚Äôs nothing you can do about it. In these cases, Rust has the panic! macro.  When the panic! macro executes, your program will print a failure message, unwind and clean up the stack, and then quit.  This most commonly occurs when a bug of some kind has been detected and it‚Äôs not clear to the programmer how to handle the error.      Unwinding the Stack or Aborting in Response to a Panic    By default, when a panic occurs, the program starts unwinding, which means Rust walks back up the stack and cleans up the data from each function it encounters.  But this walking back and cleanup is a lot of work. The alternative is to immediately abort, which ends the program without cleaning up.  Memory that the program was using will then need to be cleaned up by the operating system.  If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding panic = 'abort' to the appropriate [profile] sections in your Cargo.toml file.  For example, if you want to abort on panic in release mode, add this:    [profile.release]   panic = 'abort'      Let‚Äôs try calling panic! in a simple program:  fn main() {     panic!(\"crash and burn\"); }  When you run the program, you‚Äôll see something like this:  $ cargo run    Compiling panic v0.1.0 (file:///projects/panic)     Finished dev [unoptimized + debuginfo] target(s) in 0.25s      Running `target/debug/panic` thread 'main' panicked at 'crash and burn', src/main.rs:2:5 note: Run with `RUST_BACKTRACE=1` for a backtrace.  The call to panic! causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: src/main.rs:2:5 indicates that it‚Äôs the second line, fifth character of our src/main.rs file.   In this case, the line indicated is part of our code, and if we go to that line, we see the panic! macro call. In other cases, the panic! call might be in code that our code calls, and the filename and line number reported by the error message will be someone else‚Äôs code where the panic! macro is called, not the line of our code that eventually led to the panic! call. We can use the backtrace of the functions the panic! call came from to figure out the part of our code that is causing the problem. We‚Äôll discuss what a backtrace is in more detail next.   Using a panic! Backtrace   Let‚Äôs look at another example to see what it‚Äôs like when a panic! call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing 9-1 has some code that attempts to access an element by index in a vector.   fn main() {     let v = vec![1, 2, 3];      v[99]; }  Listing 9-1: Attempting to access an element beyond the end of a vector, which will cause a call to panic!   Here, we‚Äôre attempting to access the 100th element of our vector (which is at index 99 because indexing starts at zero), but it has only 3 elements.  In this situation, Rust will panic. Using [] is supposed to return an element, but if you pass an invalid index, there‚Äôs no element that Rust could return here that would be correct.   Other languages, like C, will attempt to give you exactly what you asked for in this situation, even though it isn‚Äôt what you want: you‚Äôll get whatever is at the location in memory that would correspond to that element in the vector, even though the memory doesn‚Äôt belong to the vector.  This is called a buffer overread and can lead to security vulnerabilities if an attacker is able to manipulate the index in such a way as to read data they shouldn‚Äôt be allowed to that is stored after the array.   To protect your program from this sort of vulnerability, if you try to read an element at an index that doesn‚Äôt exist, Rust will stop execution and refuse to continue.  Let‚Äôs try it and see:  $ cargo run    Compiling panic v0.1.0 (file:///projects/panic)     Finished dev [unoptimized + debuginfo] target(s) in 0.27s      Running `target/debug/panic` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', libcore/slice/mod.rs:2448:10 note: Run with `RUST_BACKTRACE=1` for a backtrace.  This error points at a file we didn‚Äôt write, libcore/slice/mod.rs.  That‚Äôs the implementation of slice in the Rust source code.  The code that gets run when we use [] on our vector v is in libcore/slice/mod.rs, and that is where the panic! is actually happening.   The next note line tells us that we can set the RUST_BACKTRACE environment variable to get a backtrace of exactly what happened to cause the error.  A backtrace is a list of all the functions that have been called to get to this point.  Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote.  That‚Äôs the spot where the problem originated.  The lines above the lines mentioning your files are code that your code called; the lines below are code that called your code.  These lines might include core Rust code, standard library code, or crates that you‚Äôre using.  Let‚Äôs try getting a backtrace by setting the RUST_BACKTRACE environment variable to any value except 0.  Listing 9-2 shows output similar to what you‚Äôll see.  $ RUST_BACKTRACE=1 cargo run     Finished dev [unoptimized + debuginfo] target(s) in 0.00s      Running `target/debug/panic` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', libcore/slice/mod.rs:2448:10 stack backtrace:    0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace              at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49    1: std::sys_common::backtrace::print              at libstd/sys_common/backtrace.rs:71              at libstd/sys_common/backtrace.rs:59    2: std::panicking::default_hook::              at libstd/panicking.rs:211    3: std::panicking::default_hook              at libstd/panicking.rs:227    4: &lt;std::panicking::begin_panic::PanicPayload&lt;A&gt; as core::panic::BoxMeUp&gt;::get              at libstd/panicking.rs:476    5: std::panicking::continue_panic_fmt              at libstd/panicking.rs:390    6: std::panicking::try::do_call              at libstd/panicking.rs:325    7: core::ptr::drop_in_place              at libcore/panicking.rs:77    8: core::ptr::drop_in_place              at libcore/panicking.rs:59    9: &lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index              at libcore/slice/mod.rs:2448   10: core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index              at libcore/slice/mod.rs:2316   11: &lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index              at liballoc/vec.rs:1653   12: panic::main              at src/main.rs:4   13: std::rt::lang_start::              at libstd/rt.rs:74   14: std::panicking::try::do_call              at libstd/rt.rs:59              at libstd/panicking.rs:310   15: macho_symbol_search              at libpanic_unwind/lib.rs:102   16: std::alloc::default_alloc_error_hook              at libstd/panicking.rs:289              at libstd/panic.rs:392              at libstd/rt.rs:58   17: std::rt::lang_start              at libstd/rt.rs:74   18: panic::main  Listing 9-2: The backtrace generated by a call to panic! displayed when the environment variable RUST_BACKTRACE is set   That‚Äôs a lot of output! The exact output you see might be different depending on your operating system and Rust version.  In order to get backtraces with this information, debug symbols must be enabled.  Debug symbols are enabled by default when using cargo build or cargo run without the --release flag, as we have here.   In the output in Listing 9-2, line 12 of the backtrace points to the line in our project that‚Äôs causing the problem: line 4 of src/main.rs.  If we don‚Äôt want our program to panic, the location pointed to by the first line mentioning a file we wrote is where we should start investigating.  In Listing 9-1, where we deliberately wrote code that would panic in order to demonstrate how to use backtraces, the way to fix the panic is to not request an element at index 99 from a vector that only contains 3 items.  When your code panics in the future, you‚Äôll need to figure out what action the code is taking with what values to cause the panic and what the code should do instead.   We‚Äôll come back to panic! and when we should and should not use panic! to handle error conditions in the ‚ÄúTo panic! or Not to panic!‚Äù section later in this chapter. Next, we‚Äôll look at how to recover from an error using Result.   Recoverable Errors with Result  Most errors aren‚Äôt serious enough to require the program to stop entirely.  Sometimes, when a function fails, it‚Äôs for a reason that you can easily interpret and respond to.  For example, if you try to open a file and that operation fails because the file doesn‚Äôt exist, you might want to create the file instead of terminating the process.   Recall from ‚ÄúHandling Potential Failure with the Result Type‚Äù in Chapter 2 that the Result enum is defined as having two variants, Ok and Err, as follows  enum Result&lt;T, E&gt; {     Ok(T),     Err(E), }  The T and E are generic type parameters: we‚Äôll discuss generics in more detail in Chapter 10.  What you need to know right now is that T represents the type of the value that will be returned in a success case within the Ok variant, and E represents the type of the error that will be returned in a failure case within the Err variant.  Because Result has these generic type parameters, we can use the Result type and the functions that the standard library has defined on it in many different situations where the successful value and error value we want to return may differ.   Let‚Äôs call a function that returns a Result value because the function could fail. In Listing 9-3 we try to open a file.  use std::fs::File;  fn main() {     let f = File::open(\"hello.txt\"); }  Listing 9-3: Opening a file  How do we know File::open returns a Result? We could look at the standard library API documentation, or we could ask the compiler!  If we give f a type annotation that we know is not the return type of the function and then try to compile the code, the compiler will tell us that the types don‚Äôt match. The error message will then tell us what the type of f is.  Let‚Äôs try it! We know that the return type of File::open isn‚Äôt of type u32, so let‚Äôs change the let f statement to this:   let f: u32 = File::open(\"hello.txt\");  Attempting to compile now gives us the following output:  error[E0308]: mismatched types  --&gt; src/main.rs:4:18   | 4 |     let f: u32 = File::open(\"hello.txt\");   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected u32, found enum `std::result::Result`   |   = note: expected type `u32`              found type `std::result::Result&lt;std::fs::File, std::io::Error&gt;`  This tells us the return type of the File::open function is a Result&lt;T, E&gt;.  The generic parameter T has been filled in here with the type of the success value, std::fs::File, which is a file handle.  The type of E used in the error value is std::io::Error.   This return type means the call to File::open might succeed and return a file handle that we can read from or write to.  The function call also might fail: for example, the file might not exist, or we might not have permission to access the file.  The File::open function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the Result enum conveys.   In the case where File::open succeeds, the value in the variable f will be an instance of Ok that contains a file handle. In the case where it fails, the value in f will be an instance of Err that contains more information about the kind of error that happened.   We need to add to the code in Listing 9-3 to take different actions depending on the value File::open returns.  Listing 9-4 shows one way to handle the Result using a basic tool, the match expression that we discussed in Chapter 6.  use std::fs::File;  fn main() {     let f = File::open(\"hello.txt\");      let f = match f {         Ok(file) =&gt; file,         Err(error) =&gt; {             panic!(\"Problem opening the file: {:?}\", error)         },     }; }  Listing 9-4: Using a match expression to handle the Result variants that might be returned   Note that, like the Option enum, the Result enum and its variants have been brought into scope by the prelude,  so we don‚Äôt need to specify Result:: before the Ok and Err variants in the match arms.   Here we tell Rust that when the result is Ok, return the inner file value out of the Ok variant,  and we then assign that file handle value to the variable f. After the match, we can use the file handle for reading or writing.   The other arm of the match handles the case where we get an Err value from File::open.  In this example, we‚Äôve chosen to call the panic! macro.  If there‚Äôs no file named hello.txt in our current directory and we run this code, we‚Äôll see the following output from the panic! macro:   thread 'main' panicked at 'Problem opening the file: Error { repr: Os { code: 2, message: \"No such file or directory\" } }', src/main.rs:9:12  As usual, this output tells us exactly what has gone wrong.   Matching on Different Errors  The code in Listing 9-4 will panic! no matter why File::open failed.  What we want to do instead is take different actions for different failure reasons:  if File::open failed because the file doesn‚Äôt exist, we want to create the file and return the handle to the new file.  If File::open failed for any other reason‚Äîfor example, because we didn‚Äôt have permission to open the file‚Äîwe still want the code to panic! in the same way as it did in Listing 9-4.  Look at Listing 9-5, which adds an inner match expression.   use std::fs::File; use std::io::ErrorKind;  fn main() {     let f = File::open(\"hello.txt\");      let f = match f {         Ok(file) =&gt; file,         Err(error) =&gt; match error.kind() {             ErrorKind::NotFound =&gt; match File::create(\"hello.txt\") {                 Ok(fc) =&gt; fc,                 Err(e) =&gt; panic!(\"Problem creating the file: {:?}\", e),             },             other_error =&gt; panic!(\"Problem opening the file: {:?}\", other_error),         },     }; }  Listing 9-5: Handling different kinds of errors in different ways   The type of the value that File::open returns inside the Err variant is io::Error, which is a struct provided by the standard library.  This struct has a method kind that we can call to get an io::ErrorKind value.  The enum io::ErrorKind is provided by the standard library and has variants representing the different kinds of errors that might result from an io operation. The variant we want to use is ErrorKind::NotFound, which indicates the file we‚Äôre trying to open doesn‚Äôt exist yet. So we match on f, but we also have an inner match on error.kind().   The condition we want to check in the inner match is whether the value returned by error.kind() is the NotFound variant of the ErrorKind enum. If it is, we try to create the file with File::create.  However, because File::create could also fail, we need a second arm in the inner match expression.  When the file can‚Äôt be created, a different error message is printed.  The second arm of the outer match stays the same, so the program panics on any error besides the missing file error.   That‚Äôs a lot of match! The match expression is very useful but also very much a primitive.  In Chapter 13, you‚Äôll learn about closures; the Result&lt;T, E&gt; type has many methods that accept a closure and are implemented using match expressions.  Using those methods will make your code more concise. A more seasoned Rustacean might write this code instead of Listing 9-5:   use std::fs::File; use std::io::ErrorKind;  fn main() {     let f = File::open(\"hello.txt\").unwrap_or_else(|error| {         if error.kind() == ErrorKind::NotFound {             File::create(\"hello.txt\").unwrap_or_else(|error| {                 panic!(\"Problem creating the file: {:?}\", error);             })         } else {             panic!(\"Problem opening the file: {:?}\", error);         }     }); }   Although this code has the same behavior as Listing 9-5, it doesn‚Äôt contain any match expressions and is cleaner to read.  Come back to this example after you‚Äôve read Chapter 13, and look up the unwrap_or_else method in the standard library documentation.  Many more of these methods can clean up huge nested match expressions when you‚Äôre dealing with errors.   Shortcuts for Panic on Error: unwrap and expect  Using match works well enough, but it can be a bit verbose and doesn‚Äôt always communicate intent well.  The Result&lt;T, E&gt; type has many helper methods defined on it to do various tasks.  One of those methods, called unwrap, is a shortcut method that is implemented just like the match expression we wrote in Listing 9-4.  If the Result value is the Ok variant, unwrap will return the value inside the Ok.  If the Result is the Err variant, unwrap will call the panic! macro for us. Here is an example of unwrap in action:  use std::fs::File;  fn main() {     let f = File::open(\"hello.txt\").unwrap(); }  If we run this code without a hello.txt file, we‚Äôll see an error message from the panic! call that the unwrap method makes:  thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: \"No such file or directory\" } }', src/libcore/result.rs:906:4   Another method, expect, which is similar to unwrap, lets us also choose the panic! error message.  Using expect instead of unwrap and providing good error messages can convey your intent and make tracking down the source of a panic easier.  The syntax of expect looks like this:  use std::fs::File;  fn main() {     let f = File::open(\"hello.txt\").expect(\"Failed to open hello.txt\"); }  We use expect in the same way as unwrap: to return the file handle or call the panic! macro.  The error message used by expect in its call to panic! will be the parameter that we pass to expect, rather than the default panic! message that unwrap uses.  Here‚Äôs what it looks like:   thread 'main' panicked at 'Failed to open hello.txt: Error { repr: Os { code: 2, message: \"No such file or directory\" } }', src/libcore/result.rs:906:4  Because this error message starts with the text we specified, Failed to open hello.txt, it will be easier to find where in the code this error message is coming from.  If we use unwrap in multiple places, it can take more time to figure out exactly which unwrap is causing the panic because all unwrap calls that panic print the same message.   Propagating Errors  When you‚Äôre writing a function whose implementation calls something that might fail, instead of handling the error within this function, you can return the error to the calling code so that it can decide what to do.  This is known as propagating the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.   For example, Listing 9-6 shows a function that reads a username from a file.  If the file doesn‚Äôt exist or can‚Äôt be read, this function will return those errors to the code that called this function.  use std::io; use std::io::Read; use std::fs::File;  fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {     let f = File::open(\"hello.txt\");      let mut f = match f {         Ok(file) =&gt; file,         Err(e) =&gt; return Err(e),     };      let mut s = String::new();      match f.read_to_string(&amp;mut s) {         Ok(_) =&gt; Ok(s),         Err(e) =&gt; Err(e),     } }  Listing 9-6: A function that returns errors to the calling code using match   This function can be written in a much shorter way, but we‚Äôre going to start by doing a lot of it manually in order to explore error handling; at the end, we‚Äôll show the shorter way.  Let‚Äôs look at the return type of the function first: Result&lt;String, io::Error&gt;.  This means the function is returning a value of the type Result&lt;T, E&gt; where the generic parameter T has been filled in with the concrete type String and the generic type E has been filled in with the concrete type io::Error.  If this function succeeds without any problems, the code that calls this function will receive an Ok value that holds a String‚Äîthe username that this function read from the file.  If this function encounters any problems, the code that calls this function will receive an Err value that holds an instance of io::Error that contains more information about what the problems were.  We chose io::Error as the return type of this function because that happens to be the type of the error value returned from both of the operations we‚Äôre calling in this function‚Äôs body that might fail: the File::open function and the read_to_string method.   The body of the function starts by calling the File::open function. Then we handle the Result value returned with a match similar to the match in Listing 9-4, only instead of calling panic! in the Err case, we return early from this function and pass the error value from File::open back to the calling code as this function‚Äôs error value. If File::open succeeds, we store the file handle in the variable f and continue.   Then we create a new String in variable s and call the read_to_string method on the file handle in f to read the contents of the file into s.  The read_to_string method also returns a Result because it might fail, even though File::open succeeded.  So we need another match to handle that Result: if read_to_string succeeds, then our function has succeeded, and we return the username from the file that‚Äôs now in s wrapped in an Ok.  If read_to_string fails, we return the error value in the same way that we returned the error value in the match that handled the return value of File::open.  However, we don‚Äôt need to explicitly say return, because this is the last expression in the function.   The code that calls this code will then handle getting either an Ok value that contains a username or an Err value that contains an io::Error.  We don‚Äôt know what the calling code will do with those values.  If the calling code gets an Err value, it could call panic! and crash the program, use a default username, or look up the username from somewhere other than a file, for example.  We don‚Äôt have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.   This pattern of propagating errors is so common in Rust that Rust provides the question mark operator ? to make this easier.   A Shortcut for Propagating Errors: the ? Operator  Listing 9-7 shows an implementation of read_username_from_file that has the same functionality as it had in Listing 9-6, but this implementation uses the ? operator.  use std::io; use std::io::Read; use std::fs::File;  fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {     let mut f = File::open(\"hello.txt\")?;     let mut s = String::new();     f.read_to_string(&amp;mut s)?;     Ok(s) }  Listing 9-7: A function that returns errors to the calling code using the ? operator   I don‚Äôt know about this section‚Ä¶ So confusing  The ? placed after a Result value is defined to work in almost the same way as the match expressions we defined to handle the Result values in Listing 9-6.  If the value of the Result is an Ok, the value inside the Ok will get returned from this expression, and the program will continue.  If the value is an Err, the Err will be returned from the whole function as if we had used the return keyword so the error value gets propagated to the calling code.   There is a difference between what the match expression from Listing 9-6 and the ? operator do: error values that have the ? operator called on them go through the from function, defined in the From trait in the standard library, which is used to convert errors from one type into another.  When the ? operator calls the from function, the error type received is converted into the error type defined in the return type of the current function.  This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons.  As long as each error type implements the from function to define how to convert itself to the returned error type, the ? operator takes care of the conversion automatically.   In the context of Listing 9-7, the ? at the end of the File::open call will return the value inside an Ok to the variable f.  If an error occurs, the ? operator will return early out of the whole function and give any Err value to the calling code.  The same thing applies to the ? at the end of the read_to_string call.   The ? operator eliminates a lot of boilerplate and makes this function‚Äôs implementation simpler.  We could even shorten this code further by chaining method calls immediately after the ?, as shown in Listing 9-8.  use std::io; use std::io::Read; use std::fs::File;  fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {     let mut s = String::new();      File::open(\"hello.txt\")?.read_to_string(&amp;mut s)?;      Ok(s) }  Listing 9-8: Chaining method calls after the ? operator   We‚Äôve moved the creation of the new String in s to the beginning of the function; that part hasn‚Äôt changed.  Instead of creating a variable f, we‚Äôve chained the call to read_to_string directly onto the result of File::open(\"hello.txt\")?.  We still have a ? at the end of the read_to_string call, and we still return an Ok value containing the username in s when both File::open and read_to_string succeed rather than returning errors.  The functionality is again the same as in Listing 9-6 and Listing 9-7; this is just a different, more ergonomic way to write it.   Speaking of different ways to write this function, Listing 9-9 shows that there‚Äôs a way to make this even shorter.  use std::io; use std::fs;  fn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {     fs::read_to_string(\"hello.txt\") }  Listing 9-9: Using fs::read_to_string instead of opening and then reading the file   Reading a file into a string is a fairly common operation, so Rust provides the convenient fs::read_to_string function that opens the file, creates a new String, reads the contents of the file, puts the contents into that String, and returns it. Of course, using fs::read_to_string doesn‚Äôt give us the opportunity to explain all the error handling, so we did it the longer way first.   The ? Operator Can Be Used in Functions That Return Result  The ? operator can be used in functions that have a return type of Result, because it is defined to work in the same way as the match expression we defined in Listing 9-6. The part of the match that requires a return type of Result is return Err(e), so the return type of the function can be a Result to be compatible with this return.   Let‚Äôs look at what happens if we use the ? operator in the main function, which you‚Äôll recall has a return type of ():  use std::fs::File;  fn main() {     let f = File::open(\"hello.txt\")?; }  When we compile this code, we get the following error message:   error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)  --&gt; src/main.rs:4:13   | 4 |     let f = File::open(\"hello.txt\")?;   |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a   function that returns `()`   |   = help: the trait `std::ops::Try` is not implemented for `()`   = note: required by `std::ops::Try::from_error`  This error points out that we‚Äôre only allowed to use the ? operator in a function that returns Result or Option or another type that implements std::ops::Try.  When you‚Äôre writing code in a function that doesn‚Äôt return one of these types, and you want to use ? when you call other functions that return Result&lt;T, E&gt;, you have two choices to fix this problem.  One technique is to change the return type of your function to be Result&lt;T, E&gt; if you have no restrictions preventing that.  The other technique is to use a match or one of the Result&lt;T, E&gt; methods to handle the Result&lt;T, E&gt; in whatever way is appropriate.   The main function is special, and there are restrictions on what its return type must be. One valid return type for main is (), and conveniently, another valid return type is Result&lt;T, E&gt;, as shown here:  use std::error::Error; use std::fs::File;  fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {     let f = File::open(\"hello.txt\")?;      Ok(()) }  The Box&lt;dyn Error&gt; type is called a trait object, which we‚Äôll talk about in the ‚ÄúUsing Trait Objects that Allow for Values of Different Types‚Äù section in Chapter 17.  For now, you can read Box&lt;dyn Error&gt; to mean ‚Äúany kind of error.‚Äù Using ? in a main function with this return type is allowed.   Now that we‚Äôve discussed the details of calling panic! or returning Result, let‚Äôs return to the topic of how to decide which is appropriate to use in which cases.   To panic! or Not to panic!  So how do you decide when you should call panic! and when you should return Result? When code panics, there‚Äôs no way to recover.  You could call panic! for any error situation, whether there‚Äôs a possible way to recover or not, but then you‚Äôre making the decision on behalf of the code calling your code that a situation is unrecoverable.  When you choose to return a Result value, you give the calling code options rather than making the decision for it.  The calling code could choose to attempt to recover in a way that‚Äôs appropriate for its situation, or it could decide that an Err value in this case is unrecoverable, so it can call panic! and turn your recoverable error into an unrecoverable one.  Therefore, returning Result is a good default choice when you‚Äôre defining a function that might fail.   In rare situations, it‚Äôs more appropriate to write code that panics instead of returning a Result.  Let‚Äôs explore why it‚Äôs appropriate to panic in examples, prototype code, and tests.  Then we‚Äôll discuss situations in which the compiler can‚Äôt tell that failure is impossible, but you as a human can.  The chapter will conclude with some general guidelines on how to decide whether to panic in library code.   Examples, Prototype Code, and Tests  When you‚Äôre writing an example to illustrate some concept, having robust error-handling code in the example as well can make the example less clear.  In examples, it‚Äôs understood that a call to a method like unwrap that could panic is meant as a placeholder for the way you‚Äôd want your application to handle errors, which can differ based on what the rest of your code is doing.   Similarly, the unwrap and expect methods are very handy when prototyping, before you‚Äôre ready to decide how to handle errors.  They leave clear markers in your code for when you‚Äôre ready to make your program more robust.   If a method call fails in a test, you‚Äôd want the whole test to fail, even if that method isn‚Äôt the functionality under test.  Because panic! is how a test is marked as a failure, calling unwrap or expect is exactly what should happen.   Cases in Which You Have More Information Than the Compiler  It would also be appropriate to call unwrap when you have some other logic that ensures the Result will have an Ok value, but the logic isn‚Äôt something the compiler understands.  You‚Äôll still have a Result value that you need to handle: whatever operation you‚Äôre calling still has the possibility of failing in general, even though it‚Äôs logically impossible in your particular situation.  If you can ensure by manually inspecting the code that you‚Äôll never have an Err variant, it‚Äôs perfectly acceptable to call unwrap. Here‚Äôs an example:   use std::net::IpAddr;  let home: IpAddr = \"127.0.0.1\".parse().unwrap();  We‚Äôre creating an IpAddr instance by parsing a hardcoded string.  We can see that 127.0.0.1 is a valid IP address, so it‚Äôs acceptable to use unwrap here.  However, having a hardcoded, valid string doesn‚Äôt change the return type of the parse method: we still get a Result value, and the compiler will still make us handle the Result as if the Err variant is a possibility because the compiler isn‚Äôt smart enough to see that this string is always a valid IP address.  If the IP address string came from a user rather than being hardcoded into the program and therefore did have a possibility of failure, we‚Äôd definitely want to handle the Result in a more robust way instead.   Guidelines for Error Handling  It‚Äôs advisable to have your code panic when it‚Äôs possible that your code could end up in a bad state.  In this context, a bad state is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code‚Äîplus one or more of the following:      The bad state is not something that‚Äôs expected to happen occasionally.   Your code after this point needs to rely on not being in this bad state.   There‚Äôs not a good way to encode this information in the types you use.   If someone calls your code and passes in values that don‚Äôt make sense, the best choice might be to call panic! and alert the person using your library to the bug in their code so they can fix it during development. Similarly, panic!is often appropriate if you‚Äôre calling external code that is out of your control and it returns an invalid state that you have no way of fixing.   However, when failure is expected, it‚Äôs more appropriate to return a Result than to make a panic! call.  Examples include a parser being given malformed data or an HTTP request returning a status that indicates you have hit a rate limit.  In these cases, returning a Result indicates that failure is an expected possibility that the calling code must decide how to handle.   When your code performs operations on values, your code should verify the values are valid first and panic if the values aren‚Äôt valid.  This is mostly for safety reasons: attempting to operate on invalid data can expose your code to vulnerabilities.  This is the main reason the standard library will call panic! if you attempt an out-of-bounds memory access: trying to access memory that doesn‚Äôt belong to the current data structure is a common security problem.  Functions often have contracts: their behavior is only guaranteed if the inputs meet particular requirements.  Panicking when the contract is violated makes sense because a contract violation always indicates a caller-side bug and it‚Äôs not a kind of error you want the calling code to have to explicitly handle.  In fact, there‚Äôs no reasonable way for calling code to recover; the calling programmers need to fix the code.  Contracts for a function, especially when a violation will cause a panic, should be explained in the API documentation for the function.   However, having lots of error checks in all of your functions would be verbose and annoying.  Fortunately, you can use Rust‚Äôs type system (and thus the type checking the compiler does) to do many of the checks for you.  If your function has a particular type as a parameter, you can proceed with your code‚Äôs logic knowing that the compiler has already ensured you have a valid value.  For example, if you have a type rather than an Option, your program expects to have something rather than nothing.  Your code then doesn‚Äôt have to handle two cases for the Some and None variants: it will only have one case for definitely having a value.  Code trying to pass nothing to your function won‚Äôt even compile, so your function doesn‚Äôt have to check for that case at runtime.  Another example is using an unsigned integer type such as u32, which ensures the parameter is never negative.   Creating Custom Types for Validation  Let‚Äôs take the idea of using Rust‚Äôs type system to ensure we have a valid value one step further and look at creating a custom type for validation.  Recall the guessing game in Chapter 2 in which our code asked the user to guess a number between 1 and 100.  We never validated that the user‚Äôs guess was between those numbers before checking it against our secret number; we only validated that the guess was positive.  In this case, the consequences were not very dire: our output of ‚ÄúToo high‚Äù or ‚ÄúToo low‚Äù would still be correct.  But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when a user guesses a number that‚Äôs out of range versus when a user types, for example, letters instead.   One way to do this would be to parse the guess as an i32 instead of only a u32 to allow potentially negative numbers, and then add a check for the number being in range, like so:  loop {     // --snip--      let guess: i32 = match guess.trim().parse() {         Ok(num) =&gt; num,         Err(_) =&gt; continue,     };      if guess &lt; 1 || guess &gt; 100 {         println!(\"The secret number will be between 1 and 100.\");         continue;     }      match guess.cmp(&amp;secret_number) {     // --snip-- }  The if expression checks whether our value is out of range, tells the user about the problem, and calls continue to start the next iteration of the loop and ask for another guess. After the if expression, we can proceed with the comparisons between guess and the secret number knowing that guess is between 1 and 100.   However, this is not an ideal solution: if it was absolutely critical that the program only operated on values between 1 and 100, and it had many functions with this requirement, having a check like this in every function would be tedious (and might impact performance).   Instead, we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere. That way, it‚Äôs safe for functions to use the new type in their signatures and confidently use the values they receive. Listing 9-10 shows one way to define a Guess type that will only create an instance of 1 if the new function receives a value between 1 and 100.   pub struct Guess {     value: i32, }  impl Guess {     pub fn new(value: i32) -&gt; Guess {         if value &lt; 1 || value &gt; 100 {             panic!(\"Guess value must be between 1 and 100, got {}.\", value);         }          Guess {             value         }     }      pub fn value(&amp;self) -&gt; i32 {         self.value     } }  Listing 9-10: A Guess type that will only continue with values between 1 and 100   First, we define a struct named Guess that has a field named value that holds an i32. This is where the number will be stored.   Then we implement an associated function named new on Guess that creates instances of Guess values. T he new function is defined to have one parameter named value of type i32 and to return a Guess.  The code in the body of the new function tests value to make sure it‚Äôs between 1 and 100.  If value doesn‚Äôt pass this test, we make a panic! call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a Guess with a value outside this range would violate the contract that Guess::new is relying on.  The conditions in which Guess::new might panic should be discussed in its public-facing API documentation;  we‚Äôll cover documentation conventions indicating the possibility of a panic! in the API documentation that you create in Chapter 14.  If value does pass the test, we create a new Guess with its value field set to the value parameter and return the Guess.   Next, we implement a method named value that borrows self, doesn‚Äôt have any other parameters, and returns an i32.  This kind of method is sometimes called a getter, because its purpose is to get some data from its fields and return it.  This public method is necessary because the value field of the Guess struct is private.  It‚Äôs important that the value field be private so code using the Guess struct is not allowed to set value directly: code outside the module must use the Guess::new function to create an instance of Guess, thereby ensuring there‚Äôs no way for a Guess to have a value that hasn‚Äôt been checked by the conditions in the Guess::new function.   A function that has a parameter or returns only numbers between 1 and 100 could then declare in its signature that it takes or returns a Guess rather than an i32 and wouldn‚Äôt need to do any additional checks in its body.   Summary  Rust‚Äôs error handling features are designed to help you write more robust code.  The panic! macro signals that your program is in a state it can‚Äôt handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values.  The Result enum uses Rust‚Äôs type system to indicate that operations might fail in a way that your code could recover from.  You can use Result to tell code that calls your code that it needs to handle potential success or failure as well.  Using panic! and Result in the appropriate situations will make your code more reliable in the face of inevitable problems.  ","categories": ["RUST Language"],
        "tags": ["Error","Handler","Panic"],
        "url": "https://jjungs-lee.github.io//rust%20language/9.Error-Handling/",
        "teaser":null},{
        "title": "RUST : 10. Generic Types, Traits, and Lifetimes",
        "excerpt":"Generic Types, Traits, and Lifetimes  Every programming language has tools for effectively handling the duplication of concepts.  In Rust, one such tool is generics. Generics are abstract stand-ins for concrete types or other properties.  When we‚Äôre writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.   Similar to the way a function takes parameters with unknown values to run the same code on multiple concrete values,  functions can take parameters of some generic type instead of a concrete type, like i32 or String.  In fact, we‚Äôve already used generics in Chapter 6 with Option&lt;T&gt;, Chapter 8 with Vec&lt;T&gt; and HashMap&lt;K, V&gt;, and Chapter 9 with Result&lt;T, E&gt;.  In this chapter, you‚Äôll explore how to define your own types, functions, and methods with generics!   First, we‚Äôll review how to extract a function to reduce code duplication. Next, we‚Äôll use the same technique to make a generic function from two functions that differ only in the types of their parameters. We‚Äôll also explain how to use generic types in struct and enum definitions.   Then you‚Äôll learn how to use traits to define behavior in a generic way.  You can combine traits with generic types to constrain a generic type to only those types that have a particular behavior, as opposed to just any type.   Finally, we‚Äôll discuss lifetimes, a variety of generics that give the compiler information about how references relate to each other.  Lifetimes allow us to borrow values in many situations while still enabling the compiler to check that the references are valid.   Removing Duplication by Extracting a Function  Before diving into generics syntax, let‚Äôs first look at how to remove duplication that doesn‚Äôt involve generic types by extracting a function.  Then we‚Äôll apply this technique to extract a generic function! In the same way that you recognize duplicated code to extract into a function, you‚Äôll start to recognize duplicated code that can use generics.   Consider a short program that finds the largest number in a list, as shown in Listing 10-1.  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let mut largest = number_list[0];      for number in number_list {         if number &gt; largest {             largest = number;         }     }      println!(\"The largest number is {}\", largest); }  Listing 10-1: Code to find the largest number in a list of numbers  This code stores a list of integers in the variable number_list and places the first number in the list in a variable named largest.  Then it iterates through all the numbers in the list, and if the current number is greater than the number stored in largest, it replaces the number in that variable.  However, if the current number is less than or equal to the largest number seen so far, the variable doesn‚Äôt change, and the code moves on to the next number in the list.  After considering all the numbers in the list, largest should hold the largest number, which in this case is 100.   To find the largest number in two different lists of numbers, we can duplicate the code in Listing 10-1 and use the same logic at two different places in the program, as shown in Listing 10-2.  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let mut largest = number_list[0];      for number in number_list {         if number &gt; largest {             largest = number;         }     }      println!(\"The largest number is {}\", largest);      let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];      let mut largest = number_list[0];      for number in number_list {         if number &gt; largest {             largest = number;         }     }      println!(\"The largest number is {}\", largest);  Listing 10-2: Code to find the largest number in two lists of numbers  Although this code works, duplicating code is tedious and error prone.  We also have to update the code in multiple places when we want to change it.   To eliminate this duplication, we can create an abstraction by defining a function that operates on any list of integers given to it in a parameter.  This solution makes our code clearer and lets us express the concept of finding the largest number in a list abstractly.   In Listing 10-3, we extracted the code that finds the largest number into a function named largest.  Unlike the code in Listing 10-1, which can find the largest number in only one particular list, this program can find the largest number in two different lists.  fn largest(list: &amp;[i32]) -&gt; i32 {     let mut largest = list[0];      for &amp;item in list {         if item &gt; largest {             largest = item;         }     }      largest }  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let result = largest(&amp;number_list);     println!(\"The largest number is {}\", result);      let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];      let result = largest(&amp;number_list);     println!(\"The largest number is {}\", result); }  Listing 10-3: Abstracted code to find the largest number in two lists  The largest function has a parameter called list,  which represents any concrete slice of i32 values that we might pass into the function. As a result, when we call the function, the code runs on the specific values that we pass in.   In sum, here are the steps we took to change the code from Listing 10-2 to Listing 10-3:      Identify duplicate code.   Extract the duplicate code into the body of the function and specify the inputs and return values of that code in the function signature.   Update the two instances of duplicated code to call the function instead.   Next, we‚Äôll use these same steps with generics to reduce code duplication in different ways.  In the same way that the function body can operate on an abstract list instead of specific values,  generics allow code to operate on abstract types.   Generic Data Types  We can use generics to create definitions for items like function signatures or structs,  which we can then use with many different concrete data types.  Let‚Äôs first look at how to define functions, structs, enums, and methods using generics.  Then we‚Äôll discuss how generics affect code performance.   In Function Definitions  When defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value.  Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.   Continuing with our largest function, Listing 10-4 shows two functions that both find the largest value in a slice.  fn largest_i32(list: &amp;[i32]) -&gt; i32 {     let mut largest = list[0];      for &amp;item in list.iter() {         if item &gt; largest {             largest = item;         }     }      largest }  fn largest_char(list: &amp;[char]) -&gt; char {     let mut largest = list[0];      for &amp;item in list.iter() {         if item &gt; largest {             largest = item;         }     }      largest }  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let result = largest_i32(&amp;number_list);     println!(\"The largest number is {}\", result);      let char_list = vec!['y', 'm', 'a', 'q'];      let result = largest_char(&amp;char_list);     println!(\"The largest char is {}\", result); }  Listing 10-4: Two functions that differ only in their names and the types in their signatures   The largest_i32 function is the one we extracted in Listing 10-3 that finds the largest i32 in a slice.  The largest_char function finds the largest char in a slice.  The function bodies have the same code, so let‚Äôs eliminate the duplication by introducing a generic type parameter in a single function.   To parameterize the types in the new function we‚Äôll define, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name.  But we‚Äôll use T because, by convention, parameter names in Rust are short, often just a letter, and Rust‚Äôs type-naming convention is CamelCase. Short for ‚Äútype,‚Äù T is the default choice of most Rust programmers.   When we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means.  Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it.  To define the generic largest function, place type name declarations inside angle brackets, &lt;&gt;, between the name of the function and the parameter list, like this:  fn largest&lt;T&gt;(list: &amp;[T]) -&gt; T {   We read this definition as: the function largest is generic over some type T.  This function has one parameter named list, which is a slice of values of type T.  The largest function will return a value of the same type T.   Listing 10-5 shows the combined largest function definition using the generic data type in its signature.  The listing also shows how we can call the function with either a slice of i32 values or char values.  Note that this code won‚Äôt compile yet, but we‚Äôll fix it later in this chapter.  fn largest&lt;T&gt;(list: &amp;[T]) -&gt; T {     let mut largest = list[0];      for &amp;item in list.iter() {         if item &gt; largest {             largest = item;         }     }      largest }  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let result = largest(&amp;number_list);     println!(\"The largest number is {}\", result);      let char_list = vec!['y', 'm', 'a', 'q'];      let result = largest(&amp;char_list);     println!(\"The largest char is {}\", result); }  Listing 10-5: A definition of the largest function that uses generic type parameters but doesn‚Äôt compile yet   If we compile this code right now, we‚Äôll get this error:   error[E0369]: binary operation `&gt;` cannot be applied to type `T`  --&gt; src/main.rs:5:12   | 5 |         if item &gt; largest {   |            ^^^^^^^^^^^^^^   |   = note: an implementation of `std::cmp::PartialOrd`            might be missing for `T`  The note mentions std::cmp::PartialOrd, which is a trait.  We‚Äôll talk about traits in the next section.  For now, this error states that the body of largest won‚Äôt work for all possible types that T could be.  Because we want to compare values of type T in the body, we can only use types whose values can be ordered.  To enable comparisons, the standard library has the std::cmp::PartialOrd trait that you can implement on types (see Appendix C for more on this trait).  You‚Äôll learn how to specify that a generic type has a particular trait in the ‚ÄúTraits as Parameters‚Äù section, but let‚Äôs first explore other ways of using generic type parameters.   In Struct Definitions  We can also define structs to use a generic type parameter in one or more fields using the &lt;&gt; syntax.  Listing 10-6 shows how to define a Point&lt;T&gt; struct to hold x and y coordinate values of any type.  struct Point&lt;T&gt; {     x: T,     y: T, }  fn main() {     let integer = Point { x: 5, y: 10 };     let float = Point { x: 1.0, y: 4.0 }; }  ####  Listing 10-6: A Point struct that holds x and y values of type T   The syntax for using generics in struct definitions is similar to that used in function definitions. First, we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we can use the generic type in the struct definition where we would otherwise specify concrete data types.   Note that because we‚Äôve used only one generic type to define Point, this definition says that the Point struct is generic over some type T, and the fields x and y are both that same type, whatever that type may be. If we create an instance of a Point that has values of different types, as in Listing 10-7, our code won‚Äôt compile.  struct Point&lt;T&gt; {     x: T,     y: T, }  fn main() {     let wont_work = Point { x: 5, y: 4.0 }; }  Listing 10-7: The fields x and y must be the same type because both have the same generic data type T.  In this example, when we assign the integer value 5 to x, we let the compiler know that the generic type T will be an integer for this instance of Point&lt;T&gt;. Then when we specify 4.0 for y, which we‚Äôve defined to have the same type as x, we‚Äôll get a type mismatch error like this:  error[E0308]: mismatched types  --&gt; src/main.rs:7:38   | 7 |     let wont_work = Point { x: 5, y: 4.0 };   |                                      ^^^ expected integer, found floating-point number   |   = note: expected type `{integer}`              found type `{float}`  To define a Point struct where x and y are both generics but could have different types, we can use multiple generic type parameters.  For example, in Listing 10-8, we can change the definition of Point to be generic over types T and U where x is of type T and y is of type U.  struct Point&lt;T, U&gt; {     x: T,     y: U, }  fn main() {     let both_integer = Point { x: 5, y: 10 };     let both_float = Point { x: 1.0, y: 4.0 };     let integer_and_float = Point { x: 5, y: 4.0 }; }  Listing 10-8: A Point&lt;T, U&gt; generic over two types so that x and y can be values of different types  Now all the instances of Point shown are allowed! You can use as many generic type parameters in a definition as you want, but using more than a few makes your code hard to read. When you need lots of generic types in your code, it could indicate that your code needs restructuring into smaller pieces.   In Enum Definitions  As we did with structs, we can define enums to hold generic data types in their variants.  Let‚Äôs take another look at the Option&lt;T&gt; enum that the standard library provides, which we used in Chapter 6:  enum Option&lt;T&gt; {     Some(T),     None, }  This definition should now make more sense to you.  As you can see, Option&lt;T&gt; is an enum that is generic over type T and has two variants: Some, which holds one value of type T, and a None variant that doesn‚Äôt hold any value.  By using the Option&lt;T&gt; enum, we can express the abstract concept of having an optional value, and because Option&lt;T&gt; is generic, we can use this abstraction no matter what the type of the optional value is.   Enums can use multiple generic types as well.  The definition of the Result enum that we used in Chapter 9 is one example:  enum Result&lt;T, E&gt; {     Ok(T),     Err(E), }  The Result enum is generic over two types, T and E, and has two variants: Ok, which holds a value of type T, and Err, which holds a value of type E.  This definition makes it convenient to use the Result enum anywhere we have an operation that might succeed (return a value of some type T) or fail (return an error of some type E).  In fact, this is what we used to open a file in Listing 9-3, where T was filled in with the type std::fs::File when the file was opened successfully and E was filled in with the type std::io::Error when there were problems opening the file.   When you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.   In Method Definitions  We can implement methods on structs and enums (as we did in Chapter 5) and use generic types in their definitions, too.  Listing 10-9 shows the Point&lt;T&gt; struct we defined in Listing 10-6 with a method named x implemented on it.  struct Point&lt;T&gt; {     x: T,     y: T, }  impl&lt;T&gt; Point&lt;T&gt; {     fn x(&amp;self) -&gt; &amp;T {         &amp;self.x     } }  fn main() {     let p = Point { x: 5, y: 10 };      println!(\"p.x = {}\", p.x()); }  Listing 10-9: Implementing a method named x on the Point struct that will return a reference to the x field of type T   Here, we‚Äôve defined a method named x on Point&lt;T&gt; that returns a reference to the data in the field x.   Note that we have to declare T just after impl so we can use it to specify that we‚Äôre implementing methods on the type Point&lt;T&gt;.  By declaring T as a generic type after impl, Rust can identify that the type in the angle brackets in Point is a generic type rather than a concrete type.   We could, for example, implement methods only on Point&lt;f32&gt; instances rather than on Point&lt;T&gt; instances with any generic type.  In Listing 10-10 we use the concrete type f32, meaning we don‚Äôt declare any types after impl.   impl Point&lt;f32&gt; {     fn distance_from_origin(&amp;self) -&gt; f32 {         (self.x.powi(2) + self.y.powi(2)).sqrt()     } }  Listing 10-10: An impl block that only applies to a struct with a particular concrete type for the generic type parameter T  This code means the type Point&lt;f32&gt; will have a method named distance_from_origin and other instances of Point&lt;T&gt; where T is not of type f32 will not have this method defined.  The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating point types.   Generic type parameters in a struct definition aren‚Äôt always the same as those you use in that struct‚Äôs method signatures.  For example, Listing 10-11 defines the method mixup on the Point&lt;T, U&gt; struct from Listing 10-8.  The method takes another Point as a parameter, which might have different types from the self Point we‚Äôre calling mixup on.  The method creates a new Point instance with the x value from the self Point (of type T) and the y value from the passed-in Point (of type W).  struct Point&lt;T, U&gt; {     x: T,     y: U, }  impl&lt;T, U&gt; Point&lt;T, U&gt; {     fn mixup&lt;V, W&gt;(self, other: Point&lt;V, W&gt;) -&gt; Point&lt;T, W&gt; {         Point {             x: self.x,             y: other.y,         }     } }  fn main() {     let p1 = Point { x: 5, y: 10.4 };     let p2 = Point { x: \"Hello\", y: 'c'};      let p3 = p1.mixup(p2);      println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y); }  Listing 10-11: A method that uses different generic types from its struct‚Äôs definition  In main, we‚Äôve defined a Point that has an i32 for x (with value 5) and an f64 for y (with value 10.4).  The p2 variable is a Point struct that has a string slice for x (with value \"Hello\") and a char for y (with value c).  Calling mixup on p1 with the argument p2 gives us p3, which will have an i32 for x, because x came from p1.  The p3 variable will have a char for y, because y came from p2. The println! macro call will print p3.x = 5, p3.y = c.   The purpose of this example is to demonstrate a situation in which some generic parameters are declared with impl and some are declared with the method definition.  Here, the generic parameters T and U are declared after impl, because they go with the struct definition.  The generic parameters V and W are declared after fn mixup, because they‚Äôre only relevant to the method.   Performance of Code Using Generics  You might be wondering whether there is a runtime cost when you‚Äôre using generic type parameters.  The good news is that Rust implements generics in such a way that your code doesn‚Äôt run any slower using generic types than it would with concrete types.   Rust accomplishes this by performing monomorphization of the code that is using generics at compile time.  Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled.   In this process, the compiler does the opposite of the steps we used to create the generic function in Listing 10-5:  the compiler looks at all the places where generic code is called and generates code for the concrete types the generic code is called with.   Let‚Äôs look at how this works with an example that uses the standard library‚Äôs Option&lt;T&gt; enum:  let integer = Some(5); let float = Some(5.0);  When Rust compiles this code, it performs monomorphization.  During that process, the compiler reads the values that have been used in Option&lt;T&gt; instances and identifies two kinds of Option&lt;T&gt;: one is i32 and the other is f64.  As such, it expands the generic definition of Option&lt;T&gt; into Option_i32 and Option_f64, thereby replacing the generic definition with the specific ones.   The monomorphized version of the code looks like the following. The generic Option&lt;T&gt; is replaced with the specific definitions created by the compiler:  enum Option_i32 {     Some(i32),     None, }  enum Option_f64 {     Some(f64),     None, }  fn main() {     let integer = Option_i32::Some(5);     let float = Option_f64::Some(5.0); }  Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics.  When the code runs, it performs just as it would if we had duplicated each definition by hand.  The process of monomorphization makes Rust‚Äôs generics extremely efficient at runtime.   Traits: Defining Shared Behavior  A trait tells the Rust compiler about functionality a particular type has and can share with other types.  We can use traits to define shared behavior in an abstract way.  We can use trait bounds to specify that a generic can be any type that has certain behavior.   Note: Traits are similar to a feature often called interfaces in other languages, although with some differences.   Defining a Trait  A type‚Äôs behavior consists of the methods we can call on that type.  Different types share the same behavior if we can call the same methods on all of those types.  Trait definitions are a way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.   For example, let‚Äôs say we have multiple structs that hold various kinds and amounts of text: a NewsArticle struct that holds a news story filed in a particular location and a Tweet that can have at most 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.   We want to make a media aggregator library that can display summaries of data that might be stored in a NewsArticle or Tweet instance.  To do this, we need a summary from each type, and we need to request that summary by calling a summarize method on an instance.  Listing 10-12 shows the definition of a Summary trait that expresses this behavior.   pub trait Summary {     fn summarize(&amp;self) -&gt; String; }  Listing 10-12: A Summary trait that consists of the behavior provided by a summarize method  Here, we declare a trait using the trait keyword and then the trait‚Äôs name, which is Summary in this case.  Inside the curly brackets, we declare the method signatures that describe the behaviors of the types that implement this trait, which in this case is fn summarize(&amp;self) -&gt; String.   After the method signature, instead of providing an implementation within curly brackets, we use a semicolon.  Each type implementing this trait must provide its own custom behavior for the body of the method.  The compiler will enforce that any type that has the Summary trait will have the method summarize defined with this signature exactly.   A trait can have multiple methods in its body: the method signatures are listed one per line and each line ends in a semicolon.   Implementing a Trait on a Type  Now that we‚Äôve defined the desired behavior using the Summary trait, we can implement it on the types in our media aggregator.  Listing 10-13 shows an implementation of the Summary trait on the NewsArticle struct that uses the headline, the author, and the location to create the return value of summarize.  For the Tweet struct, we define summarize as the username followed by the entire text of the tweet, assuming that tweet content is already limited to 280 characters.  pub struct NewsArticle {     pub headline: String,     pub location: String,     pub author: String,     pub content: String, }  impl Summary for NewsArticle {     fn summarize(&amp;self) -&gt; String {         format!(\"{}, by {} ({})\", self.headline, self.author, self.location)     } }  pub struct Tweet {     pub username: String,     pub content: String,     pub reply: bool,     pub retweet: bool, }  impl Summary for Tweet {     fn summarize(&amp;self) -&gt; String {         format!(\"{}: {}\", self.username, self.content)     } }  Listing 10-13: Implementing the Summary trait on the NewsArticle and Tweet types   Implementing a trait on a type is similar to implementing regular methods.  The difference is that after impl, we put the trait name that we want to implement, then use the for keyword, and then specify the name of the type we want to implement the trait for.  Within the impl block, we put the method signatures that the trait definition has defined.  Instead of adding a semicolon after each signature, we use curly brackets and fill in the method body with the specific behavior that we want the methods of the trait to have for the particular type.   After implementing the trait, we can call the methods on instances of NewsArticle and Tweet in the same way we call regular methods, like this:  let tweet = Tweet {     username: String::from(\"horse_ebooks\"),     content: String::from(\"of course, as you probably already know, people\"),     reply: false,     retweet: false, };  println!(\"1 new tweet: {}\", tweet.summarize());  This code prints 1 new tweet: horse_ebooks: of course, as you probably already know, people.   Note that because we defined the Summary trait and the NewsArticle and Tweet types in the same lib.rs in Listing 10-13, they‚Äôre all in the same scope.  Let‚Äôs say this lib.rs is for a crate we‚Äôve called aggregator and someone else wants to use our crate‚Äôs functionality to implement the Summary trait on a struct defined within their library‚Äôs scope.  They would need to bring the trait into their scope first.  They would do so by specifying use aggregator::Summary;, which then would enable them to implement Summary for their type.  extern crate aggregator;  use aggregator::Summary;  struct WeatherForecast {     high_temp: f64,     low_temp: f64,     chance_of_precipitation: f64, }  impl Summary for WeatherForecast {     fn summarize(&amp;self) -&gt; String {         format!(\"The high will be {}, and the low will be {}. The chance of         precipitation is {}%.\", self.high_temp, self.low_temp,         self.chance_of_precipitation)     } }  The Summary trait would also need to be a public trait for another crate to implement it, which it is because we put the pub keyword before trait in Listing 10-12.   One restriction to note with trait implementations is that we can implement a trait on a type only if either the trait or the type is local to our crate.  For example, we can implement standard library traits like Display on a custom type like Tweet as part of our aggregator crate functionality, because the type Tweet is local to our aggregator crate.  We can also implement Summary on Vec&lt;T&gt; in our aggregator crate, because the trait Summary is local to our aggregator crate.   But we can‚Äôt implement external traits on external types.  For example, we can‚Äôt implement the Display trait on Vec&lt;T&gt; within our aggregator crate, because Display and Vec&lt;T&gt; are defined in the standard library and aren‚Äôt local to our aggregator crate.  This restriction is part of a property of programs called coherence, and more specifically the orphan rule, so named because the parent type is not present.  This rule ensures that other people‚Äôs code can‚Äôt break your code and vice versa.  Without the rule, two crates could implement the same trait for the same type, and Rust wouldn‚Äôt know which implementation to use.   Default Implementations  Sometimes it‚Äôs useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type.  Then, as we implement the trait on a particular type, we can keep or override each method‚Äôs default behavior.   Listing 10-14 shows how to specify a default string for the summarize method of the Summary trait instead of only defining the method signature, as we did in Listing 10-12.  pub trait Summary {     fn summarize(&amp;self) -&gt; String {         String::from(\"(Read more...)\")     } }  Listing 10-14: Definition of a Summary trait with a default implementation of the summarize method  To use a default implementation to summarize instances of NewsArticle instead of defining a custom implementation, we specify an empty impl block with impl Summary for NewsArticle {}.   Even though we‚Äôre no longer defining the summarize method on NewsArticle directly,  we‚Äôve provided a default implementation and specified that NewsArticle implements the Summary trait.  As a result, we can still call the summarize method on an instance of NewsArticle, like this:  let article = NewsArticle {     headline: String::from(\"Penguins win the Stanley Cup Championship!\"),     location: String::from(\"Pittsburgh, PA, USA\"),     author: String::from(\"Iceburgh\"),     content: String::from(\"The Pittsburgh Penguins once again are the best     hockey team in the NHL.\"), };  println!(\"New article available! {}\", article.summarize());  This code prints New article available! (Read more...).   Creating a default implementation for summarize doesn‚Äôt require us to change anything about the implementation of Summary on Tweet in Listing 10-13.  The reason is that the syntax for overriding a default implementation is the same as the syntax for implementing a trait method that doesn‚Äôt have a default implementation.   Default implementations can call other methods in the same trait, even if those other methods don‚Äôt have a default implementation.  In this way, a trait can provide a lot of useful functionality and only require implementors to specify a small part of it.  For example, we could define the Summary trait to have a summarize_author method whose implementation is required, and then define a summarize method that has a default implementation that calls the summarize_author method:  pub trait Summary {     fn summarize_author(&amp;self) -&gt; String;      fn summarize(&amp;self) -&gt; String {         format!(\"(Read more from {}...)\", self.summarize_author())     } }  To use this version of Summary, we only need to define summarize_author when we implement the trait on a type:  impl Summary for Tweet {     fn summarize_author(&amp;self) -&gt; String {         format!(\"@{}\", self.username)     } }  After we define summarize_author, we can call summarize on instances of the Tweet struct, and the default implementation of summarize will call the definition of summarize_author that we‚Äôve provided.  Because we‚Äôve implemented summarize_author, the Summary trait has given us the behavior of the summarize` method without requiring us to write any more code.  let tweet = Tweet {     username: String::from(\"horse_ebooks\"),     content: String::from(\"of course, as you probably already know, people\"),     reply: false,     retweet: false, };  println!(\"1 new tweet: {}\", tweet.summarize());  This code prints 1 new tweet: (Read more from @horse_ebooks...). Note that it isn‚Äôt possible to call the default implementation from an overriding implementation of that same method.   Traits as Parameters  Now that you know how to define and implement traits, we can explore how to use traits to define functions that accept many different types.   For example, in Listing 10-13, we implemented the Summary trait on the NewsArticle and Tweet types.  We can define a notify function that calls the summarize method on its item parameter, which is of some type that implements the Summary trait.  To do this, we can use the impl Trait syntax, like this:   pub fn notify(item: impl Summary) {     println!(\"Breaking news! {}\", item.summarize()); }  Instead of a concrete type for the item parameter, we specify the impl keyword and the trait name.  This parameter accepts any type that implements the specified trait.  In the body of notify, we can call any methods on item that come from the Summary trait, such as summarize.  We can call notify and pass in any instance of NewsArticle or Tweet.  Code that calls the function with any other type, such as a String or an i32, won‚Äôt compile because those types don‚Äôt implement Summary.   Trait Bound Syntax  The impl Trait syntax works for straightforward cases but is actually syntax sugar for a longer form, which is called a trait bound; it looks like this:  pub fn notify&lt;T: Summary&gt;(item: T) {     println!(\"Breaking news! {}\", item.summarize()); }  This longer form is equivalent to the example in the previous section but is more verbose.  We place trait bounds with the declaration of the generic type parameter after a colon and inside angle brackets.   The impl Trait syntax is convenient and makes for more concise code in simple cases.  The trait bound syntax can express more complexity in other cases.  For example, we can have two parameters that implement Summary. Using the impl Trait syntax looks like this:  pub fn notify(item1: impl Summary, item2: impl Summary) {  If we wanted this function to allow item1 and item2 to have different types, using impl Trait would be appropriate (as long as both types implement Summary).  If we wanted to force both parameters to have the same type, that‚Äôs only possible to express using a trait bound, like this:  pub fn notify&lt;T: Summary&gt;(item1: T, item2: T) {  The generic type T specified as the type of the item1 and item2 parameters constrains the function such that the concrete type of the value passed as an argument for item1 and item2 must be the same.   Specifying Multiple Trait Bounds with the + Syntax  We can also specify more than one trait bound.  Say we wanted notify to use display formatting on item as well as the summarize method:  we specify in the notify definition that item must implement both Display and Summary.  We can do so using the + syntax:  pub fn notify(item: impl Summary + Display) {  The + syntax is also valid with trait bounds on generic types:  pub fn notify&lt;T: Summary + Display&gt;(item: T) {  With the two trait bounds specified, the body of notify can call summarize and use {} to format item.   Clearer Trait Bounds with where Clauses  Using too many trait bounds has its downsides.  Each generic has its own trait bounds, so functions with multiple generic type parameters can contain lots of trait bound information between the function‚Äôs name and its parameter list, making the function signature hard to read.  For this reason, Rust has alternate syntax for specifying trait bounds inside a where clause after the function signature.  So instead of writing this:  fn some_function&lt;T: Display + Clone, U: Clone + Debug&gt;(t: T, u: U) -&gt; i32 {  we can use a where clause, like this:  fn some_function&lt;T, U&gt;(t: T, u: U) -&gt; i32     where T: Display + Clone,           U: Clone + Debug {  This function‚Äôs signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.   Returning Types that Implement Traits  We can also use the impl Trait syntax in the return position to return a value of some type that implements a trait, as shown here:   fn returns_summarizable() -&gt; impl Summary {     Tweet {         username: String::from(\"horse_ebooks\"),         content: String::from(\"of course, as you probably already know, people\"),         reply: false,         retweet: false,     } }  By using impl Summary for the return type, we specify that the returns_summarizable function returns some type that implements the Summary trait without naming the concrete type.  In this case, returns_summarizable returns a Tweet, but the code calling this function doesn‚Äôt know that.   The ability to return a type that is only specified by the trait it implements is especially useful in the context of closures and iterators, which we cover in Chapter 13.  Closures and iterators create types that only the compiler knows or types that are very long to specify.  The impl Trait syntax lets you concisely specify that a function returns some type that implements the Iterator trait without needing to write out a very long type.   However, you can only use impl Trait if you‚Äôre returning a single type.  For example, this code that returns either a NewsArticle or a Tweet with the return type specified as impl Summary wouldn‚Äôt work:  fn returns_summarizable(switch: bool) -&gt; impl Summary {     if switch {         NewsArticle {             headline: String::from(\"Penguins win the Stanley Cup Championship!\"),             location: String::from(\"Pittsburgh, PA, USA\"),             author: String::from(\"Iceburgh\"),             content: String::from(\"The Pittsburgh Penguins once again are the best             hockey team in the NHL.\"),         }     } else {         Tweet {             username: String::from(\"horse_ebooks\"),             content: String::from(\"of course, as you probably already know, people\"),             reply: false,             retweet: false,         }     } }  Returning either a NewsArticle or a Tweet isn‚Äôt allowed due to restrictions around how the impl Trait syntax is implemented in the compiler.  We‚Äôll cover how to write a function with this behavior in the ‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù section of Chapter 17.   Fixing the largest Function with Trait Bounds  Now that you know how to specify the behavior you want to use using the generic type parameter‚Äôs bounds, let‚Äôs return to Listing 10-5 to fix the definition of the largest function that uses a generic type parameter!  Last time we tried to run that code, we received this error:  error[E0369]: binary operation `&gt;` cannot be applied to type `T`  --&gt; src/main.rs:5:12   | 5 |         if item &gt; largest {   |            ^^^^^^^^^^^^^^   |   = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`  In the body of largest we wanted to compare two values of type T using the greater than (&gt;) operator.  Because that operator is defined as a default method on the standard library trait std::cmp::PartialOrd, we need to specify PartialOrd in the trait bounds for T so the largest function can work on slices of any type that we can compare.  We don‚Äôt need to bring PartialOrd into scope because it‚Äôs in the prelude.  Change the signature of largest to look like this:  fn largest&lt;T: PartialOrd&gt;(list: &amp;[T]) -&gt; T {  This time when we compile the code, we get a different set of errors:  error[E0508]: cannot move out of type `[T]`, a non-copy slice  --&gt; src/main.rs:2:23   | 2 |     let mut largest = list[0];   |                       ^^^^^^^   |                       |   |                       cannot move out of here   |                       help: consider using a reference instead: `&amp;list[0]`  error[E0507]: cannot move out of borrowed content  --&gt; src/main.rs:4:9   | 4 |     for &amp;item in list.iter() {   |         ^----   |         ||   |         |hint: to prevent move, use `ref item` or `ref mut item`   |         cannot move out of borrowed content  The key line in this error is cannot move out of type [T], a non-copy slice.  With our non-generic versions of the largest function, we were only trying to find the largest i32 or char.  As discussed in the ‚ÄúStack-Only Data: Copy‚Äù section in Chapter 4, types like i32 and char that have a known size can be stored on the stack, so they implement the Copy trait.  But when we made the largest function generic, it became possible for the list parameter to have types in it that don‚Äôt implement the Copy trait.  Consequently, we wouldn‚Äôt be able to move the value out of list[0] and into the largest variable, resulting in this error.   To call this code with only those types that implement the Copy trait, we can add Copy to the trait bounds of T!  Listing 10-15 shows the complete code of a generic largest function that will compile as long as the types of the values in the slice that we pass into the function implement the PartialOrd and Copy traits, like i32 and char do.  fn largest&lt;T: PartialOrd + Copy&gt;(list: &amp;[T]) -&gt; T {     let mut largest = list[0];      for &amp;item in list.iter() {         if item &gt; largest {             largest = item;         }     }      largest }  fn main() {     let number_list = vec![34, 50, 25, 100, 65];      let result = largest(&amp;number_list);     println!(\"The largest number is {}\", result);      let char_list = vec!['y', 'm', 'a', 'q'];      let result = largest(&amp;char_list);     println!(\"The largest char is {}\", result); }  Listing 10-15: A working definition of the largest function that works on any generic type that implements the PartialOrd and Copy traits   If we don‚Äôt want to restrict the largest function to the types that implement the Copy trait, we could specify that T has the trait bound Clone instead of Copy.  Then we could clone each value in the slice when we want the largest function to have ownership.  Using the clone function means we‚Äôre potentially making more heap allocations in the case of types that own heap data like String, and heap allocations can be slow if we‚Äôre working with large amounts of data.   Another way we could implement largest is for the function to return a reference to a T value in the slice.  If we change the return type to &amp;T instead of T, thereby changing the body of the function to return a reference, we wouldn‚Äôt need the Clone or Copy trait bounds and we could avoid heap allocations.  Try implementing these alternate solutions on your own!   Using Trait Bounds to Conditionally Implement Methods  By using a trait bound with an impl block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits.  For example, the type Pair&lt;T&gt; in Listing 10-16 always implements the new function.  But Pair&lt;T&gt; only implements the cmp_display method if its inner type T implements the PartialOrd trait that enables comparison and the Display trait that enables printing.   #![allow(unused_variables)] fn main() {   use std::fmt::Display;    struct Pair&lt;T&gt; {       x: T,       y: T,   }    impl&lt;T&gt; Pair&lt;T&gt; {       fn new(x: T, y: T) -&gt; Self {           Self {               x,               y,           }       }   }    impl&lt;T: Display + PartialOrd&gt; Pair&lt;T&gt; {       fn cmp_display(&amp;self) {           if self.x &gt;= self.y {               println!(\"The largest member is x = {}\", self.x);           } else {               println!(\"The largest member is y = {}\", self.y);           }       }   } }  Listing 10-16: Conditionally implement methods on a generic type depending on trait bounds  We can also conditionally implement a trait for any type that implements another trait.  Implementations of a trait on any type that satisfies the trait bounds are called blanket implementations and are extensively used in the Rust standard library.  For example, the standard library implements the ToString trait on any type that implements the Display trait.  The impl block in the standard library looks similar to this code:  impl&lt;T: Display&gt; ToString for T {     // --snip-- }  Because the standard library has this blanket implementation, we can call the to_string method defined by the ToString trait on any type that implements the Display trait.  For example, we can turn integers into their corresponding String values like this because integers implement Display:  let s = 3.to_string();  Blanket implementations appear in the documentation for the trait in the ‚ÄúImplementors‚Äù section.   Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior.  The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior.  In dynamically typed languages, we would get an error at runtime if we called a method on a type which didn‚Äôt implement the type which defines the method.  But Rust moves these errors to compile time so we‚Äôre forced to fix the problems before our code is even able to run.  Additionally, we don‚Äôt have to write code that checks for behavior at runtime because we‚Äôve already checked at compile time.  Doing so improves performance without having to give up the flexibility of generics.   Another kind of generic that we‚Äôve already been using is called lifetimes.  Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.  Let‚Äôs look at how lifetimes do that.   Validating References with Lifetimes  One detail we didn‚Äôt discuss in the ‚ÄúReferences and Borrowing‚Äù section in Chapter 4 is that every reference in Rust has a lifetime, which is the scope for which that reference is valid.  Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred.  We must annotate types when multiple types are possible.  In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways.  Rust requires us to annotate the relationships using generic lifetime parameters to ensure the actual references used at runtime will definitely be valid.   The concept of lifetimes is somewhat different from tools in other programming languages, arguably making lifetimes Rust‚Äôs most distinctive feature.  Although we won‚Äôt cover lifetimes in their entirety in this chapter, we‚Äôll discuss common ways you might encounter lifetime syntax so you can become familiar with the concepts.   Preventing Dangling References with Lifetimes  The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it‚Äôs intended to reference.  Consider the program in Listing 10-17, which has an outer scope and an inner scope.  {     let r;      {         let x = 5;         r = &amp;x;     }      println!(\"r: {}\", r); }  Listing 10-17: An attempt to use a reference whose value has gone out of scope   Note: The examples in Listings 10-17, 10-18, and 10-24 declare variables without giving them an initial value, so the variable name exists in the outer scope. At first glance, this might appear to be in conflict with Rust‚Äôs having no null values. However, if we try to use a variable before giving it a value, we‚Äôll get a compile-time error, which shows that Rust indeed does not allow null values.   The outer scope declares a variable named r with no initial value, and the inner scope declares a variable named x with the initial value of 5.  Inside the inner scope, we attempt to set the value of r as a reference to x.  Then the inner scope ends, and we attempt to print the value in r.  This code won‚Äôt compile because the value r is referring to has gone out of scope before we try to use it.  Here is the error message:  error[E0597]: `x` does not live long enough   --&gt; src/main.rs:7:5    | 6  |         r = &amp;x;    |              - borrow occurs here 7  |     }    |     ^ `x` dropped here while still borrowed ... 10 | }    | - borrowed value needs to live until here  The variable x doesn‚Äôt ‚Äúlive long enough.‚Äù  The reason is that x will be out of scope when the inner scope ends on line 7.  But r is still valid for the outer scope; because its scope is larger, we say that it ‚Äúlives longer.‚Äù  If Rust allowed this code to work, r would be referencing memory that was deallocated when x went out of scope, and anything we tried to do with r wouldn‚Äôt work correctly.  So how does Rust determine that this code is invalid? It uses a borrow checker.   The Borrow Checker  The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid.  Listing 10-18 shows the same code as Listing 10-17 but with annotations showing the lifetimes of the variables.  {     let r;                // ---------+-- 'a                           //          |     {                     //          |         let x = 5;        // -+-- 'b  |         r = &amp;x;           //  |       |     }                     // -+       |                           //          |     println!(\"r: {}\", r); //          | }                         // ---------+  Listing 10-18: Annotations of the lifetimes of r and x, named ‚Äòa and ‚Äòb, respectively   Here, we‚Äôve annotated the lifetime of r with 'a and the lifetime of x with 'b.  As you can see, the inner 'b block is much smaller than the outer 'a lifetime block.  At compile time, Rust compares the size of the two lifetimes and sees that r has a lifetime of 'a but that it refers to memory with a lifetime of 'b.  The program is rejected because ‚Äòb is shorter than ‚Äòa: the subject of the reference doesn‚Äôt live as long as the reference.   Listing 10-19 fixes the code so it doesn‚Äôt have a dangling reference and compiles without any errors.  {     let x = 5;            // ----------+-- 'b                           //           |     let r = &amp;x;           // --+-- 'a  |                           //   |       |     println!(\"r: {}\", r); //   |       |                           // --+       | }                         // ----------+  Listing 10-19: A valid reference because the data has a longer lifetime than the reference   Here, x has the lifetime 'b, which in this case is larger than 'a. This means r can reference x because Rust knows that the reference in r will always be valid while x is valid.   Now that you know where the lifetimes of references are and how Rust analyzes lifetimes to ensure references will always be valid, let‚Äôs explore generic lifetimes of parameters and return values in the context of functions.   Generic Lifetimes in Functions  Let‚Äôs write a function that returns the longer of two string slices.  This function will take two string slices and return a string slice.  After we‚Äôve implemented the longest function, the code in Listing 10-20 should print The longest string is abcd.   fn main() {     let string1 = String::from(\"abcd\");     let string2 = \"xyz\";      let result = longest(string1.as_str(), string2);     println!(\"The longest string is {}\", result); }  Listing 10-20: A main function that calls the longest function to find the longer of two string slices   Note that we want the function to take string slices, which are references, because we don‚Äôt want the longest function to take ownership of its parameters.  We want to allow the function to accept slices of a String (the type stored in the variable string1) as well as string literals (which is what variable string2 contains).   Refer to the ‚ÄúString Slices as Parameters‚Äù section in Chapter 4 for more discussion about why the parameters we use in Listing 10-20 are the ones we want.   If we try to implement the longest function as shown in Listing 10-21, it won‚Äôt compile.   fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {     if x.len() &gt; y.len() {         x     } else {         y     } }  Listing 10-21: An implementation of the longest function that returns the longer of two string slices but does not yet compile   Instead, we get the following error that talks about lifetimes:   error[E0106]: missing lifetime specifier  --&gt; src/main.rs:1:33   | 1 | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {   |                                 ^ expected lifetime parameter   |   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`   The help text reveals that the return type needs a generic lifetime parameter on it because Rust can‚Äôt tell whether the reference being returned refers to x or y.  Actually, we don‚Äôt know either, because the if block in the body of this function returns a reference to x and the else block returns a reference to y!   When we‚Äôre defining this function, we don‚Äôt know the concrete values that will be passed into this function, so we don‚Äôt know whether the if case or the else case will execute.  We also don‚Äôt know the concrete lifetimes of the references that will be passed in, so we can‚Äôt look at the scopes as we did in Listings 10-18 and 10-19 to determine whether the reference we return will always be valid.  The borrow checker can‚Äôt determine this either, because it doesn‚Äôt know how the lifetimes of x and y relate to the lifetime of the return value.  To fix this error, we‚Äôll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.   Lifetime Annotation Syntax  Lifetime annotations don‚Äôt change how long any of the references live.  Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.  Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.   Lifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (') and are usually all lowercase and very short, like generic types.  Most people use the name 'a.  We place lifetime parameter annotations after the &amp; of a reference, using a space to separate the annotation from the reference‚Äôs type.   Here are some examples: a reference to an i32 without a lifetime parameter, a reference to an i32 that has a lifetime parameter named 'a, and a mutable reference to an i32 that also has the lifetime 'a.  &amp;i32        // a reference &amp;'a i32     // a reference with an explicit lifetime &amp;'a mut i32 // a mutable reference with an explicit lifetime  One lifetime annotation by itself doesn‚Äôt have much meaning, because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other.  For example, let‚Äôs say we have a function with the parameter first that is a reference to an i32 with lifetime 'a.  The function also has another parameter named second that is another reference to an i32 that also has the lifetime 'a.  The lifetime annotations indicate that the references first and second must both live as long as that generic lifetime.   Lifetime Annotations in Function Signatures  Now let‚Äôs examine lifetime annotations in the context of the longest function.  As with generic type parameters, we need to declare generic lifetime parameters inside angle brackets between the function name and the parameter list.  The constraint we want to express in this signature is that all the references in the parameters and the return value must have the same lifetime.  We‚Äôll name the lifetime 'a and then add it to each reference, as shown in Listing 10-22.   fn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {     if x.len() &gt; y.len() {         x     } else {         y     } }  Listing 10-22: The longest function definition specifying that all the references in the signature must have the same lifetime ‚Äòa   This code should compile and produce the result we want when we use it with the main function in Listing 10-20.   The function signature now tells Rust that for some lifetime 'a, the function takes two parameters, both of which are string slices that live at least as long as lifetime 'a.  The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime 'a.  In practice, it means that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the references passed in.  These constraints are what we want Rust to enforce.  Remember, when we specify the lifetime parameters in this function signature, we‚Äôre not changing the lifetimes of any values passed in or returned.  Rather, we‚Äôre specifying that the borrow checker should reject any values that don‚Äôt adhere to these constraints.  Note that the longest function doesn‚Äôt need to know exactly how long x and y will live, only that some scope can be substituted for 'a that will satisfy this signature.   When annotating lifetimes in functions, the annotations go in the function signature, not in the function body.  Rust can analyze the code within the function without any help.  However, when a function has references to or from code outside that function, it becomes almost impossible for Rust to figure out the lifetimes of the parameters or return values on its own.  The lifetimes might be different each time the function is called. This is why we need to annotate the lifetimes manually.   When we pass concrete references to longest, the concrete lifetime that is substituted for 'a is the part of the scope of x that overlaps with the scope of y.  In other words, the generic lifetime 'a will get the concrete lifetime that is equal to the smaller of the lifetimes of x and y.  Because we‚Äôve annotated the returned reference with the same lifetime parameter 'a, the returned reference will also be valid for the length of the smaller of the lifetimes of x and y.   Let‚Äôs look at how the lifetime annotations restrict the longest function by passing in references that have different concrete lifetimes. Listing 10-23 is a straightforward example.  fn main() {     let string1 = String::from(\"long string is long\");      {         let string2 = String::from(\"xyz\");         let result = longest(string1.as_str(), string2.as_str());         println!(\"The longest string is {}\", result);     } }  Listing 10-23: Using the longest function with references to String values that have different concrete lifetimes   In this example, string1 is valid until the end of the outer scope, string2 is valid until the end of the inner scope, and result references something that is valid until the end of the inner scope.  Run this code, and you‚Äôll see that the borrow checker approves of this code; it will compile and print The longest string is long string is long.   Next, let‚Äôs try an example that shows that the lifetime of the reference in result must be the smaller lifetime of the two arguments.  We‚Äôll move the declaration of the result variable outside the inner scope but leave the assignment of the value to the result variable inside the scope with string2.  Then we‚Äôll move the println! that uses result outside the inner scope, after the inner scope has ended.  The code in Listing 10-24 will not compile.   fn main() {     let string1 = String::from(\"long string is long\");     let result;     {         let string2 = String::from(\"xyz\");         result = longest(string1.as_str(), string2.as_str());     }     println!(\"The longest string is {}\", result); }  Listing 10-24: Attempting to use result after string2 has gone out of scope   When we try to compile this code, we‚Äôll get this error:   error[E0597]: `string2` does not live long enough   --&gt; src/main.rs:15:5    | 14 |         result = longest(string1.as_str(), string2.as_str());    |                                            ------- borrow occurs here 15 |     }    |     ^ `string2` dropped here while still borrowed 16 |     println!(\"The longest string is {}\", result); 17 | }    | - borrowed value needs to live until here  The error shows that for result to be valid for the println! statement, string2 would need to be valid until the end of the outer scope.  Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter 'a.   As humans, we can look at this code and see that string1 is longer than string2 and therefore result will contain a reference to string1.  Because string1 has not gone out of scope yet, a reference to string1 will still be valid for the println! statement.  However, the compiler can‚Äôt see that the reference is valid in this case.  We‚Äôve told Rust that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the references passed in.  Therefore, the borrow checker disallows the code in Listing 10-24 as possibly having an invalid reference.   Try designing more experiments that vary the values and lifetimes of the references passed in to the longest function and how the returned reference is used.  Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you‚Äôre right!   Thinking in Terms of Lifetimes  The way in which you need to specify lifetime parameters depends on what your function is doing.  For example, if we changed the implementation of the longest function to always return the first parameter rather than the longest string slice, we wouldn‚Äôt need to specify a lifetime on the y parameter.  The following code will compile:  fn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;str) -&gt; &amp;'a str {     x }  In this example, we‚Äôve specified a lifetime parameter 'a for the parameter x and the return type, but not for the parameter y, because the lifetime of y does not have any relationship with the lifetime of x or the return value.   When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters.  If the reference returned does not refer to one of the parameters, it must refer to a value created within this function, which would be a dangling reference because the value will go out of scope at the end of the function.  Consider this attempted implementation of the longest function that won‚Äôt compile:  fn longest&lt;'a&gt;(x: &amp;str, y: &amp;str) -&gt; &amp;'a str {     let result = String::from(\"really long string\");     result.as_str() }  Here, even though we‚Äôve specified a lifetime parameter 'a for the return type, this implementation will fail to compile because the return value lifetime is not related to the lifetime of the parameters at all.  Here is the error message we get:   error[E0597]: `result` does not live long enough  --&gt; src/main.rs:3:5   | 3 |     result.as_str()   |     ^^^^^^ does not live long enough 4 | }   | - borrowed value only lives until here   | note: borrowed value must be valid for the lifetime 'a as defined on the function body at 1:1...  --&gt; src/main.rs:1:1   | 1 | / fn longest&lt;'a&gt;(x: &amp;str, y: &amp;str) -&gt; &amp;'a str { 2 | |     let result = String::from(\"really long string\"); 3 | |     result.as_str() 4 | | }   | |_^  The problem is that result goes out of scope and gets cleaned up at the end of the longest function.  We‚Äôre also trying to return a reference to result from the function.  There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won‚Äôt let us create a dangling reference.  In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.   Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions.  Once they‚Äôre connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.   Lifetime Annotations in Struct Definitions  So far, we‚Äôve only defined structs to hold owned types.  It‚Äôs possible for structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct‚Äôs definition.  Listing 10-25 has a struct named ImportantExcerpt that holds a string slice.  struct ImportantExcerpt&lt;'a&gt; {     part: &amp;'a str, }  fn main() {     let novel = String::from(\"Call me Ishmael. Some years ago...\");     let first_sentence = novel.split('.')         .next()         .expect(\"Could not find a '.'\");     let i = ImportantExcerpt { part: first_sentence }; }  Listing 10-25: A struct that holds a reference, so its definition needs a lifetime annotation   This struct has one field, part, that holds a string slice, which is a reference.  As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition.  This annotation means an instance of ImportantExcerpt can‚Äôt outlive the reference it holds in its part field.   The main function here creates an instance of the ImportantExcerpt struct that holds a reference to the first sentence of the String owned by the variable novel.  The data in novel exists before the ImportantExcerpt instance is created.  In addition, novel doesn‚Äôt go out of scope until after the ImportantExcerpt goes out of scope, so the reference in the ImportantExcerpt instance is valid.   Lifetime Elision  You‚Äôve learned that every reference has a lifetime and that you need to specify lifetime parameters for functions or structs that use references.  However, in Chapter 4 we had a function in Listing 4-9, which is shown again in Listing 10-26, that compiled without lifetime annotations.  fn first_word(s: &amp;str) -&gt; &amp;str {     let bytes = s.as_bytes();      for (i, &amp;item) in bytes.iter().enumerate() {         if item == b' ' {             return &amp;s[0..i];         }     }      &amp;s[..] }  Listing 10-26: A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references   The reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn‚Äôt have compiled because every reference needed an explicit lifetime.  At that time, the function signature would have been written like this:   fn first_word&lt;'a&gt;(s: &amp;'a str) -&gt; &amp;'a str {  After writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations.  These situations were predictable and followed a few deterministic patterns.  The developers programmed these patterns into the compiler‚Äôs code so the borrow checker could infer the lifetimes in these situations and wouldn‚Äôt need explicit annotations.   This piece of Rust history is relevant because it‚Äôs possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.   The patterns programmed into Rust‚Äôs analysis of references are called the lifetime elision rules.  These aren‚Äôt rules for programmers to follow; they‚Äôre a set of particular cases that the compiler will consider, and if your code fits these cases, you don‚Äôt need to write the lifetimes explicitly.   The elision rules don‚Äôt provide full inference.  If Rust deterministically applies the rules but there is still ambiguity as to what lifetimes the references have, the compiler won‚Äôt guess what the lifetime of the remaining references should be.  In this case, instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations that specify how the references relate to each other.   Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.   The compiler uses three rules to figure out what lifetimes references have when there aren‚Äôt explicit annotations.  The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes.  If the compiler gets to the end of the three rules and there are still references for which it can‚Äôt figure out lifetimes, the compiler will stop with an error. These rules apply to fn definitions as well as impl blocks.   The first rule is that each parameter that is a reference gets its own lifetime parameter.  In other words, a function with one parameter gets one lifetime parameter: fn foo&lt;'a&gt;(x: &amp;'a i32); a function with two parameters gets two separate lifetime parameters: fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32); and so on.   The second rule is if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; &amp;'a i32.   The third rule is if there are multiple input lifetime parameters, but one of them is &amp;self or &amp;mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters.  This third rule makes methods much nicer to read and write because fewer symbols are necessary.   Let‚Äôs pretend we‚Äôre the compiler.  We‚Äôll apply these rules to figure out what the lifetimes of the references in the signature of the first_word function in Listing 10-26 are.  The signature starts without any lifetimes associated with the references:   fn first_word(s: &amp;str) -&gt; &amp;str {   Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime.  We‚Äôll call it 'a as usual, so now the signature is this:  fn first_word&lt;'a&gt;(s: &amp;'a str) -&gt; &amp;str {   The second rule applies because there is exactly one input lifetime.  The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:  fn first_word&lt;'a&gt;(s: &amp;'a str) -&gt; &amp;'a str {   Now all the references in this function signature have lifetimes, and the compiler can continue its analysis without needing the programmer to annotate the lifetimes in this function signature.   Let‚Äôs look at another example, this time using the longest function that had no lifetime parameters when we started working with it in Listing 10-21:  fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {  Let‚Äôs apply the first rule: each parameter gets its own lifetime.  This time we have two parameters instead of one, so we have two lifetimes:  fn longest&lt;'a, 'b&gt;(x: &amp;'a str, y: &amp;'b str) -&gt; &amp;str {  You can see that the second rule doesn‚Äôt apply because there is more than one input lifetime.  The third rule doesn‚Äôt apply either, because longest is a function rather than a method, so none of the parameters are self.  After working through all three rules, we still haven‚Äôt figured out what the return type‚Äôs lifetime is.  This is why we got an error trying to compile the code in Listing 10-21: the compiler worked through the lifetime elision rules but still couldn‚Äôt figure out all the lifetimes of the references in the signature.   Because the third rule really only applies in method signatures, we‚Äôll look at lifetimes in that context next to see why the third rule means we don‚Äôt have to annotate lifetimes in method signatures very often.   Lifetime Annotations in Method Definitions  When we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing 10-11.  Where we declare and use the lifetime parameters depends on whether they‚Äôre related to the struct fields or the method parameters and return values.   Lifetime names for struct fields always need to be declared after the impl keyword and then used after the struct‚Äôs name, because those lifetimes are part of the struct‚Äôs type.   In method signatures inside the impl block, references might be tied to the lifetime of references in the struct‚Äôs fields, or they might be independent.  In addition, the lifetime elision rules often make it so that lifetime annotations aren‚Äôt necessary in method signatures.  Let‚Äôs look at some examples using the struct named ImportantExcerpt that we defined in Listing 10-25.   First, we‚Äôll use a method named level whose only parameter is a reference to self and whose return value is an i32, which is not a reference to anything:  impl&lt;'a&gt; ImportantExcerpt&lt;'a&gt; {     fn level(&amp;self) -&gt; i32 {         3     } }  The lifetime parameter declaration after impl and its use after the type name are required, but we‚Äôre not required to annotate the lifetime of the reference to self because of the first elision rule.   Here is an example where the third lifetime elision rule applies:   impl&lt;'a&gt; ImportantExcerpt&lt;'a&gt; {     fn announce_and_return_part(&amp;self, announcement: &amp;str) -&gt; &amp;str {         println!(\"Attention please: {}\", announcement);         self.part     } }  There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &amp;self and announcement their own lifetimes.  Then, because one of the parameters is &amp;self, the return type gets the lifetime of &amp;self, and all lifetimes have been accounted for.   The Static Lifetime  One special lifetime we need to discuss is 'static, which means that this reference can live for the entire duration of the program.  All string literals have the 'static lifetime, which we can annotate as follows:  let s: &amp;'static str = \"I have a static lifetime.\";  The text of this string is stored directly in the program‚Äôs binary, which is always available.  Therefore, the lifetime of all string literals is 'static.   You might see suggestions to use the 'static lifetime in error messages.  But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not.  You might consider whether you want it to live that long, even if it could.  Most of the time, the problem results from attempting to create a dangling reference or a mismatch of the available lifetimes.  In such cases, the solution is fixing those problems, not specifying the 'static lifetime.   Generic Type Parameters, Trait Bounds, and Lifetimes Together  Let‚Äôs briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!  use std::fmt::Display;  fn longest_with_an_announcement&lt;'a, T&gt;(x: &amp;'a str, y: &amp;'a str, ann: T) -&gt; &amp;'a str     where T: Display {     println!(\"Announcement! {}\", ann);     if x.len() &gt; y.len() {         x     } else {         y     } }  This is the longest function from Listing 10-22 that returns the longer of two string slices.  But now it has an extra parameter named ann of the generic type T, which can be filled in by any type that implements the Display trait as specified by the where clause.  This extra parameter will be printed before the function compares the lengths of the string slices, which is why the Display trait bound is necessary.  Because lifetimes are a type of generic, the declarations of the lifetime parameter 'a and the generic type parameter T go in the same list inside the angle brackets after the function name.   Summary  We covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you‚Äôre ready to write code without repetition that works in many different situations.   Generic type parameters let you apply the code to different types.  Traits and trait bounds ensure that even though the types are generic, they‚Äôll have the behavior the code needs.  You learned how to use lifetime annotations to ensure that this flexible code won‚Äôt have any dangling references.  And all of this analysis happens at compile time, which doesn‚Äôt affect runtime performance!  ","categories": ["RUST Language"],
        "tags": ["Generic","Traits","Lifetimes","Template"],
        "url": "https://jjungs-lee.github.io//rust%20language/10.Generic-Types,-Traits,-and-Lifetimes/",
        "teaser":null},{
        "title": "Microsoft: We're creating a new Rust-like programming language for secure coding",
        "excerpt":"This link will be help :)     KimPopeTV   Article - Zdnet By Liam Tung     Microsoft can‚Äôt just throw away older Windows code(C or C++), but the company‚Äôs Project Verona aims to make older low-level components in Windows 10 more secure by integrating Mozilla-developed Rust.   Microsofte recently revealed that its trials with Rust over C and C++ to remove insecure code from Windows had hit its targets. The company has partially explained its security-related motives for experimenting with Rust, but hasn‚Äôt gone into much detail about the broader reasons for its move.   Microsoft recently revealed that the vast majority of bugs being discovered these days are memory safety flaws, which is also why Microsoft is looking at Rust to improve the situation. Rust was designed to allow developers to code without having to worry about this class of bug. (this mean Rust is good for prenventing memory safety flaws)   Memory safety is the term for coding frameworks that help protect memory space from being abused by malware. Project Verona at Microsoft is meant to progress the company‚Äôs work here to close off this attack vector.  The other class of bugs Microsoft is working on to address relates to uninitialized memory in a way that also doesn‚Äôt kill performance.   MS project Verona will have a lot of influence on the development of windows, and it will be helpful to the development of rust. I wonder why Microsoft doesn‚Äôt participate in rust open source. If Microsoft and other companies are involved in opensource development, it could be a better language than c or C ++.  But Microsofte will be made open souce ‚Äúsoon‚Äù(Verona), It is a new language for what Microsoft is calling ‚Äúsafe infrastructure programming‚Äù. (I think Rust+MS skill combined)   So the possibilities of developing rust or verona are endless, and I think it will be a better language to solve problems that existed in C and C ++.  ","categories": ["RUST"],
        "tags": ["RUST","Microsoft","Verona"],
        "url": "https://jjungs-lee.github.io//rust/ms-creating-a-new-Rust-like-programming-language/",
        "teaser":null},{
        "title": "RUST : 11. Writing Automated Tests",
        "excerpt":"In his 1972 essay ‚ÄúThe Humble Programmer,‚Äù Edsger W. Dijkstra said that ‚ÄúProgram testing can be a very effective way to show the presence of bugs,  but it is hopelessly inadequate for showing their absence.‚Äù That doesn‚Äôt mean we shouldn‚Äôt try to test as much as we can!   Correctness in our programs is the extent to which our code does what we intend it to do.  Rust is designed with a high degree of concern about the correctness of programs, but correctness is complex and not easy to prove.  Rust‚Äôs type system shoulders a huge part of this burden, but the type system cannot catch every kind of incorrectness.  As such, Rust includes support for writing automated software tests within the language.   As an example, say we write a function called add_two that adds 2 to whatever number is passed to it.  This function‚Äôs signature accepts an integer as a parameter and returns an integer as a result.  When we implement and compile that function, Rust does all the type checking and borrow checking that you‚Äôve learned so far to ensure that,  for instance, we aren‚Äôt passing a String value or an invalid reference to this function.  But Rust can‚Äôt check that this function will do precisely what we intend, which is return the parameter plus 2 rather than, say, the parameter plus 10 or the parameter minus 50! That‚Äôs where tests come in.   We can write tests that assert, for example, that when we pass 3 to the add_two function, the returned value is 5.  We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.   Testing is a complex skill: although we can‚Äôt cover every detail about how to write good tests in one chapter, we‚Äôll discuss the mechanics of Rust‚Äôs testing facilities. We‚Äôll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.   How to Write Tests  Tests are Rust functions that verify that the non-test code is functioning in the expected manner.  The bodies of test functions typically perform these three actions:      Set up any needed data or state.   Run the code you want to test.   Assert the results are what you expect. Let‚Äôs look at the features Rust provides specifically for writing tests that take these actions, which include the test attribute, a few macros, and the should_panic attribute.   The Anatomy of a Test Function  At its simplest, a test in Rust is a function that‚Äôs annotated with the test attribute.  Attributes are metadata about pieces of Rust code; one example is the derive attribute we used with structs in Chapter 5.  To change a function into a test function, add #[test] on the line before fn.  When you run your tests with the cargo test command, Rust builds a test runner binary that runs the functions annotated with the test attribute and reports on whether each test function passes or fails.   When we make a new library project with Cargo, a test module with a test function in it is automatically generated for us.  This module helps you start writing your tests so you don‚Äôt have to look up the exact structure and syntax of test functions every time you start a new project.  You can add as many additional test functions and as many test modules as you want!   We‚Äôll explore some aspects of how tests work by experimenting with the template test generated for us without actually testing any code.  Then we‚Äôll write some real-world tests that call some code that we‚Äôve written and assert that its behavior is correct.   Let‚Äôs create a new library project called adder:  $ cargo new adder --lib      Created library `adder` project $ cd adder  The contents of the src/lib.rs file in your adder library should look like Listing 11-1.  // Filename: src/lib.rs #[cfg(test)] mod tests {     #[test]     fn it_works() {         assert_eq!(2 + 2, 4);     } }  Listing 11-1: The test module and function generated automatically by cargo new   For now, let‚Äôs ignore the top two lines and focus on the function to see how it works.  Note the #[test] annotation before the fn line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test.  We could also have non-test functions in the tests module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the #[test] attribute.   The function body uses the assert_eq! macro to assert that 2 + 2 equals 4.  This assertion serves as an example of the format for a typical test. Let‚Äôs run it to see that this test passes.   The cargo test command runs all tests in our project, as shown in Listing 11-2.   $ cargo test    Compiling adder v0.1.0 (file:///projects/adder)     Finished dev [unoptimized + debuginfo] target(s) in 0.22 secs      Running target/debug/deps/adder-ce99bcc2479f4607  running 1 test test tests::it_works ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out     Doc-tests adder  running 0 tests  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out  Listing 11-2: The output from running the automatically generated test   Cargo compiled and ran the test.  After the Compiling, Finished, and Running lines is the line running 1 test.  The next line shows the name of the generated test function, called it_works, and the result of running that test, ok.  The overall summary of running the tests appears next.  The text test result: ok. means that all the tests passed, and the portion that reads 1 passed; 0 failed totals the number of tests that passed or failed.   Because we don‚Äôt have any tests we‚Äôve marked as ignored, the summary shows 0 ignored.  We also haven‚Äôt filtered the tests being run, so the end of the summary shows 0 filtered out.  We‚Äôll talk about ignoring and filtering out tests in the next section, ‚ÄúControlling How Tests Are Run.‚Äù   The next part of the test output, which starts with Doc-tests adder, is for the results of any documentation tests.  We don‚Äôt have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation.  This feature helps us keep our docs and our code in sync! We‚Äôll discuss how to write documentation tests in the ‚ÄúDocumentation Comments as Tests‚Äù section of Chapter 14.  For now, we‚Äôll ignore the Doc-tests output.   Let‚Äôs change the name of our test to see how that changes the test output.  Change the it_works function to a different name, such as exploration, like so:  #[cfg(test)] mod tests {     #[test]     fn exploration() {         assert_eq!(2 + 2, 4);     } }  Then run cargo test again. The output now shows exploration instead of it_works:  running 1 test test tests::exploration ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out   Let‚Äôs add another test, but this time we‚Äôll make a test that fails!  Tests fail when something in the test function panics.  Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed.  We talked about the simplest way to cause a panic in Chapter 9, which is to call the panic! macro.  Enter the new test, another, so your src/lib.rs file looks like Listing 11-3.   #[cfg(test)] mod tests {     #[test]     fn exploration() {         assert_eq!(2 + 2, 4);     }      #[test]     fn another() {         panic!(\"Make this test fail\");     }  Listing 11-3: Adding a second test that will fail because we call the panic! macro   Run the tests again using cargo test. The output should look like Listing 11-4, which shows that our exploration test passed and another failed.  running 2 tests test tests::exploration ... ok test tests::another ... FAILED  failures:  ---- tests::another stdout ---- thread 'tests::another' panicked at 'Make this test fail', src/lib.rs:10:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  failures:     tests::another  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  error: test failed  Listing 11-4: Test results when one test passes and one test fails   Instead of ok, the line test tests::another shows FAILED.  Two new sections appear between the individual results and the summary:  the first section displays the detailed reason for each test failure.  In this case, another failed because it panicked at 'Make this test fail', which happened on line 10 in the src/lib.rs file.  The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output.  We can use the name of a failing test to run just that test to more easily debug it;  we‚Äôll talk more about ways to run tests in the ‚ÄúControlling How Tests Are Run‚Äù section.   Checking Results with the assert! Macro  The assert! macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to true.  We give the assert! macro an argument that evaluates to a Boolean.  If the value is true, assert! does nothing and the test passes.  If the value is false, the assert! macro calls the panic! macro, which causes the test to fail.  Using the assert! macro helps us check that our code is functioning in the way we intend.   In Chapter 5, Listing 5-15, we used a Rectangle struct and a can_hold method, which are repeated here in Listing 11-5.  Let‚Äôs put this code in the src/lib.rs file and write some tests for it using the assert! macro.   #[derive(Debug)] struct Rectangle {     width: u32,     height: u32, }  impl Rectangle {     fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &gt; other.width &amp;&amp; self.height &gt; other.height     } }  Listing 11-5: Using the Rectangle struct and its can_hold method from Chapter 5   The can_hold method returns a Boolean, which means it‚Äôs a perfect use case for the assert! macro.  In Listing 11-6, we write a test that exercises the can_hold method by creating a Rectangle instance that has a width of 8 and a height of 7 and asserting that it can hold another Rectangle instance that has a width of 5 and a height of 1.   #[cfg(test)] mod tests {     use super::*;      #[test]     fn larger_can_hold_smaller() {         let larger = Rectangle { width: 8, height: 7 };         let smaller = Rectangle { width: 5, height: 1 };          assert!(larger.can_hold(&amp;smaller));     } }  Listing 11-6: A test for can_hold that checks whether a larger rectangle can indeed hold a smaller rectangle   Note that we‚Äôve added a new line inside the tests module: use super::*;.  The tests module is a regular module that follows the usual visibility rules we covered in Chapter 7 in the ‚ÄúPaths for Referring to an Item in the Module Tree‚Äù section.  Because the tests module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module.  We use a glob(*) here so anything we define in the outer module is available to this tests module.   We‚Äôve named our test larger_can_hold_smaller, and we‚Äôve created the two Rectangle instances that we need.  Then we called the assert! macro and passed it the result of calling larger.can_hold(&amp;smaller).  This expression is supposed to return true, so our test should pass. Let‚Äôs find out!   running 1 test test tests::larger_can_hold_smaller ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out   It does pass! Let‚Äôs add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:   #[cfg(test)] mod tests {     use super::*;      #[test]     fn larger_can_hold_smaller() {         // --snip--     }      #[test]     fn smaller_cannot_hold_larger() {         let larger = Rectangle { width: 8, height: 7 };         let smaller = Rectangle { width: 5, height: 1 };          assert!(!smaller.can_hold(&amp;larger));     } }  Because the correct result of the can_hold function in this case is false, we need to negate that result before we pass it to the assert! macro.  As a result, our test will pass if can_hold returns false:   running 2 tests test tests::smaller_cannot_hold_larger ... ok test tests::larger_can_hold_smaller ... ok  test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out   Two tests that pass! Now let‚Äôs see what happens to our test results when we introduce a bug in our code.  Let‚Äôs change the implementation of the can_hold method by replacing the greater than sign(&gt;) with a less than sign(&lt;) when it compares the widths:   // --snip--  impl Rectangle {     fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &lt; other.width &amp;&amp; self.height &gt; other.height     } }  Running the tests now produces the following:   running 2 tests test tests::smaller_cannot_hold_larger ... ok test tests::larger_can_hold_smaller ... FAILED  failures:  ---- tests::larger_can_hold_smaller stdout ---- thread 'tests::larger_can_hold_smaller' panicked at 'assertion failed: larger.can_hold(&amp;smaller)', src/lib.rs:22:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  failures:     tests::larger_can_hold_smaller  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  Our tests caught the bug!  Because larger.width is 8 and smaller.width is 5, the comparison of the widths in can_hold now returns false: 8 is not less than 5.   Testing Equality with the assert_eq! and assert_ne! Macros   A common way to test functionality is to compare the result of the code under test to the value you expect the code to return to make sure they‚Äôre equal.  You could do this using the assert! macro and passing it an expression using the == operator.  However, this is such a common test that the standard library provides a pair of macros‚Äîassert_eq! and assert_ne!‚Äîto perform this test more conveniently.  These macros compare two arguments for equality or inequality, respectively.  They‚Äôll also print the two values if the assertion fails, which makes it easier to see why the test failed;  conversely, the assert! macro only indicates that it got a false value for the == expression, not the values that lead to the false value.   In Listing 11-7, we write a function named add_two that adds 2 to its parameter and returns the result.  Then we test this function using the assert_eq! macro.   pub fn add_two(a: i32) -&gt; i32 {     a + 2 }  #[cfg(test)] mod tests {     use super::*;      #[test]     fn it_adds_two() {         assert_eq!(4, add_two(2));     } }  Listing 11-7: Testing the function add_two using the assert_eq! macro   Let‚Äôs check that it passes!   running 1 test test tests::it_adds_two ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out   The first argument we gave to the assert_eq! macro, 4, is equal to the result of calling add_two(2).  The line for this test is test tests::it_adds_two ... ok, and the ok text indicates that our test passed!   Let‚Äôs introduce a bug into our code to see what it looks like when a test that uses assert_eq! fails.  Change the implementation of the add_two function to instead add 3:  pub fn add_two(a: i32) -&gt; i32 {     a + 3 }  Run the tests again:   running 1 test test tests::it_adds_two ... FAILED  failures:  ---- tests::it_adds_two stdout ---- thread 'tests::it_adds_two' panicked at 'assertion failed: `(left == right)`   left: `4`,  right: `5`', src/lib.rs:11:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  failures:     tests::it_adds_two  test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  Our test caught the bug!  The it_adds_two test failed, displaying the message assertion failed: '(left == right)' and showing that left was 4 and right was 5.  This message is useful and helps us start debugging: it means the left argument to assert_eq! was 4 but the right argument, where we had add_two(2), was 5.   Note that in some languages and test frameworks, the parameters to the functions that assert two values are equal are called expected and actual, and the order in which we specify the arguments matters.  However, in Rust, they‚Äôre called left and right, and the order in which we specify the value we expect and the value that the code under test produces doesn‚Äôt matter.  We could write the assertion in this test as assert_eq!(add_two(2), 4), which would result in a failure message that displays assertion failed: '(left == right)' and that left was 5 and right was 4.   The assert_ne! macro will pass if the two values we give it are not equal and fail if they‚Äôre equal.  This macro is most useful for cases when we‚Äôre not sure what a value will be, but we know what the value definitely won‚Äôt be if our code is functioning as we intend.  For example, if we‚Äôre testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.   Under the surface, the assert_eq! and assert_ne! macros use the operators == and !=, respectively.  When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the PartialEq and Debug traits. A ll the primitive types and most of the standard library types implement these traits.  For structs and enums that you define, you‚Äôll need to implement PartialEq to assert that values of those types are equal or not equal.  You‚Äôll need to implement Debug to print the values when the assertion fails.  Because both traits are derivable traits, as mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward as adding the #[derive(PartialEq, Debug)] annotation to your struct or enum definition.  See Appendix C, ‚ÄúDerivable Traits,‚Äù for more details about these and other derivable traits.   Adding Custom Failure Messages  You can also add a custom message to be printed with the failure message as optional arguments to the assert!, assert_eq!, and assert_ne! macros.  Any arguments specified after the one required argument to assert! or the two required arguments to assert_eq! and assert_ne! are passed along to the format! macro (discussed in Chapter 8 in the ‚ÄúConcatenation with the + Operator or the format! Macro‚Äù section), so you can pass a format string that contains {} placeholders and values to go in those placeholders.  Custom messages are useful to document what an assertion means; when a test fails, you‚Äôll have a better idea of what the problem is with the code.   For example, let‚Äôs say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:  pub fn greeting(name: &amp;str) -&gt; String {     format!(\"Hello {}!\", name) }  #[cfg(test)] mod tests {     use super::*;      #[test]     fn greeting_contains_name() {         let result = greeting(\"Carol\");         assert!(result.contains(\"Carol\"));     } }  The requirements for this program haven‚Äôt been agreed upon yet, and we‚Äôre pretty sure the Hello text at the beginning of the greeting will change.  We decided we don‚Äôt want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the greeting function, we‚Äôll just assert that the output contains the text of the input parameter.   Let‚Äôs introduce a bug into this code by changing greeting to not include name to see what this test failure looks like:  pub fn greeting(name: &amp;str) -&gt; String {     String::from(\"Hello!\") }  Running this test produces the following:  running 1 test test tests::greeting_contains_name ... FAILED  failures:  ---- tests::greeting_contains_name stdout ---- thread 'tests::greeting_contains_name' panicked at 'assertion failed: result.contains(\"Carol\")', src/lib.rs:12:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  failures:     tests::greeting_contains_name   This result just indicates that the assertion failed and which line the assertion is on.  A more useful failure message in this case would print the value we got from the greeting function.  Let‚Äôs change the test function, giving it a custom failure message made from a format string with a placeholder filled in with the actual value we got from the greeting function:   #[test] fn greeting_contains_name() {     let result = greeting(\"Carol\");     assert!(         result.contains(\"Carol\"),         \"Greeting did not contain name, value was `{}`\", result     ); }  Now when we run the test, we‚Äôll get a more informative error message:  ---- tests::greeting_contains_name stdout ---- thread 'tests::greeting_contains_name' panicked at 'Greeting did not contain name, value was `Hello!`', src/lib.rs:12:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  We can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.   Checking for Panics with should_panic  In addition to checking that our code returns the correct values we expect, it‚Äôs also important to check that our code handles error conditions as we expect.  For example, consider the Guess type that we created in Chapter 9, Listing 9-10.  Other code that uses Guess depends on the guarantee that Guess instances will contain only values between 1 and 100.  We can write a test that ensures that attempting to create a Guess instance with a value outside that range panics.   We do this by adding another attribute, should_panic, to our test function.  This attribute makes a test pass if the code inside the function panics; the test will fail if the code inside the function doesn‚Äôt panic.   Listing 11-8 shows a test that checks that the error conditions of Guess::new happen when we expect them to.  fn main() {} pub struct Guess {     value: i32, }  impl Guess {     pub fn new(value: i32) -&gt; Guess {         if value &lt; 1 || value &gt; 100 {             panic!(\"Guess value must be between 1 and 100, got {}.\", value);         }          Guess {             value         }     } }  #[cfg(test)] mod tests {     use super::*;      #[test]     #[should_panic]     fn greater_than_100() {         Guess::new(200);     } }  Listing 11-8: Testing that a condition will cause a panic!   We place the #[should_panic] attribute after the #[test] attribute and before the test function it applies to.  Let‚Äôs look at the result when this test passes:   running 1 test test tests::greater_than_100 ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out  Looks good! Now let‚Äôs introduce a bug in our code by removing the condition that the new function will panic if the value is greater than 100:  // --snip-- impl Guess {     pub fn new(value: i32) -&gt; Guess {         if value &lt; 1  {             panic!(\"Guess value must be between 1 and 100, got {}.\", value);         }          Guess {             value         }     } }  When we run the test in Listing 11-8, it will fail:   running 1 test test tests::greater_than_100 ... FAILED  failures:  failures:     tests::greater_than_100  test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  We don‚Äôt get a very helpful message in this case, but when we look at the test function, we see that it‚Äôs annotated with #[should_panic].  The failure we got means that the code in the test function did not cause a panic.   Tests that use should_panic can be imprecise because they only indicate that the code has caused some panic.  A should_panic test would pass even if the test panics for a different reason from the one we were expecting to happen.  To make should_panic tests more precise, we can add an optional expected parameter to the should_panic attribute.  The test harness will make sure that the failure message contains the provided text.  For example, consider the modified code for Guess in Listing 11-9 where the new function panics with different messages depending on whether the value is too small or too large.   // --snip--  impl Guess {     pub fn new(value: i32) -&gt; Guess {         if value &lt; 1 {             panic!(\"Guess value must be greater than or equal to 1, got {}.\",                    value);         } else if value &gt; 100 {             panic!(\"Guess value must be less than or equal to 100, got {}.\",                    value);         }          Guess {             value         }     } }  #[cfg(test)] mod tests {     use super::*;      #[test]     #[should_panic(expected = \"Guess value must be less than or equal to 100\")]     fn greater_than_100() {         Guess::new(200);     } }  Listing 11-9: Testing that a condition will cause a panic! with a particular panic message  This test will pass because the value we put in the should_panic attribute‚Äôs expected parameter is a substring of the message that the Guess::new function panics with.  We could have specified the entire panic message that we expect, which in this case would be Guess value must be less than or equal to 100, got 200.  What you choose to specify in the expected parameter for should_panic depends on how much of the panic message is unique or dynamic and how precise you want your test to be.  In this case, a substring of the panic message is enough to ensure that the code in the test function executes the else if value &gt; 100 case.   To see what happens when a should_panic test with an expected message fails, let‚Äôs again introduce a bug into our code by swapping the bodies of the if value &lt; 1 and the else if value &gt; 100 blocks:   if value &lt; 1 {     panic!(\"Guess value must be less than or equal to 100, got {}.\", value); } else if value &gt; 100 {     panic!(\"Guess value must be greater than or equal to 1, got {}.\", value); }   This time when we run the should_panic test, it will fail:   running 1 test test tests::greater_than_100 ... FAILED  failures:  ---- tests::greater_than_100 stdout ---- thread 'tests::greater_than_100' panicked at 'Guess value must be greater than or equal to 1, got 200.', src/lib.rs:11:13 note: Run with `RUST_BACKTRACE=1` for a backtrace. note: Panic did not include expected string 'Guess value must be less than or equal to 100'  failures:     tests::greater_than_100  test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  The failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string ‚ÄòGuess value must be less than or equal to 100'.  The panic message that we did get in this case was Guess value must be greater than or equal to 1, got 200. Now we can start figuring out where our bug is!   Using Result&lt;T, E&gt; in Tests  So far, we‚Äôve written tests that panic when they fail.  We can also write tests that use Result&lt;T, E&gt;!  Here‚Äôs the test from Listing 11-1, rewritten to use Result&lt;T, E&gt; and return an Err instead of panicking:   #[cfg(test)] mod tests {     #[test]     fn it_works() -&gt; Result&lt;(), String&gt; {         if 2 + 2 == 4 {             Ok(())         } else {             Err(String::from(\"two plus two does not equal four\"))         }     } }   The it_works function now has a return type, Result&lt;(), String&gt;.  In the body of the function, rather than calling the assert_eq! macro, we return Ok(()) when the test passes and an Err with a String inside when the test fails.   Writing tests so they return a Result&lt;T, E&gt; enables you to use the question mark operator in the body of tests,  which can be a convenient way to write tests that should fail if any operation within them returns an Err variant.   You can‚Äôt use the #[should_panic] annotation on tests that use Result&lt;T, E&gt;.  Instead, you should return an Err value directly when the test should fail.   Now that you know several ways to write tests, let‚Äôs look at what is happening when we run our tests and explore the different options we can use with cargo test.   Controlling How Tests Are Run  Just as cargo run compiles your code and then runs the resulting binary, cargo test compiles your code in test mode and runs the resulting test binary.  You can specify command line options to change the default behavior of cargo test.  For example, the default behavior of the binary produced by cargo test is to run all the tests in parallel and capture output generated during test runs, preventing the output from being displayed and making it easier to read the output related to the test results.   Some command line options go to cargo test, and some go to the resulting test binary.  To separate these two types of arguments, you list the arguments that go to cargo test followed by the separator -- and then the ones that go to the test binary.  Running cargo test --help displays the options you can use with cargo test, and running cargo test -- --help displays the options you can use after the separator --.   Running Tests in Parallel or Consecutively  When you run multiple tests, by default they run in parallel using threads.  This means the tests will finish running faster so you can get feedback quicker on whether or not your code is working.  Because the tests are running at the same time, make sure your tests don‚Äôt depend on each other or on any shared state, including a shared environment, such as the current working directory or environment variables.   For example, say each of your tests runs some code that creates a file on disk named test-output.txt and writes some data to that file.  Then each test reads the data in that file and asserts that the file contains a particular value, which is different in each test.  Because the tests run at the same time, one test might overwrite the file between when another test writes and reads the file.  The second test will then fail, not because the code is incorrect but because the tests have interfered with each other while running in parallel.  One solution is to make sure each test writes to a different file; another solution is to run the tests one at a time.   If you don‚Äôt want to run the tests in parallel or if you want more fine-grained control over the number of threads used, you can send the --test-threads flag and the number of threads you want to use to the test binary. Take a look at the following example:   $ cargo test -- --test-threads=1  We set the number of test threads to 1, telling the program not to use any parallelism.  Running the tests using one thread will take longer than running them in parallel, but the tests won‚Äôt interfere with each other if they share state.   Showing Function Output  By default, if a test passes, Rust‚Äôs test library captures anything printed to standard output.  For example, if we call println! in a test and the test passes, we won‚Äôt see the println! output in the terminal; we‚Äôll see only the line that indicates the test passed.  If a test fails, we‚Äôll see whatever was printed to standard output with the rest of the failure message.   As an example, Listing 11-10 has a silly function that prints the value of its parameter and returns 10, as well as a test that passes and a test that fails.   fn prints_and_returns_10(a: i32) -&gt; i32 {     println!(\"I got the value {}\", a);     10 }  #[cfg(test)] mod tests {     use super::*;      #[test]     fn this_test_will_pass() {         let value = prints_and_returns_10(4);         assert_eq!(10, value);     }      #[test]     fn this_test_will_fail() {         let value = prints_and_returns_10(8);         assert_eq!(5, value);     } }  Listing 11-10: Tests for a function that calls println!   When we run these tests with cargo test, we‚Äôll see the following output:   running 2 tests test tests::this_test_will_pass ... ok test tests::this_test_will_fail ... FAILED  failures:  ---- tests::this_test_will_fail stdout ---- I got the value 8 thread 'tests::this_test_will_fail' panicked at 'assertion failed: `(left == right)`   left: `5`,  right: `10`', src/lib.rs:19:9 note: Run with `RUST_BACKTRACE=1` for a backtrace.  failures:     tests::this_test_will_fail  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  Note that nowhere in this output do we see I got the value 4, which is what is printed when the test that passes runs.  That output has been captured.  The output from the test that failed, I got the value 8, appears in the section of the test summary output, which also shows the cause of the test failure.   If we want to see printed values for passing tests as well, we can disable the output capture behavior by using the --nocapture flag:   $ cargo test -- --nocapture  When we run the tests in Listing 11-10 again with the --nocapture flag, we see the following output:   running 2 tests I got the value 4 I got the value 8 test tests::this_test_will_pass ... ok thread 'tests::this_test_will_fail' panicked at 'assertion failed: `(left == right)`   left: `5`,  right: `10`', src/lib.rs:19:9 note: Run with `RUST_BACKTRACE=1` for a backtrace. test tests::this_test_will_fail ... FAILED  failures:  failures:     tests::this_test_will_fail  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out  Note that the output for the tests and the test results are interleaved;  the reason is that the tests are running in parallel, as we talked about in the previous section.  Try using the --test-threads=1 option and the --nocapture flag, and see what the output looks like then!   Running a Subset of Tests by Name  Sometimes, running a full test suite can take a long time.  If you‚Äôre working on code in a particular area, you might want to run only the tests pertaining to that code.  You can choose which tests to run by passing cargo test the name or names of the test(s) you want to run as an argument.   To demonstrate how to run a subset of tests, we‚Äôll create three tests for our add_two function, as shown in Listing 11-11, and choose which ones to run.   pub fn add_two(a: i32) -&gt; i32 {     a + 2 }  #[cfg(test)] mod tests {     use super::*;      #[test]     fn add_two_and_two() {         assert_eq!(4, add_two(2));     }      #[test]     fn add_three_and_two() {         assert_eq!(5, add_two(3));     }      #[test]     fn one_hundred() {         assert_eq!(102, add_two(100));     } }  Listing 11-11: Three tests with three different names   If we run the tests without passing any arguments, as we saw earlier, all the tests will run in parallel:   running 3 tests test tests::add_two_and_two ... ok test tests::add_three_and_two ... ok test tests::one_hundred ... ok  test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out  Running Single Tests  We can pass the name of any test function to cargo test to run only that test:   $ cargo test one_hundred     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs      Running target/debug/deps/adder-06a75b4a1f2515e9  running 1 test test tests::one_hundred ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out  Only the test with the name one_hundred ran; the other two tests didn‚Äôt match that name.  The test output lets us know we had more tests than what this command ran by displaying 2 filtered out at the end of the summary line.   We can‚Äôt specify the names of multiple tests in this way; only the first value given to cargo test will be used.  But there is a way to run multiple tests.   Filtering to Run Multiple Tests  We can specify part of a test name, and any test whose name matches that value will be run.  For example, because two of our tests‚Äô names contain add, we can run those two by running cargo test add:   $ cargo test add     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs      Running target/debug/deps/adder-06a75b4a1f2515e9  running 2 tests test tests::add_two_and_two ... ok test tests::add_three_and_two ... ok  test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out  This command ran all tests with add in the name and filtered out the test named one_hundred.  Also note that the module in which a test appears becomes part of the test‚Äôs name, so we can run all the tests in a module by filtering on the module‚Äôs name.   Ignoring Some Tests Unless Specifically Requested  Sometimes a few specific tests can be very time-consuming to execute, so you might want to exclude them during most runs of cargo test.  Rather than listing as arguments all tests you do want to run, you can instead annotate the time-consuming tests using the ignore attribute to exclude them, as shown here:   #![allow(unused_variables)]   fn main() {   #[test]   fn it_works() {       assert_eq!(2 + 2, 4);   }    #[test]   #[ignore]   fn expensive_test() {       // code that takes an hour to run   } }  After #[test] we add the #[ignore] line to the test we want to exclude.  Now when we run our tests, it_works runs, but expensive_test doesn‚Äôt:   $ cargo test    Compiling adder v0.1.0 (file:///projects/adder)     Finished dev [unoptimized + debuginfo] target(s) in 0.24 secs      Running target/debug/deps/adder-ce99bcc2479f4607  running 2 tests test expensive_test ... ignored test it_works ... ok  test result: ok. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out  The expensive_test function is listed as ignored.  If we want to run only the ignored tests, we can use cargo test -- --ignored:   $ cargo test -- --ignored     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs      Running target/debug/deps/adder-ce99bcc2479f4607  running 1 test test expensive_test ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out  By controlling which tests run, you can make sure your cargo test results will be fast.  When you‚Äôre at a point where it makes sense to check the results of the ignored tests and you have time to wait for the results, you can run cargo test -- --ignored instead.   Test Organization  As mentioned at the start of the chapter, testing is a complex discipline, and different people use different terminology and organization.  The Rust community thinks about tests in terms of two main categories: unit tests and integration tests.  Unit tests are small and more focused, testing one module in isolation at a time, and can test private interfaces.  Integration tests are entirely external to your library and use your code in the same way any other external code would, using only the public interface and potentially exercising multiple modules per test.   Writing both kinds of tests is important to ensure that the pieces of your library are doing what you expect them to, separately and together.   Unit Tests  The purpose of unit tests is to test each unit of code in isolation from the rest of the code to quickly pinpoint where code is and isn‚Äôt working as expected.  You‚Äôll put unit tests in the src directory in each file with the code that they‚Äôre testing.  The convention is to create a module named tests in each file to contain the test functions and to annotate the module with cfg(test).   The Tests Module and #[cfg(test)]  The #[cfg(test)] annotation on the tests module tells Rust to compile and run the test code only when you run cargo test, not when you run cargo build.  This saves compile time when you only want to build the library and saves space in the resulting compiled artifact because the tests are not included.  You‚Äôll see that because integration tests go in a different directory, they don‚Äôt need the #[cfg(test)] annotation.  However, because unit tests go in the same files as the code, you‚Äôll use #[cfg(test)] to specify that they shouldn‚Äôt be included in the compiled result.   Recall that when we generated the new adder project in the first section of this chapter, Cargo generated this code for us:   #[cfg(test)] mod tests {     #[test]     fn it_works() {         assert_eq!(2 + 2, 4);     } }  This code is the automatically generated test module.  The attribute cfg stands for configuration and tells Rust that the following item should only be included given a certain configuration option.  In this case, the configuration option is test, which is provided by Rust for compiling and running tests.  By using the cfg attribute, Cargo compiles our test code only if we actively run the tests with cargo test.  This includes any helper functions that might be within this module, in addition to the functions annotated with #[test].   Testing Private Functions  There‚Äôs debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions.  Regardless of which testing ideology you adhere to, Rust‚Äôs privacy rules do allow you to test private functions. Consider the code in Listing 11-12 with the private function internal_adder.   pub fn add_two(a: i32) -&gt; i32 {     internal_adder(a, 2) }  fn internal_adder(a: i32, b: i32) -&gt; i32 {     a + b }  #[cfg(test)] mod tests {     use super::*;      #[test]     fn internal() {         assert_eq!(4, internal_adder(2, 2));     } }  Listing 11-12: Testing a private function   Note that the internal_adder function is not marked as pub, but because tests are just Rust code and the tests module is just another module, you can bring internal_adder into a test‚Äôs scope and call it.  If you don‚Äôt think private functions should be tested, there‚Äôs nothing in Rust that will compel you to do so.   Integration Tests  In Rust, integration tests are entirely external to your library.  They use your library in the same way any other code would, which means they can only call functions that are part of your library‚Äôs public API.  Their purpose is to test whether many parts of your library work together correctly.  Units of code that work correctly on their own could have problems when integrated, so test coverage of the integrated code is important as well.  To create integration tests, you first need a tests directory.   The tests Directory  We create a tests directory at the top level of our project directory, next to src.  Cargo knows to look for integration test files in this directory.  We can then make as many test files as we want to in this directory, and Cargo will compile each of the files as an individual crate.   Let‚Äôs create an integration test.  With the code in Listing 11-12 still in the src/lib.rs file, make a tests directory, create a new file named tests/integration_test.rs, and enter the code in Listing 11-13.   //Filename: tests/integration_test.rs use adder;  #[test] fn it_adds_two() {     assert_eq!(4, adder::add_two(2)); }  Listing 11-13: An integration test of a function in the adder crate   We‚Äôve added use adder at the top of the code, which we didn‚Äôt need in the unit tests.  The reason is that each file in the tests directory is a separate crate, so we need to bring our library into each test crate‚Äôs scope.   We don‚Äôt need to annotate any code in tests/integration_test.rs with #[cfg(test)].  Cargo treats the tests directory specially and compiles files in this directory only when we run cargo test.  Run cargo test now:   $ cargo test    Compiling adder v0.1.0 (file:///projects/adder)     Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs      Running target/debug/deps/adder-abcabcabc  running 1 test test tests::internal ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out       Running target/debug/deps/integration_test-ce99bcc2479f4607  running 1 test test it_adds_two ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out     Doc-tests adder  running 0 tests  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out   The three sections of output include the unit tests, the integration test, and the doc tests.  The first section for the unit tests is the same as we‚Äôve been seeing: one line for each unit test (one named internal that we added in Listing 11-12) and then a summary line for the unit tests.   The integration tests section starts with the line Running target/debug/deps/integration_test-ce99bcc2479f4607 (the hash at the end of your output will be different).  Next, there is a line for each test function in that integration test and a summary line for the results of the integration test just before the Doc-tests adder section starts.   Similarly to how adding more unit test functions adds more result lines to the unit tests section, adding more test functions to the integration test file adds more result lines to this integration test file‚Äôs section.  Each integration test file has its own section, so if we add more files in the tests directory, there will be more integration test sections.   We can still run a particular integration test function by specifying the test function‚Äôs name as an argument to cargo test.  To run all the tests in a particular integration test file, use the --test argument of cargo test followed by the name of the file:   $ cargo test --test integration_test     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs      Running target/debug/integration_test-952a27e0126bb565  running 1 test test it_adds_two ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out  This command runs only the tests in the tests/integration_test.rs file.   Submodules in Integration Tests  As you add more integration tests, you might want to make more than one file in the tests directory to help organize them; for example, you can group the test functions by the functionality they‚Äôre testing.  As mentioned earlier, each file in the tests directory is compiled as its own separate crate.   Treating each integration test file as its own crate is useful to create separate scopes that are more like the way end users will be using your crate.  However, this means files in the tests directory don‚Äôt share the same behavior as files in src do, as you learned in Chapter 7 regarding how to separate code into modules and files.   The different behavior of files in the tests directory is most noticeable when you have a set of helper functions that would be useful in multiple integration test files and you try to follow the steps in the ‚ÄúSeparating Modules into Different Files‚Äù section of Chapter 7 to extract them into a common module.  For example, if we create tests/common.rs and place a function named setup in it, we can add some code to setup that we want to call from multiple test functions in multiple test files:   //Filename: tests/common.rs pub fn setup() {     // setup code specific to your library's tests would go here }  When we run the tests again, we‚Äôll see a new section in the test output for the common.rs file, even though this file doesn‚Äôt contain any test functions nor did we call the setup function from anywhere:   running 1 test test tests::internal ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out       Running target/debug/deps/common-b8b07b6f1be2db70  running 0 tests  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out       Running target/debug/deps/integration_test-d993c68b431d39df  running 1 test test it_adds_two ... ok  test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out     Doc-tests adder  running 0 tests  test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out  Having common appear in the test results with running 0 tests displayed for it is not what we wanted.  We just wanted to share some code with the other integration test files.   To avoid having common appear in the test output, instead of creating tests/common.rs, we‚Äôll create tests/common/mod.rs.  This is an alternate naming convention that Rust also understands.  Naming the file this way tells Rust not to treat the common module as an integration test file.  When we move the setup function code into tests/common/mod.rs and delete the tests/common.rs file, the section in the test output will no longer appear.  Files in subdirectories of the tests directory don‚Äôt get compiled as separate crates or have sections in the test output.   After we‚Äôve created tests/common/mod.rs, we can use it from any of the integration test files as a module.  Here‚Äôs an example of calling the setup function from the it_adds_two test in tests/integration_test.rs:   //Filename: tests/integration_test.rs use adder;  mod common;  #[test] fn it_adds_two() {     common::setup();     assert_eq!(4, adder::add_two(2)); }  Note that the mod common; declaration is the same as the module declaration we demonstrated in Listing 7-21.  Then in the test function, we can call the common::setup() function.   Integration Tests for Binary Crates  If our project is a binary crate that only contains a src/main.rs file and doesn‚Äôt have a src/lib.rs file, we can‚Äôt create integration tests in the tests directory and bring functions defined in the src/main.rs file into scope with a use statement.  Only library crates expose functions that other crates can use; binary crates are meant to be run on their own.   This is one of the reasons Rust projects that provide a binary have a straightforward src/main.rs file that calls logic that lives in the src/lib.rs file.  Using that structure, integration tests can test the library crate with use to make the important functionality available.  If the important functionality works, the small amount of code in the src/main.rs file will work as well, and that small amount of code doesn‚Äôt need to be tested.   Summary  Rust‚Äôs testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes.  Unit tests exercise different parts of a library separately and can test private implementation details.  Integration tests check that many parts of the library work together correctly, and they use the library‚Äôs public API to test the code in the same way external code will use it.  Even though Rust‚Äôs type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.  ","categories": ["RUST Language"],
        "tags": ["Automataion","Test","Bug"],
        "url": "https://jjungs-lee.github.io//rust%20language/11.Writing-Automated-Tests/",
        "teaser":null},]
