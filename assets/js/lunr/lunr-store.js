var store = [{
        "title": "RUST : 0. Overview",
        "excerpt":"I will post a summary of RUST   Plz follow the below link. Thx :D   link     Getting Started   Programming a Guessing Game   3. Common Programming Concepts   4. Understanding Ownership   5. Using Structs to Structure Related Data   Enums and Pattern Matching   Managing Growing Projects with Packages, Crates, and Modules   Common Collections   Error Handling   Generic Types, Traits, and Lifetimes   Writing Automated Tests   An I/O Project: Building a Command Line Program   Functional Language Features: Iterators and Closures   More about Cargo and Crates.io   Smart Pointers   Fearless Concurrency   Object Oriented Programming Features of Rust   Patterns and Matching   Advanced Features   Final Project: Building a Multithreaded Web Server   Appendix    [Reference]   eng ver : https://doc.rust-lang.org/book/title-page.html   kor ver : https://rinthel.github.io/rust-lang-book-ko  ","categories": ["RUST"],
        "tags": ["Summery","Overview"],
        "url": "https://jjungs-lee.github.io//rust/rust-0.Overview/",
        "teaser":null},{
        "title": "RUST : 3. Common Programming Concepts",
        "excerpt":"Variables and Mutability  Default variables are immutable.  If you want mutable variable, can make them mutable by adding mut in front of the variable name.  fn main() {     let mut x = 5;     println!(\"The value of x is: {}\", x);     x = 6;     println!(\"The value of x is: {}\", x); }  First, you aren‚Äôt allowed to use mut with constants. Constants aren‚Äôt just immutable by default‚Äîthey‚Äôre always immutable.  You declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated.  const MAX_POINTS: u32 = 100_000;  Note: Rust‚Äôs naming convention for constants is to use all uppercase with underscores between words, and underscores can be inserted in numeric literals to improve readability   Data Types  Keep in mind that Rust is a statically typed language, which means that it must know the types of all variables at compile time.   Table 3-1: Integer Types in Rust                  Length       Signed       Unsigned                       8-bit       i8       u8                 16-bit       i16       u16                 32-bit       i32       u32                 64-bit       i64       u64                 arch       isize       usize           Table 3-2:Integer Literals in Rust                  Number literals       Example                       Decimal       98_222                 Hex       0xff                 Octal       0o77                 Binary       0b1111_0000                 Byte (u8 only)       b‚ÄôA‚Äô           // Floating-Point(default type is f64) let x = 2.0; // f64 let y: f32 = 3.0; // f32  // Numeric Operations let sum = 5 + 10; let difference = 95.5 - 4.3; let product = 4 * 30; let quotient = 56.7 / 32.2; let remainder = 43 % 5;  // Boolean let t = true; let f: bool = false; // with explicit type annotation  // Character let c = 'z'; let z = '‚Ñ§'; let heart_eyed_cat = 'üòª';  // Tuple let tup = (500, 6.4, 1); let (x, y, z) = tup; println!(\"The value of y is: {}\", y);  // Access a tuple element directly by using a period(.) // followed by the index of the value we want to access let x: (i32, f64, u8) = (500, 6.4, 1); let five_hundred = x.0; let six_point_four = x.1; let one = x.2;  // array let a = [1, 2, 3, 4, 5]; let first = a[0]; let second = a[1];   Functions  fn keyword, which allows you to declare new functions.  Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere.  fn main() {     println!(\"Hello, world!\");      another_function(); }  fn another_function() {     println!(\"Another function.\"); }  Parameters  fn main() {     another_function(5, 6); }  fn another_function(x: i32, y: i32) {     println!(\"The value of x is: {}\", x);     println!(\"The value of y is: {}\", y); }   Function Bodies Contain Statements and Expressions  Statements are instructions that perform some action and do not return a value.   Expressions evaluate to a resulting value.  fn main() {     let y = 6;  // This is Statemnets      // Error - (let y = 6) statement does not return a value     let x = (let y = 6);  }  Note: This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment.  In those languages, you can write x = y = 6 and have both x and y have the value 6; that is not the case in Rust.   Expressions can be part of statements: the 6 in the statement let y = 6; is an expression that evaluates to the value 6.  Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression, for example:  fn main() {     let x = 5;      let y = { //like this         let x = 3;         x + 1     };      println!(\"The value of y is: {}\", y); }  This expression:  {     let x = 3;     x + 1 }  Note: the x + 1 line without a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far.  Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.   Functions with Return Values  We don‚Äôt name return values, but we do declare their type after an arrow (-&gt;) In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function.  You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly.  // perfectly valid function in Rust fn five() -&gt; i32 {     5  }  fn main() {     let x = five();      println!(\"The value of x is: {}\", x); }   fn main() {     let x = plus_one(5);      println!(\"The value of x is: {}\", x); }  fn plus_one(x: i32) -&gt; i32 {     x + 1     // If place a semicolon at the end of the line x + 1,     // changing it from an expression to a statement,      // we‚Äôll get an error.     // like this -&gt; error[E0308]: mismatched types }   Comments  A simple comment:      // So we‚Äôre doing something complicated here,      // long enough that we need     // multiple lines of comments to do it!     // Whew! Hopefully, this comment will     // explain what‚Äôs going on.     let lucky_number = 7; // I‚Äôm feeling lucky today.  Rust also has another kind of comment, documentation comments, which we‚Äôll discuss in the ‚ÄúPublishing a Crate to Crates.io‚Äù section of Chapter 14.   Control Flow  The most common constructs that let you control the flow of execution of Rust code are if expressions and loops.  if Expressions  fn main() {     let number = 3;      if number &lt; 5 {         rintln!(\"condition was true\");     } else {         println!(\"condition was false\");     } }   It‚Äôs also worth noting that the condition in this code must be a bool. Rust will not automatically try to convert non-Boolean types to a Boolean.  fn main() {     let number = 3;      if number {   //Change to \"if number != 0 {\"         println!(\"number was three\");     } }   You can have multiple conditions by combining if and else in an else if expression.  fn main() {     let number = 6;      if number % 4 == 0 {         println!(\"number is divisible by 4\");     } else if number % 3 == 0 {         println!(\"number is divisible by 3\");     } else if number % 2 == 0 {         println!(\"number is divisible by 2\");     } else {         println!(\"number is not divisible by 4, 3, or 2\");     } }   Because if is an expression, we can use it on the right side of a let statement, as in below.  fn main() {     let condition = true;     let number = if condition {         5     } else {         6     };      println!(\"The value of number is: {}\", number); }   loop Expressions  The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.   Most terminals support a keyboard shortcut, ctrl-c, to interrupt a program that is stuck in a continual loop. The symbol ^C represents where you pressed ctrl-c. You may or may not see the word again! printed after the ^C, depending on where the code was in the loop when it received the interrupt signal.  fn main() {     loop {         println!(\"again!\");     } }   // Returning Values from Loops fn main() {     let mut counter = 0;      let result = loop {         counter += 1;          if counter == 10 {           break counter * 2;         }       };      println!(\"The result is {}\", result); }  while Expressions  While the condition is true, the loop runs. When the condition ceases to be true, the program calls break, stopping the loop. This loop type could be implemented using a combination of loop, if, else, and break; you could try that now in a program, if you‚Äôd like.  fn main() {     let mut number = 3;      while number != 0 {         println!(\"{}!\", number);          number -= 1;     }      println!(\"LIFTOFF!!!\"); }   for Expressions  You could use the while construct to loop over the elements of a collection, such as an array.  fn main() {     let a = [10, 20, 30, 40, 50];     let mut index = 0;      while index &lt; 5 {         println!(\"the value is: {}\", a[index]);          index = index + 1;     } }  But this approach is error prone; we could cause the program to panic if the index length is incorrect. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop. As a more concise alternative, you can use a for loop and execute some code for each item in a collection.  fn main() {     let a = [10, 20, 30, 40, 50];      for element in a.iter() {         println!(\"the value is: {}\", element);     } }   Here‚Äôs what the countdown would look like using a for loop and another method we‚Äôve not yet talked about, rev, to reverse the range:  fn main() {     for number in (1..4).rev() {         println!(\"{}!\", number);     }       println!(\"LIFTOFF!!!\"); }  ","categories": ["RUST"],
        "tags": ["concepts","valriable"],
        "url": "https://jjungs-lee.github.io//rust/rust-3.Common-Programming-Concepts/",
        "teaser":null},{
        "title": "RUST : 4. Understanding Ownership",
        "excerpt":"Ownership is Rust‚Äôs most unique feature, and it enables Rust to make memory safety guarantees without needing a garbage collector.   What Is Ownership?  Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach:     memory is managed through a system of ownership with a set of rules that the compiler checks at compile time.    Ownership Rules     Each value in Rust has a variable that‚Äôs called its owner.   There can only be one owner at a time.   When the owner goes out of scope, the value will be dropped.   Variable Scope  The variable s refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it‚Äôs declared until the end of the current scope.  let s = \"hello\";  scope is the range within a program for which an item is valid.  {                    // s is not valid here, it‚Äôs not yet declared   let s = \"hello\";   // s is valid from this point forward   // do stuff with s }                    // this scope is now over, and s is no longer valid  Listing 4-1: A variable and the scope in which it is valid  There are two important points in time here:     When s comes into scope, it is valid.   It remains valid until it goes out of scope.   The String Type  we need a data type that is more complex than the ones we covered in the ‚ÄúData Types‚Äù section of Chapter 3. The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.   For example, what if we want to take user input and store it? For these situations, Rust has a second string type, String. This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a String from a string literal using the from function, like so:  let s = String::from(\"hello\");  The double colon (::) is an operator that allows us to namespace this particular from function under the String type rather than using some sort of name like string_from.   Why can String be mutated but literals cannot? The difference is how these two types deal with memory.   Memory and Allocation  With the String type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:     The memory must be requested from the operating system at runtime.   We need a way of returning this memory to the operating system when we‚Äôre done with our String.   That first part is done by us: when we call String::from, its implementation requests the memory it needs.   However, the second part is different. In languages with a garbage collector (GC), the GC keeps track and cleans up memory that isn‚Äôt being used anymore, and we don‚Äôt need to think about it. Without a GC, it‚Äôs our responsibility to identify when memory is no longer being used and call code to explicitly return it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we‚Äôll waste memory. If we do it too early, we‚Äôll have an invalid variable. If we do it twice, that‚Äôs a bug too. We need to pair exactly one allocate with exactly one free.  {     let s = String::from(\"hello\"); // s is valid from this point forward     // do stuff with s }                                  // this scope is now over, and s is no                                    // longer valid  There is a natural point at which we can return the memory our String needs to the operating system: when s goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called drop, and it‚Äôs where the author of String can put the code to return the memory. Rust calls drop automatically at the closing curly bracket.   Note: In C++, this pattern of deallocating resources at the end of an item‚Äôs lifetime is sometimes called Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar to you if you‚Äôve used RAII patterns.   Ways Variables and Data Interact: Move  let s1 = String::from(\"hello\"); let s2 = s1;  A String is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.     Figure 4-1: Representation in memory of a String holding the value ‚Äúhello‚Äù bound to s1   When we assign s1 to s2, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to.     Figure 4-2: Representation in memory of the variable s2 that has a copy of the pointer, length, and capacity of s1   The representation does not look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation s2 = s1 could be very expensive in terms of runtime performance if the data on the heap were large.     Figure 4-3: Another possibility for what s2 = s1 might do if Rust copied the heap data as well   Earlier, we said that when a variable goes out of scope, Rust automatically calls the drop function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. To ensure memory safety, there‚Äôs one more detail to what happens in this situation in Rust.   let s1 = String::from(\"hello\"); let s2 = s1;  println!(\"{}, world!\", s1);  You‚Äôll get an error like this because Rust prevents you from using the invalidated reference:  error[E0382]: use of moved value: `s1`  --&gt; src/main.rs:5:28   | 3 |     let s2 = s1;   |         -- value moved here 4 | 5 |     println!(\"{}, world!\", s1);   |                            ^^ value used here after move   |   = note: move occurs because `s1` has type `std::string::String`,   which does not implement the `Copy` trait  with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it‚Äôs known as a move. That solves our problem! With only s2 valid, when it goes out of scope, it alone will free the memory, and we‚Äôre done. Rust will never automatically create ‚Äúdeep‚Äù copies of your data.     Figure 4-4: Representation in memory after s1 has been invalidated   Ways Variables and Data Interact: Clone  If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone. This methods are a common feature in many programming languages, you‚Äôve probably seen them before. This works just fine and explicitly produces the behavior shown in Figure 4-3, where the heap data does get copied.  let s1 = String::from(\"hello\"); let s2 = s1.clone();  println!(\"s1 = {}, s2 = {}\", s1, s2);   Stack-Only Data: Copy  This code seems to contradict what we just learned: we don‚Äôt have a call to clone, but x is still valid and wasn‚Äôt moved into y.   The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there‚Äôs no reason we would want to prevent x from being valid after we create the variable y. In other words, there‚Äôs no difference between deep and shallow copying here, so calling clone wouldn‚Äôt do anything different from the usual shallow copying and we can leave it out.  let x = 5; let y = x;  println!(\"x = {}, y = {}\", x, y);  Rust has a special annotation called the Copy trait that we can place on types like integers that are stored on the stack (we‚Äôll talk more about traits in Chapter 10). So what types are Copy?     All the integer types, such as u32.   The Boolean type, bool, with values true and false.   All the floating point types, such as f64.   The character type, char.   Tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not.   Ownership and Functions  The semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. If we tried to use s after the call to takes_ownership, Rust would throw a compile-time error. These static checks protect us from mistakes.  fn main() {     let s = String::from(\"hello\");  // s comes into scope      takes_ownership(s);             // s's value moves into the function...                                     // ... and so is no longer valid here      let x = 5;                      // x comes into scope      makes_copy(x);                  // x would move into the function,                                     // but i32 is Copy, so it‚Äôs okay to still                                     // use x afterward  } // Here, x goes out of scope, then s. But because s's value was moved, nothing   // special happens.  fn takes_ownership(some_string: String) { // some_string comes into scope     println!(\"{}\", some_string); } // Here, some_string goes out of scope and `drop` is called. The backing   // memory is freed.  fn makes_copy(some_integer: i32) { // some_integer comes into scope     println!(\"{}\", some_integer); } // Here, some_integer goes out of scope. Nothing special happens.  Listing 4-3: Functions with ownership and scope annotated   Return Values and Scope  Returning values can also transfer ownership. Listing 4-4 is an example with similar annotations to those in Listing 4-3.  fn main() {     let s1 = gives_ownership();         // gives_ownership moves its return                                         // value into s1      let s2 = String::from(\"hello\");     // s2 comes into scope      let s3 = takes_and_gives_back(s2);  // s2 is moved into                                         // takes_and_gives_back, which also                                         // moves its return value into s3 } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was   // moved, so nothing happens. s1 goes out of scope and is dropped.  fn gives_ownership() -&gt; String {             // gives_ownership will move its                                              // return value into the function                                              // that calls it      let some_string = String::from(\"hello\"); // some_string comes into scope      some_string                              // some_string is returned and                                              // moves out to the calling                                              // function }  // takes_and_gives_back will take a String and return one fn takes_and_gives_back(a_string: String) -&gt; String { // a_string comes into                                                       // scope      a_string  // a_string is returned and moves out to the calling function }  Listing 4-4: Transferring ownership of return values   The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless the data has been moved to be owned by another variable.   Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It‚Äôs quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.   It‚Äôs possible to return multiple values using a tuple, as shown in Listing 4-5.  fn main() {     let s1 = String::from(\"hello\");      let (s2, len) = calculate_length(s1);      println!(\"The length of '{}' is {}.\", s2, len); }  fn calculate_length(s: String) -&gt; (String, usize) {     let length = s.len(); // len() returns the length of a String.      (s, length) }  Listing 4-5: Returning ownership of parameters  But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called references.   References and Borrowing  Here is how you would define and use a calculate_length function that has a reference to an object as a parameter instead of taking ownership of the value:  fn main() {     let s1 = String::from(\"hello\");      let len = calculate_length(&amp;s1);      println!(\"The length of '{}' is {}.\", s1, len); }  fn calculate_length(s: &amp;String) -&gt; usize {     s.len() }  First, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass &amp;s1 into calculate_length and, in its definition, we take &amp;String rather than String.   These ampersands are references, and they allow you to refer to some value without taking ownership of it     Figure 4-5: A diagram of &amp;String s pointing at String s1  Note: The opposite of referencing by using &amp; is dereferencing, which is accomplished with the dereference operator, *. We‚Äôll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.   let s1 = String::from(\"hello\");  let len = calculate_length(&amp;s1);  The &amp;s1 syntax lets us create a reference that refers to the value of s1 but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.   Likewise, the signature of the function uses &amp; to indicate that the type of the parameter s is a reference. Let‚Äôs add some explanatory annotations:  fn calculate_length(s: &amp;String) -&gt; usize { // s is a reference to a String     s.len() } // Here, s goes out of scope. But because it does not have ownership of what   // it refers to, nothing happens.```  The scope in which the variable s is valid is the same as any function parameter‚Äôs scope, but we don‚Äôt drop what the reference points to when it goes out of scope because we don‚Äôt have ownership. When functions have references as parameters instead of the actual values, we won‚Äôt need to return the values in order to give back ownership, because we never had ownership.   We call having references as function parameters borrowing. As in real life, if a person owns something, you can borrow it from them. When you‚Äôre done, you have to give it back.   So what happens if we try to modify something we‚Äôre borrowing? Try the code. Spoiler alert: it doesn‚Äôt work!  fn main() {     let s = String::from(\"hello\");      change(&amp;s); }  fn change(some_string: &amp;String) {     some_string.push_str(\", world\"); }  error[E0596]: cannot borrow immutable borrowed content `*some_string` as mutable  --&gt; error.rs:8:5   | 7 | fn change(some_string: &amp;String) {   |                        ------- use `&amp;mut String` here to make mutable 8 |     some_string.push_str(\", world\");   |     ^^^^^^^^^^^ cannot borrow as mutable  Listing 4-6: Attempting to modify a borrowed value  Just as variables are immutable by default, so are references. We‚Äôre not allowed to modify something we have a reference to.   Mutable References  We can fix the error in the code from Listing 4-6 with just a small tweak  fn main() {     let mut s = String::from(\"hello\");      change(&amp;mut s); }  fn change(some_string: &amp;mut String) {     some_string.push_str(\", world\"); }  First, we had to change s to be mut. Then we had to create a mutable reference with &amp;mut s and accept a mutable reference with some_string: &amp;mut String.   But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:  let mut s = String::from(\"hello\");  let r1 = &amp;mut s; let r2 = &amp;mut s;  println!(\"{}, {}\", r1, r2);  error[E0499]: cannot borrow `s` as mutable more than once at a time  --&gt; src/main.rs:5:14   | 4 |     let r1 = &amp;mut s;   |              ------ first mutable borrow occurs here 5 |     let r2 = &amp;mut s;   |              ^^^^^^ second mutable borrow occurs here 6 | 7 |     println!(\"{}, {}\", r1, r2);   |                        -- first borrow later used here  This restriction allows for mutation but in a very controlled fashion. It‚Äôs something that new Rustaceans struggle with, because most languages let you mutate whenever you‚Äôd like.   The benefit of having this restriction is that Rust can prevent data races at compile time. A data race is similar to a race condition and happens when these three behaviors occur:     Two or more pointers access the same data at the same time.   At least one of the pointers is being used to write to the data.   There‚Äôs no mechanism being used to synchronize access to the data.   Data races cause undefined behavior and can be difficult to diagnose and fix when you‚Äôre trying to track them down at runtime; Rust prevents this problem from happening because it won‚Äôt even compile code with data races!   As always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not simultaneous ones:   let mut s = String::from(\"hello\");  {     let r1 = &amp;mut s; } // r1 goes out of scope here, so we can make a new reference with no problems.  let r2 = &amp;mut s;   A similar rule exists for combining mutable and immutable references. This code results in an error:  let mut s = String::from(\"hello\");  let r1 = &amp;s; // no problem let r2 = &amp;s; // no problem let r3 = &amp;mut s; // BIG PROBLEM  println!(\"{}, {}, and {}\", r1, r2, r3);  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable  --&gt; src/main.rs:6:14   | 4 |     let r1 = &amp;s; // no problem   |              -- immutable borrow occurs here 5 |     let r2 = &amp;s; // no problem 6 |     let r3 = &amp;mut s; // BIG PROBLEM   |              ^^^^^^ mutable borrow occurs here 7 | 8 |     println!(\"{}, {}, and {}\", r1, r2, r3);   |                                -- immutable borrow later used here  Whew! We also cannot have a mutable reference while we have an immutable one. Users of an immutable reference don‚Äôt expect the values to suddenly change out from under them! However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else‚Äôs reading of the data.   Note that a reference‚Äôs scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references occurs before the mutable reference is introduced:  let mut s = String::from(\"hello\");  let r1 = &amp;s; // no problem let r2 = &amp;s; // no problem println!(\"{} and {}\", r1, r2); // r1 and r2 are no longer used after this point  let r3 = &amp;mut s; // no problem println!(\"{}\", r3);  The scopes of the immutable references r1 and r2 end after the println! where they are last used, which is before the mutable reference r3 is created. These scopes don‚Äôt overlap, so this code is allowed.   Even though borrowing errors may be frustrating at times, remember that it‚Äôs the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don‚Äôt have to track down why your data isn‚Äôt what you thought it was.   Dangling References  In languages with pointers, it‚Äôs easy to erroneously create a dangling pointer, a pointer that references a location in memory that may have been given to someone else, by freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.   fn main() {     let reference_to_nothing = dangle(); }  fn dangle() -&gt; &amp;String {     let s = String::from(\"hello\");      &amp;s }  error[E0106]: missing lifetime specifier  --&gt; dangle.rs:5:16   | 5 | fn dangle() -&gt; &amp;String {   |                ^^^^^^^   |   = help: this function's return type contains a borrowed value, but there is no     value for it to be borrowed from   = help: consider giving it a 'static lifetime  error: aborting due to previous error  This error message refers to a feature we haven‚Äôt covered yet: lifetimes. We‚Äôll discuss lifetimes in detail in Chapter 10. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:     this function‚Äôs return type contains a borrowed value, but there is no value for it to be borrowed from.    Let‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our dangle code:  fn dangle() -&gt; &amp;String { // dangle returns a reference to a String      let s = String::from(\"hello\"); // s is a new String      &amp;s // we return a reference to the String, s } // Here, s goes out of scope, and is dropped. Its memory goes away.   // Danger!  Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String. That‚Äôs no good! Rust won‚Äôt let us do this.   The solution here is to return the String directly:  fn no_dangle() -&gt; String {     let s = String::from(\"hello\");      s }  This works without any problems. Ownership is moved out, and nothing is deallocated.   The Rules of References  Let‚Äôs recap what we‚Äôve discussed about references:     At any given time, you can have either one mutable reference or any number of immutable references.   References must always be valid.   The Slice Type  Another data type that does not have ownership is the slice. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.   Here‚Äôs a small programming problem: write a function that takes a string and returns the first word it finds in that string. If the function doesn‚Äôt find a space in the string, the whole string must be one word, so the entire string should be returned.   Let‚Äôs think about the signature of this function:  fn first_word(s: &amp;String) -&gt; ?   This function, first_word, has a &amp;String as a parameter. We don‚Äôt want ownership, so this is fine. But what should we return? We don‚Äôt really have a way to talk about part of a string. However, we could return the index of the end of the word. Let‚Äôs try that, as shown in Listing 4-7.  fn main() {     fn first_word(s: &amp;String) -&gt; usize {         let bytes = s.as_bytes();          for (i, &amp;item) in bytes.iter().enumerate() {             if item == b' ' {                 return i;             }         }          s.len()     } }  Listing 4-7: The first_word function that returns a byte index value into the String parameter   Because we need to go through the String element by element and check whether a value is a space, we‚Äôll convert our String to an array of bytes using the as_bytes method:  let bytes = s.as_bytes();  Next, we create an iterator over the array of bytes using the iter method:  for (i, &amp;item) in bytes.iter().enumerate() {  We‚Äôll discuss iterators in more detail in Chapter 13. For now, know that iter is a method that returns each element in a collection and that enumerate wraps the result of iter and returns each element as part of a tuple instead. The first element of the tuple returned from enumerate is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.   Because the enumerate method returns a tuple, we can use patterns to destructure that tuple, just like everywhere else in Rust. So in the for loop, we specify a pattern that has i for the index in the tuple and &amp;item for the single byte in the tuple. Because we get a reference to the element from .iter().enumerate(), we use &amp; in the pattern.   Inside the for loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using s.len():      if item == b' ' {         return i;     } } s.len()  We now have a way to find out the index of the end of the first word in the string, but there‚Äôs a problem. We‚Äôre returning a usize on its own, but it‚Äôs only a meaningful number in the context of the &amp;String. In other words, because it‚Äôs a separate value from the String, there‚Äôs no guarantee that it will still be valid in the future. Consider the program in Listing 4-8 that uses the first_word function from Listing 4-7.  fn main() {     let mut s = String::from(\"hello world\");      let word = first_word(&amp;s); // word will get the value 5      s.clear(); // this empties the String, making it equal to \"\"      // word still has the value 5 here, but there's no more string that     // we could meaningfully use the value 5 with. word is now totally invalid! }  Listing 4-8: Storing the result from calling the first_word function and then changing the String contents   This program compiles without any errors and would also do so if we used word after calling s.clear(). Because word isn‚Äôt connected to the state of s at all, word still contains the value 5. We could use that value 5 with the variable s to try to extract the first word out, but this would be a bug because the contents of s have changed since we saved 5 in word.   Having to worry about the index in word getting out of sync with the data in s is tedious and error prone! Managing these indices is even more brittle if we write a second_word function. Its signature would have to look like this:   fn second_word(s: &amp;String) -&gt; (usize, usize) {  Now we‚Äôre tracking a starting and an ending index, and we have even more values that were calculated from data in a particular state but aren‚Äôt tied to that state at all. We now have three unrelated variables floating around that need to be kept in sync.   Luckily, Rust has a solution to this problem: string slices.   String Slices  A string slice is a reference to part of a String, and it looks like this:  fn main() {     let s = String::from(\"hello world\");      let hello = &amp;s[0..5];     let world = &amp;s[6..11]; }  This is similar to taking a reference to the whole String but with the extra [0..5] bit. Rather than a reference to the entire String, it‚Äôs a reference to a portion of the String.   We can create slices using a range within brackets by specifying [starting_index..ending_index], where starting_index is the first position in the slice and ending_index is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to ending_index minus starting_index. So in the case of let world = &amp;s[6..11];, world would be a slice that contains a pointer to the 7th byte (counting from 1) of s with a length value of 5.   Figure 4-6: String slice referring to part of a String   With Rust‚Äôs .. range syntax, if you want to start at the first index (zero), you can drop the value before the two periods. In other words, these are equal:  let s = String::from(\"hello\");  let slice = &amp;s[0..2]; let slice = &amp;s[..2];  You can also drop both values to take a slice of the entire string. So these are equal:  let s = String::from(\"hello\");  let len = s.len();  let slice = &amp;s[0..len]; let slice = &amp;s[..];   Note: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the ‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù section of Chapter 8.   With all this information in mind, let‚Äôs rewrite first_word to return a slice. The type that signifies ‚Äústring slice‚Äù is written as &amp;str:  fn first_word(s: &amp;String) -&gt; &amp;str {     let bytes = s.as_bytes();      for (i, &amp;item) in bytes.iter().enumerate() {         if item == b' ' {             return &amp;s[0..i];         }     }      &amp;s[..] }  We get the index for the end of the word in the same way as we did in Listing 4-7, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.   Now when we call first_word, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.   Returning a slice would also work for a second_word function:  fn second_word(s: &amp;String) -&gt; &amp;str {  We now have a straightforward API that‚Äôs much harder to mess up, because the compiler will ensure the references into the String remain valid. Remember the bug in the program in Listing 4-8, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn‚Äôt show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of first_word will throw a compile-time error:  fn main() {     let mut s = String::from(\"hello world\");      let word = first_word(&amp;s);      s.clear(); // Error!      println!(\"the first word is: {}\", word); }  error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable   --&gt; src/main.rs:18:5    | 16 |     let word = first_word(&amp;s);    |                           -- immutable borrow occurs here 17 | 18 |     s.clear(); // error!    |     ^^^^^^^^^ mutable borrow occurs here 19 | 20 |     println!(\"the first word is: {}\", word);    |                                       ---- immutable borrow later used here  Recall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because clear needs to truncate the String, it needs to get a mutable reference. Rust disallows this, and compilation fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!   String Literals Are Slices  The type of s here is &amp;str: it‚Äôs a slice pointing to that specific point of the binary. This is also why string literals are immutable; &amp;str is an immutable reference.  let s = \"Hello, world!\";   String Slices as Parameters  Knowing that you can take slices of literals and String values leads us to one more improvement on first_word, and that‚Äôs its signature:  fn first_word(s: &amp;String) -&gt; &amp;str {  A more experienced Rustacean would write the signature shown in Listing 4-9 instead because it allows us to use the same function on both &amp;String values and &amp;str values.   fn first_word(s: &amp;str) -&gt; &amp;str {  Listing 4-9: Improving the first_word function by using a string slice for the type of the s parameter   If we have a string slice, we can pass that directly. If we have a String, we can pass a slice of the entire String. Defining a function to take a string slice instead of a reference to a String makes our API more general and useful without losing any functionality:   fn main() {     let my_string = String::from(\"hello world\");      // first_word works on slices of `String`s     let word = first_word(&amp;my_string[..]);      let my_string_literal = \"hello world\";      // first_word works on slices of string literals     let word = first_word(&amp;my_string_literal[..]);      // Because string literals *are* string slices already,     // this works too, without the slice syntax!     let word = first_word(my_string_literal); }   Other Slices  String slices, as you might imagine, are specific to strings. But there‚Äôs a more general slice type, too. Consider this array:   let a = [1, 2, 3, 4, 5];  Just as we might want to refer to a part of a string, we might want to refer to part of an array. We‚Äôd do so like this:   let a = [1, 2, 3, 4, 5];  let slice = &amp;a[1..3];  This slice has the type &amp;[i32]. It works the same way as string slices do, by storing a reference to the first element and a length. You‚Äôll use this kind of slice for all sorts of other collections. We‚Äôll discuss these collections in detail when we talk about vectors in Chapter 8.   Summary  The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don‚Äôt have to write and debug extra code to get this control.   Ownership affects how lots of other parts of Rust work, so we‚Äôll talk about these concepts further throughout the rest of the book. Let‚Äôs move on to Chapter 5 and look at grouping pieces of data together in a struct.  ","categories": ["RUST"],
        "tags": ["Ownership","Unique feature","Memory safety"],
        "url": "https://jjungs-lee.github.io//rust/rust-4.Understanding-Ownership/",
        "teaser":null},{
        "title": "RUST : 5. Using structs to structure related data",
        "excerpt":"A struct, or structure, is a custom data type that lets you name and package together multiple related values that make up a meaningful group.   Defining and Instantiating Structs  Structs are similar to tuples, which were discussed in Chapter 3. Like tuples, the pieces of a struct can be different types. Unlike with tuples, you‚Äôll name each piece of data so it‚Äôs clear what the values mean. As a result of these names, structs are more flexible than tuples.   To define a struct, we enter the keyword struct and name the entire struct  struct User {     username: String,     email: String,     sign_in_count: u64,     active: bool, }  Listing 5-1: A User struct definition   To use a struct after we‚Äôve defined it, we create an instance of that struct by specifying concrete values for each of the fields.  We create an instance by stating the name of the struct and then add curly brackets containing key: value pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don‚Äôt have to specify the fields in the same order in which we declared them in the struct.  let user1 = User {     email: String::from(\"someone@example.com\"),     username: String::from(\"someusername123\"),     active: true,     sign_in_count: 1, };  Listing 5-2: Creating an instance of the User struct   To get a specific value from a struct, we can use dot(.) notation. If we wanted just this user‚Äôs email address, we could use user1.email wherever we wanted to use this value. If the instance is mutable, we can change a value by using the dot(.) notation and assigning into a particular field. Listing 5-3 shows how to change the value in the email field of a mutable User instance.  let mut user1 = User {     email: String::from(\"someone@example.com\"),     username: String::from(\"someusername123\"),     active: true,     sign_in_count: 1, };  user1.email = String::from(\"anotheremail@example.com\");  Listing 5-3: Changing the value in the email field of a User instance   Listing 5-4 shows a build_user function that returns a User instance with the given email and username. The active field gets the value of true, and the sign_in_count gets a value of 1.  // JHS) maybe this function similar constructor in C++ fn build_user(email: String, username: String) -&gt; User {     User {         email: email,         username: username,         active: true,         sign_in_count: 1,     } }  Listing 5-4: A build_user function that takes an email and username and returns a User instance   Using the Field Init Shorthand when Variables and Fields Have the Same Name  Because the parameter names and the struct field names are exactly the same in Listing 5-4, we can use the field init shorthand syntax to rewrite build_user so that it behaves exactly the same but doesn‚Äôt have the repetition of email and username, as shown in Listing 5-5.  fn build_user(email: String, username: String) -&gt; User {     User {         email,         username,         active: true,         sign_in_count: 1,     } }  Listing 5-5: A build_user function that uses field init shorthand because the email and username parameters have the same name as struct fields   Creating Instances From Other Instances With Struct Update Syntax  It‚Äôs often useful to create a new instance of a struct that uses most of an old instance‚Äôs values but changes some. You‚Äôll do this using struct update syntax. First, Listing 5-6 shows how we create a new User instance in user2 without the update syntax. We set new values for email and username but otherwise use the same values from user1 that we created in Listing 5-2.  let user2 = User {     email: String::from(\"another@example.com\"),     username: String::from(\"anotherusername567\"),     active: user1.active,     sign_in_count: user1.sign_in_count, };  Listing 5-6: Creating a new User instance using some of the values from user1  Using struct update syntax, we can achieve the same effect with less code, as shown in Listing 5-7. The syntax .. specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance. The code in Listing 5-7 also creates an instance in user2 that has a different value for email and username but has the same values for the active and sign_in_count fields from user1.  let user2 = User {     email: String::from(\"another@example.com\"),     username: String::from(\"anotherusername567\"),     ..user1 };  Listing 5-7: Using struct update syntax to set new email and username values for a User instance but use the rest of the values from the fields of the instance in the user1 variable   Using Tuple Structs without Named Fields to Create Different Types  You can also define structs that look similar to tuples, called tuple structs. Tuple structs have the added meaning the struct name provides but don‚Äôt have names associated with their fields; rather, they just have the types of the fields. Tuple structs are useful when you want to give the whole tuple a name and make the tuple be a different type from other tuples, and naming each field as in a regular struct would be verbose or redundant.   To define a tuple struct, start with the struct keyword and the struct name followed by the types in the tuple.  struct Color(i32, i32, i32); struct Point(i32, i32, i32);  let black = Color(0, 0, 0); let origin = Point(0, 0, 0);  Tuple struct instances behave like tuples: you can destructure them into their individual pieces, you can use a . followed by the index to access an individual value, and so on.   Unit-Like Structs Without Any Fields  You can also define structs that don‚Äôt have any fields! These are called unit-like structs because they behave similarly to (), the unit type. Unit-like structs can be useful in situations in which you need to implement a trait on some type but don‚Äôt have any data that you want to store in the type itself. We‚Äôll discuss traits in Chapter 10.   Ownership of Struct Data  In the User struct definition in Listing 5-1, we used the owned String type rather than the &amp;str string slice type. This is a deliberate choice because we want instances of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.   It‚Äôs possible for structs to store references to data owned by something else, but to do so requires the use of lifetimes, a Rust feature that we‚Äôll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is.  Let‚Äôs say you try to store a reference in a struct without specifying lifetimes, like this, which won‚Äôt work:   In Chapter 10, we‚Äôll discuss how to fix these errors so you can store references in structs, but for now, we‚Äôll fix errors like these using owned types like String instead of references like &amp;str.  // This code does not compile! struct User {     username: &amp;str,     email: &amp;str,     sign_in_count: u64,     active: bool, }  fn main() {     let user1 = User {         email: \"someone@example.com\",         username: \"someusername123\",         active: true,         sign_in_count: 1,     }; }  // The compiler will complain that it needs lifetime specifiers: error[E0106]: missing lifetime specifier --&gt;   | 2 |     username: &amp;str,   |               ^ expected lifetime parameter  error[E0106]: missing lifetime specifier --&gt;   | 3 |     email: &amp;str,   |            ^ expected lifetime parameter   An Example Program Using Structs  Let‚Äôs write a program that calculates the area of a rectangle. We‚Äôll start with single variables, and then refactor the program until we‚Äôre using structs instead.  fn main() {     let length1 = 50;     let width1 = 30;      println!(         \"The area of the rectangle is {} square pixels.\",         area(length1, width1)     ); }  fn area(length: u32, width: u32) -&gt; u32 {     length * width }  Listing 5-8: Calculating the area of a rectangle specified by separate width and height variables  The issue with this code is evident in the signature of area:   Even though Listing 5-8 works and figures out the area of the rectangle by calling the area function with each dimension, we can do better.  fn area(width: u32, height: u32) -&gt; u32 {  The area function is supposed to calculate the area of one rectangle, but the function we wrote has two parameters. The parameters are related, but that‚Äôs not expressed anywhere in our program. It would be more readable and more manageable to group width and height together. We‚Äôve already discussed one way we might do that in ‚ÄúThe Tuple Type‚Äù section of Chapter 3: by using tuples.   Refactoring with Tuples  Listing 5-9 shows another version of our program that uses tuples.  fn main() {     let rect1 = (30, 50);      println!(         \"The area of the rectangle is {} square pixels.\",         area(rect1)     ); }  fn area(dimensions: (u32, u32)) -&gt; u32 {     dimensions.0 * dimensions.1 }  Listing 5-9: Specifying the width and height of the rectangle with a tuple  In one way, this program is better. Tuples let us add a bit of structure, and we‚Äôre now passing just one argument. But in another way, this version is less clear: tuples don‚Äôt name their elements, so our calculation has become more confusing because we have to index into the parts of the tuple.   It doesn‚Äôt matter if we mix up width and height for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that width is the tuple index 0 and height is the tuple index 1. If someone else worked on this code, they would have to figure this out and keep it in mind as well. It would be easy to forget or mix up these values and cause errors, because we haven‚Äôt conveyed the meaning of our data in our code.   Refactoring with Structs: Adding More Meaning  We use structs to add meaning by labeling the data. We can transform the tuple we‚Äôre using into a data type with a name for the whole as well as names for the parts, as shown in Listing 5-10.  struct Rectangle {     width: u32,     height: u32, }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(         \"The area of the rectangle is {} square pixels.\",         area(&amp;rect1)     ); }  fn area(rectangle: &amp;Rectangle) -&gt; u32 {     rectangle.width * rectangle.height }  Listing 5-10: Defining a Rectangle struct  Here we‚Äôve defined a struct and named it Rectangle. Inside the curly brackets, we defined the fields as width and height, both of which have type u32. Then in main, we created a particular instance of Rectangle that has a width of 30 and a height of 50.   Our area function is now defined with one parameter, which we‚Äôve named rectangle, whose type is an immutable borrow of a struct Rectangle instance. As mentioned in Chapter 4, we want to borrow the struct rather than take ownership of it. This way, main retains its ownership and can continue using rect1, which is the reason we use the &amp; in the function signature and where we call the function.   The area function accesses the width and height fields of the Rectangle instance. Our function signature for area now says exactly what we mean: calculate the area of Rectangle, using its width and height fields. This conveys that the width and height are related to each other, and it gives descriptive names to the values rather than using the tuple index values of 0 and 1. This is a win for clarity.   Adding Useful Functionality with Derived Traits  It‚Äôd be nice to be able to print an instance of Rectangle while we‚Äôre debugging our program and see the values for all its fields. Listing 5-11 tries using the println! macro as we have used in previous chapters. This won‚Äôt work, however.  struct Rectangle {     length: u32,     width: u32, }  fn main() {     let rect1 = Rectangle { length: 50, width: 30 };      println!(\"rect1 is {}\", rect1);      // When we compile this code, we get an error with this core message:     // error[E0277]: `Rectangle` doesn't implement `std::fmt::Display` }  Listing 5-11: Attempting to print a Rectangle instance   The println! macro can do many kinds of formatting, and by default, the curly brackets tell println! to use formatting known as Display: output intended for direct end user consumption. The primitive types we‚Äôve seen so far implement Display by default, because there‚Äôs only one way you‚Äôd want to show a 1 or any other primitive type to a user. But with structs, the way println! should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown? Due to this ambiguity, Rust doesn‚Äôt try to guess what we want, and structs don‚Äôt have a provided implementation of Display.  = help: the trait `std::fmt::Display` is not implemented for `Rectangle` = note: in format strings you may be able to use `{:?}`          (or {:#?} for pretty-print) instead  Let‚Äôs try it! The println! macro call will now look like println!(\"rect1 is {:?}\", rect1);. Putting the specifier :? inside the curly brackets tells println! we want to use an output format called Debug. The Debug trait enables us to print our struct in a way that is useful for developers so we can see its value while we‚Äôre debugging our code.   Compile the code with this change. Drat! We still get an error:  error[E0277]: `Rectangle` doesn't implement `std::fmt::Debug`  But again, the compiler gives us a helpful note:  = help: the trait `std::fmt::Debug` is not implemented for `Rectangle` = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`  Rust does include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation #[derive(Debug)] just before the struct definition, as shown in Listing 5-12.  #[derive(Debug)] struct Rectangle {     width: u32,     height: u32, }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(\"rect1 is {:?}\", rect1); }  Listing 5-12: Adding the annotation to derive the Debug trait and printing the Rectangle instance using debug formatting  Now when we run the program, we won‚Äôt get any errors, and we‚Äôll see the following output:  rect1 is Rectangle { width: 30, height: 50 }   Nice! It‚Äôs not the prettiest output, but it shows the values of all the fields for this instance, which would definitely help during debugging. When we have larger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; in those cases, we can use {:#?}** instead of {:?} in the println! string. When we use the {:#?} style in the example, the output will look like this:  rect1 is Rectangle {     width: 30,     height: 50 }  Rust has provided a number of traits for us to use with the derive annotation that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We‚Äôll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10.   Our area function is very specific: it only computes the area of rectangles. It would be helpful to tie this behavior more closely to our Rectangle struct, because it won‚Äôt work with any other type. Let‚Äôs look at how we can continue to refactor this code by turning the area function into an area method defined on our Rectangle type.   Method Syntax  Methods are similar to functions: they‚Äôre declared with the fn keyword and their name, they can have parameters and a return value, and they contain some code that is run when they‚Äôre called from somewhere else. However, methods are different from functions in that they‚Äôre defined within the context of a struct (or an enum or a trait object, which we cover in Chapters 6 and 17, respectively), and their first parameter is always self, which represents the instance of the struct the method is being called on.   Defining Methods  Let‚Äôs change the area function that has a Rectangle instance as a parameter and instead make an area method defined on the Rectangle struct, as shown in Listing 5-13.  #[derive(Debug)] struct Rectangle {     width: u32,     height: u32, }  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     } }  fn main() {     let rect1 = Rectangle { width: 30, height: 50 };      println!(         \"The area of the rectangle is {} square pixels.\",         rect1.area()     ); }  Listing 5-13: Defining an area method on the Rectangle struct  To define the function within the context of Rectangle, we start an impl (implementation) block. Then we move the area function within the impl curly brackets and change the first (and in this case, only) parameter to be self in the signature and everywhere within the body. In main, where we called the area function and passed rect1 as an argument, we can instead use method syntax to call the area method on our Rectangle instance. The method syntax goes after an instance: we add a dot(.) followed by the method name, parentheses, and any arguments.   In the signature for area, we use &amp;self instead of rectangle: &amp;Rectangle because Rust knows the type of self is Rectangle due to this method‚Äôs being inside the impl Rectangle context. Note that we still need to use the &amp; before self, just as we did in &amp;Rectangle. Methods can take ownership of self, borrow self immutably as we‚Äôve done here, or borrow self mutably, just as they can any other parameter.   We‚Äôve chosen &amp;self here for the same reason we used &amp;Rectangle in the function version: we don‚Äôt want to take ownership, and we just want to read the data in the struct, not write to it. If we wanted to change the instance that we‚Äôve called the method on as part of what the method does, we‚Äôd use &amp;mut self as the first parameter. Having a method that takes ownership of the instance by using just self as the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.   The main benefit of using methods instead of functions, in addition to using method syntax and not having to repeat the type of self in every method‚Äôs signature, is for organization. We‚Äôve put all the things we can do with an instance of a type in one impl block rather than making future users of our code search for capabilities of Rectangle in various places in the library we provide.   Where‚Äôs the -&gt; Operator?   In C and C++, two different operators are used for calling methods: you use . if you‚Äôre calling a method on the object directly and -&gt; if you‚Äôre calling the method on a pointer to the object and need to dereference the pointer first. In other words, if object is a pointer, object-&gt;something() is similar to (*object).something().   Rust doesn‚Äôt have an equivalent to the -&gt; operator; instead, Rust has a feature called automatic referencing and dereferencing. Calling methods is one of the few places in Rust that has this behavior.   Here‚Äôs how it works: when you call a method with object.something(), Rust automatically adds in &amp;, &amp;mut, or * so object matches the signature of the method. In other words, the following are the same:   p1.distance(&amp;p2);  (&amp;p1).distance(&amp;p2);  The first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver‚Äîthe type of self. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (&amp;self), mutating (&amp;mut self), or consuming (self). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.   Methods with More Parameters  Let‚Äôs practice using methods by implementing a second method on the Rectangle struct. This time, we want an instance of Rectangle to take another instance of Rectangle and return true if the second Rectangle can fit completely within self; otherwise it should return false. That is, we want to be able to write the program shown in Listing 5-14, once we‚Äôve defined the can_hold method.  fn main() {     let rect1 = Rectangle { length: 50, width: 30 };     let rect2 = Rectangle { length: 40, width: 10 };     let rect3 = Rectangle { length: 45, width: 60 };      println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&amp;rect2));     println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&amp;rect3)); }  Listing 5-14: Using the as-yet-unwritten can_hold method  And the expected output would look like the following, because both dimensions of rect2 are smaller than the dimensions of rect1 but rect3 is wider than rect1:  Can rect1 hold rect2? true Can rect1 hold rect3? false  We know we want to define a method, so it will be within the impl Rectangle block. The method name will be can_hold, and it will take an immutable borrow of another Rectangle as a parameter. We can tell what the type of the parameter will be by looking at the code that calls the method: rect1.can_hold(&amp;rect2) passes in &amp;rect2, which is an immutable borrow to rect2, an instance of Rectangle. This makes sense because we only need to read rect2 (rather than write, which would mean we‚Äôd need a mutable borrow), and we want main to retain ownership of rect2 so we can use it again after calling the can_hold method. The return value of can_hold will be a Boolean, and the implementation will check whether the width and height of self are both greater than the width and height of the other Rectangle, respectively. Let‚Äôs add the new can_hold method to the impl block from Listing 5-13, shown in Listing 5-15.  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     }      fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &gt; other.width &amp;&amp; self.height &gt; other.height     } }  Listing 5-15: Implementing the can_hold method on Rectangle that takes another Rectangle instance as a parameter   Associated Functions  Another useful feature of impl blocks is that we‚Äôre allowed to define functions within impl blocks that don‚Äôt take self as a parameter. These are called associated functions because they‚Äôre associated with the struct. They‚Äôre still functions, not methods, because they don‚Äôt have an instance of the struct to work with. You‚Äôve already used the String::from associated function.   Associated functions are often used for constructors that will return a new instance of the struct.  impl Rectangle {     fn square(size: u32) -&gt; Rectangle {         Rectangle { length: size, width: size }     } }  To call this associated function, we use the :: syntax with the struct name; let sq = Rectangle::square(3); is an example. This function is namespaced by the struct: the :: syntax is used for both associated functions and namespaces created by modules. We‚Äôll discuss modules in Chapter 7.   Multiple impl Blocks  Each struct is allowed to have multiple impl blocks. For example, Listing 5-15 is equivalent to the code shown in Listing 5-16, which has each method in its own impl block.  impl Rectangle {     fn area(&amp;self) -&gt; u32 {         self.width * self.height     } }  impl Rectangle {     fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {         self.width &gt; other.width &amp;&amp; self.height &gt; other.height     } }  Listing 5-16: Rewriting Listing 5-15 using multiple impl blocks  There‚Äôs no reason to separate these methods into multiple impl blocks here, but this is valid syntax. We‚Äôll see a case in which multiple impl blocks are useful in Chapter 10, where we discuss generic types and traits.   Summary  Structs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. Methods let you specify the behavior that instances of your structs have, and associated functions let you namespace functionality that is particular to your struct without having an instance available.   But structs aren‚Äôt the only way you can create custom types: let‚Äôs turn to Rust‚Äôs enum feature to add another tool to your toolbox.  ","categories": ["RUST"],
        "tags": ["Structure","Struct"],
        "url": "https://jjungs-lee.github.io//rust/rust-5.Using-Structs-to-Structure-Related-Data/",
        "teaser":null},]
